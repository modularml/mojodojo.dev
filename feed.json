{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Mojo Dojo",
  "home_page_url": "https://www.mojodojo.dev/",
  "feed_url": "https://www.mojodojo.dev/feed.json",
  "description": "Learning Resources for Mojo üî•",
  "items": [
    {
      "title": "Modverse Weekly Issue 31",
      "url": "https://www.mojodojo.dev/modverse-weekly/31.html",
      "id": "https://www.mojodojo.dev/modverse-weekly/31.html",
      "summary": "Modverse Weekly Issue 31\nflames-high-five\nOpen source contributions are starting to ramp up, thank you so much to community for embracing Mojoüî• open source and helping to impro...",
      "content_html": "\n<p><img src=\"/flames-high-five.webp\" alt=\"flames-high-five\"></p>\n<p>Open source contributions are starting to ramp up, thank you so much to community for embracing Mojoüî• open source and helping to improve the language!</p>\n<p>A new nightly Mojo compiler has been released! You can install it with:</p>\n<div class=\"language-bash\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-bash\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#C0CAF5\">modular</span><span style=\"color:#9ECE6A\"> install</span><span style=\"color:#9ECE6A\"> nightly/mojo</span></span></span></code></pre>\n</div><p>Check out the <a href=\"https://github.com/modularml/mojo/pull/2396/files\" target=\"_blank\" rel=\"noopener noreferrer\">diff since last nightly release</a> here, and <a href=\"https://github.com/modularml/mojo/blob/nightly/docs/changelog.md\" target=\"_blank\" rel=\"noopener noreferrer\">changes since the last stable release</a> here.</p>\n<h2>Blogs, tutorials, and videos</h2>\n<ul>\n<li>Check out this X tutorial on <a href=\"https://twitter.com/Modular/status/1782457173953634593\" target=\"_blank\" rel=\"noopener noreferrer\">vectorize and parallelize</a></li>\n</ul>\n<h2>Awesome Mojo</h2>\n<ul>\n<li>Mikhail (toasty) has release updates to 4 of his Mojo libraries:\n<ul>\n<li><a href=\"https://github.com/thatstoasty/prism\" target=\"_blank\" rel=\"noopener noreferrer\">prism</a>: CLI library, now with argument values and booleans</li>\n<li><a href=\"https://github.com/thatstoasty/mog\" target=\"_blank\" rel=\"noopener noreferrer\">mog</a>: TUI library with many updates</li>\n<li><a href=\"https://github.com/thatstoasty/gojo\" target=\"_blank\" rel=\"noopener noreferrer\">gojo</a>: Reimplementation of Go standard library. The basics of the famous net package are in!</li>\n<li><a href=\"https://github.com/thatstoasty/termios\" target=\"_blank\" rel=\"noopener noreferrer\">termios</a>: Terminal manipulation on Unix-like systems</li>\n</ul>\n</li>\n<li>Lukas published his HTML building library: <a href=\"https://github.com/lsh/lsx\" target=\"_blank\" rel=\"noopener noreferrer\">lsx</a></li>\n<li>Alain released <a href=\"https://github.com/alainrollejr/mocodes\" target=\"_blank\" rel=\"noopener noreferrer\">modcodes</a>: Error Correction (De)Coding with Mojo</li>\n<li><a href=\"https://github.com/basalt-org/basalt\" target=\"_blank\" rel=\"noopener noreferrer\">Basalt</a> is a promising ML framework, and they're looking for a web dev to help build <a href=\"https://github.com/basalt-org/basalt\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></li>\n<li>Vladyslav did an implementation of <a href=\"https://github.com/VMois/mojo-atol-simd\" target=\"_blank\" rel=\"noopener noreferrer\">atol-simd</a> with SIMD (Converting string to integer)</li>\n</ul>\n<h2>Open source contributions</h2>\n<p>If your name is on this list, reach out to Jack Clayton on Discord to claim some epic Mojoüî• swag!</p>\n<ul>\n<li>Gabriel made multiple contributions:\n<ul>\n<li>5 PR's <a href=\"https://github.com/modularml/mojo/pulls?q=is%3Apr+author%3Agabrieldemarmiesse+UnsafePointer+is%3Aclosed\" target=\"_blank\" rel=\"noopener noreferrer\">replacing LegacyPointer with UnsafePointer</a></li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2359\" target=\"_blank\" rel=\"noopener noreferrer\">#2359</a>: Implement Dict.<strong>str</strong>()</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2350\" target=\"_blank\" rel=\"noopener noreferrer\">#2350</a>: Test assert_raises() without FileCheck</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2323\" target=\"_blank\" rel=\"noopener noreferrer\">#2323</a>: Implement List.<strong>str</strong>()</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2327\" target=\"_blank\" rel=\"noopener noreferrer\">#2327</a> jayzhan211: Support reverse for Dict keys</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2319\" target=\"_blank\" rel=\"noopener noreferrer\">#2319</a> Mosafi2: Change FileHandle.read_bytes() to not copy data</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2314\" target=\"_blank\" rel=\"noopener noreferrer\">#2314</a> eltociear: update debugging.ipynb</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2310\" target=\"_blank\" rel=\"noopener noreferrer\">#2310</a> artemiogr97: create os.remove and os.unlink</li>\n</ul>\n<p>‚Äç</p>\n",
      "image": "https://www.mojodojo.dev/flames-high-five.webp",
      "date_published": "2024-04-24T00:00:00.000Z",
      "authors": [
        {
          "name": "Jack Clayton"
        }
      ],
      "tags": []
    },
    {
      "title": "Modverse Weekly Issue 31",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2024-08-24-issue-31.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2024-08-24-issue-31.html",
      "summary": "Modverse Weekly Issue 31\nflames-high-five\nOpen source contributions are starting to ramp up, thank you so much to community for embracing Mojoüî• open source and helping to impro...",
      "content_html": "\n<p><img src=\"/flames-high-five.webp\" alt=\"flames-high-five\"></p>\n<p>Open source contributions are starting to ramp up, thank you so much to community for embracing Mojoüî• open source and helping to improve the language!</p>\n<p>A new nightly Mojo compiler has been released! You can install it with:</p>\n<div class=\"language-bash\" data-highlighter=\"prismjs\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-bash\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#C0CAF5\">modular</span><span style=\"color:#9ECE6A\"> install</span><span style=\"color:#9ECE6A\"> nightly/mojo</span></span></span></code></pre>\n</div><p>Check out the <a href=\"https://github.com/modularml/mojo/pull/2396/files\" target=\"_blank\" rel=\"noopener noreferrer\">diff since last nightly release</a> here, and <a href=\"https://github.com/modularml/mojo/blob/nightly/docs/changelog.md\" target=\"_blank\" rel=\"noopener noreferrer\">changes since the last stable release</a> here.</p>\n<h2>Blogs, tutorials, and videos</h2>\n<ul>\n<li>Check out this X tutorial on <a href=\"https://twitter.com/Modular/status/1782457173953634593\" target=\"_blank\" rel=\"noopener noreferrer\">vectorize and parallelize</a></li>\n</ul>\n<h2>Awesome Mojo</h2>\n<ul>\n<li>Mikhail (toasty) has release updates to 4 of his Mojo libraries:\n<ul>\n<li><a href=\"https://github.com/thatstoasty/prism\" target=\"_blank\" rel=\"noopener noreferrer\">prism</a>: CLI library, now with argument values and booleans</li>\n<li><a href=\"https://github.com/thatstoasty/mog\" target=\"_blank\" rel=\"noopener noreferrer\">mog</a>: TUI library with many updates</li>\n<li><a href=\"https://github.com/thatstoasty/gojo\" target=\"_blank\" rel=\"noopener noreferrer\">gojo</a>: Reimplementation of Go standard library. The basics of the famous net package are in!</li>\n<li><a href=\"https://github.com/thatstoasty/termios\" target=\"_blank\" rel=\"noopener noreferrer\">termios</a>: Terminal manipulation on Unix-like systems</li>\n</ul>\n</li>\n<li>Lukas published his HTML building library: <a href=\"https://github.com/lsh/lsx\" target=\"_blank\" rel=\"noopener noreferrer\">lsx</a></li>\n<li>Alain released <a href=\"https://github.com/alainrollejr/mocodes\" target=\"_blank\" rel=\"noopener noreferrer\">modcodes</a>: Error Correction (De)Coding with Mojo</li>\n<li><a href=\"https://github.com/basalt-org/basalt\" target=\"_blank\" rel=\"noopener noreferrer\">Basalt</a> is a promising ML framework, and they're looking for a web dev to help build <a href=\"https://github.com/basalt-org/basalt\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a></li>\n<li>Vladyslav did an implementation of <a href=\"https://github.com/VMois/mojo-atol-simd\" target=\"_blank\" rel=\"noopener noreferrer\">atol-simd</a> with SIMD (Converting string to integer)</li>\n</ul>\n<h2>Open source contributions</h2>\n<p>If your name is on this list, reach out to Jack Clayton on Discord to claim some epic Mojoüî• swag!</p>\n<ul>\n<li>Gabriel made multiple contributions:\n<ul>\n<li>5 PR's <a href=\"https://github.com/modularml/mojo/pulls?q=is%3Apr+author%3Agabrieldemarmiesse+UnsafePointer+is%3Aclosed\" target=\"_blank\" rel=\"noopener noreferrer\">replacing LegacyPointer with UnsafePointer</a></li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2359\" target=\"_blank\" rel=\"noopener noreferrer\">#2359</a>: Implement Dict.<strong>str</strong>()</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2350\" target=\"_blank\" rel=\"noopener noreferrer\">#2350</a>: Test assert_raises() without FileCheck</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2323\" target=\"_blank\" rel=\"noopener noreferrer\">#2323</a>: Implement List.<strong>str</strong>()</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2327\" target=\"_blank\" rel=\"noopener noreferrer\">#2327</a> jayzhan211: Support reverse for Dict keys</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2319\" target=\"_blank\" rel=\"noopener noreferrer\">#2319</a> Mosafi2: Change FileHandle.read_bytes() to not copy data</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2314\" target=\"_blank\" rel=\"noopener noreferrer\">#2314</a> eltociear: update debugging.ipynb</li>\n<li><a href=\"https://github.com/modularml/mojo/pull/2310\" target=\"_blank\" rel=\"noopener noreferrer\">#2310</a> artemiogr97: create os.remove and os.unlink</li>\n</ul>\n<p>‚Äç</p>\n",
      "image": "https://www.mojodojo.dev/flames-high-five.webp",
      "date_published": "2024-04-24T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-08-18",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-08-18.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-08-18.html",
      "summary": "Logo\nThis Week in Mojo 2023-08-18\nOfficial Content\n\nNew blog post: How Mojoüî• gets a 35,000x speedup over Python ‚Äì Part 1\n\nCommunity Content\n\nMaxim made a blog post on a binary ...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-08-18</h1>\n<h2>Official Content</h2>\n<ul>\n<li>New blog post: <a href=\"https://www.modular.com/blog/how-mojo-gets-a-35-000x-speedup-over-python-part-1\" target=\"_blank\" rel=\"noopener noreferrer\">How Mojoüî• gets a 35,000x speedup over Python ‚Äì Part 1</a></li>\n</ul>\n<h2>Community Content</h2>\n<ul>\n<li>Maxim made a blog post on a binary search tree implementation he's working on: <a href=\"https://mzaks.medium.com/a-high-level-introduction-to-fibytree-bd7f8775d815\" target=\"_blank\" rel=\"noopener noreferrer\">A high level introduction to FibyTree</a></li>\n</ul>\n<h2>Team Answers</h2>\n<h3>Small Binary Size for Embedded</h3>\n<p>In fullness of time Mojo will be very useful for this sort of use-case. We haven't done any work on code size directly, but a statically linked hello world program produces a ~100K <code>a.out</code> file on a linux system. Mojo supports inline asm, but it is pretty ugly to use right now, we'll improve that later.</p>\n<p>There are a lot of analogs between embedded systems and GPU/accelerator programming btw, both want effectively-no-dependence runtimes.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1139563087498842232/1139589228297199677\" target=\"_blank\" rel=\"noopener noreferrer\">2023-08-12 Chris Lattner</a></li>\n</ul>\n<h3>ONNX Runtime</h3>\n<p>we run benchmarks against ONNX Runtime, and in our tests, the Modular AI Engine is almost always faster than it. We may add these numbers to the public dashboard at https://performance.modular.com/ in the future.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1140700862524690632/1140733786414399608\" target=\"_blank\" rel=\"noopener noreferrer\">2023-08-14 Alex Kirchhoff</a></li>\n</ul>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-08-18T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-08-11",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-08-11.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-08-11.html",
      "summary": "Logo\nThis Week in Mojo 2023-08-11\nOfficial Content\n\nNew blog post: An easy introduction to Mojo for Python programmers comparing how to calculate Euclidean distance in raw Pytho...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-08-11</h1>\n<h2>Official Content</h2>\n<ul>\n<li>New blog post: <a href=\"https://www.modular.com/blog/an-easy-introduction-to-mojo-for-python-programmers\" target=\"_blank\" rel=\"noopener noreferrer\">An easy introduction to Mojo for Python programmers</a> comparing how to calculate Euclidean distance in raw Python, Numpy and Mojo.</li>\n</ul>\n<h2>Team Answers</h2>\n<h3>Null Pointers</h3>\n<p>We are definitely interested in introducing an <code>Option[T]</code> / <code>Optional[T]</code> type in the future, but need more traits support built out. Once we have that, we can shift to non-nullable \"pointers\" by default.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1138854784930172928/1138902579640807566\" target=\"_blank\" rel=\"noopener noreferrer\">2023-08-10 Github Chris Lattner</a></li>\n</ul>\n<h3>Linear algebra in standard library</h3>\n<p>We need to figure it out, but I'd prefer to keep the stdlib pretty conventional and focused on \"normal\" library types like integers, strings, dictionaries, pushing things like tensors and matmul out to a linear algebra package (e.g. see Numpy not being built in).  That said, I do think something like that could/should be included in the normal distro.</p>\n<p>The Modular Engine will be different, and I expect/hope it to always be the best state of the art implementation of this stuff, but it can do so without trying to hold back other efforts!</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1138051611936178228/1138176785087987773\" target=\"_blank\" rel=\"noopener noreferrer\">2023-08-08 Discord Chris Lattner</a></li>\n</ul>\n<h3>Standard Library <code>Tensor</code></h3>\n<p>The <code>Tensor</code> type is new but is also very much a work in progress. We added it because a lot of example notebooks are using very low level programming (effectively malloc+free) and need a simple owned buffer type. The initial idea is that \"array like\" names would work with arbitrary element types (e.g. you can put a üê¥ or üê∂ object in an array) but that we wanted a more \"numerics sounding\" collection that would be parameterized on DType.</p>\n<p>Mojo is still missing a bunch of type systems features (e.g. traits etc) that will massively impact the shape and structure of the standard library, and as those come in, we'll want to significantly rethink previous decisions.  Despite that, we don't want to completely hold back progress on things until all those features are available - we decided it is better to prototype some things, get experience, and be willing to reinvent / replace things over time.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1138051611936178228/1138156214983860264\" target=\"_blank\" rel=\"noopener noreferrer\">2023-08-08 Discord Chris Lattner</a></li>\n</ul>\n<h3>Why not build Mojo on top of Swift?</h3>\n<p>I'm also a fan of Swift. The major issue with it is that it isn't a member of the Python family. I'm confused why you think that Mojo isn't inspired by Swift, because Mojo certainly is. That said, you're right that building a new thing takes longer than leveraging an existing thing. The reason we're taking this approach is that we're optimizing for quality of result (we want to build the world's best thing) not time to market. I would consider it success if you come to love Mojo more than Swift some day üòÑ</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/485#discussioncomment-6647832\" target=\"_blank\" rel=\"noopener noreferrer\">2023-08-07 Github Chris Lattner</a></li>\n</ul>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-08-11T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-08-04",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-08-04.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-08-04.html",
      "summary": "Logo\nThis Week in Mojo 2023-08-04\nMojo Playground Update\n\nFull Changelog here\n\n‚≠ê New\nA new Tensor type has been introduced. This tensor type manages its own data (unlike NDBuffe...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-08-04</h1>\n<h2>Mojo Playground Update</h2>\n<ul>\n<li><a href=\"https://docs.modular.com/mojo/changelog.html#august-2023\" target=\"_blank\" rel=\"noopener noreferrer\">Full Changelog here</a></li>\n</ul>\n<h3>‚≠ê New</h3>\n<p>A new <a href=\"https://docs.modular.com/mojo/MojoStdlib/Tensor.html\" target=\"_blank\" rel=\"noopener noreferrer\">Tensor</a> type has been introduced. This tensor type manages its own data (unlike NDBuffer and Buffer which are just views). Therefore, the tensor type performs its own allocation and free. Here is a simple example of using the tensor type to represent an RGB image and convert it to grayscale:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> DType </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> DType</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> Tensor </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> Tensor</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> TensorShape</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> Index </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> Index</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> Random </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> rand</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">let</span><span style=\"color:#C0CAF5\"> height</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 256</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">let</span><span style=\"color:#C0CAF5\"> width</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 256</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">let</span><span style=\"color:#C0CAF5\"> channels</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 3</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># Create the tensor of dimensions height, width, channels and fill with</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># random value.</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">let</span><span style=\"color:#C0CAF5\"> image</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> rand</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">float32</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#7AA2F7\">TensorShape</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">height</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> width</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> channels</span><span style=\"color:#9ABDF5\">))</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># Declare the grayscale image.</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">var</span><span style=\"color:#C0CAF5\"> gray_scale_image</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> Tensor</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">float32</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#7AA2F7\">TensorShape</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">height</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> width</span><span style=\"color:#9ABDF5\">))</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># Perform the RGB to grayscale transform.</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#A9B1D6\"> y </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">height</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> x </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">width</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">        let</span><span style=\"color:#C0CAF5\"> r</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> image</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">y</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\">x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">]</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">        let</span><span style=\"color:#C0CAF5\"> g</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> image</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">y</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\">x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">]</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">        let</span><span style=\"color:#C0CAF5\"> b</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> image</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">y</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\">x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\">2</span><span style=\"color:#9ABDF5\">]</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">        gray_scale_image</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#7AA2F7\">Index</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">y</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\">x</span><span style=\"color:#9ABDF5\">)]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 0.299</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#A9B1D6\"> r </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 0.587</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#A9B1D6\"> g </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 0.114</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#A9B1D6\"> b</span></span></span></code></pre>\n</div><h3>üõ†Ô∏è Fixed</h3>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/53\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #53</a>: Int now implements true division with the / operator. Similar to Python, this returns a 64-bit floating point number. The corresponding in-place operator, /=, has the same semantics as //=.</li>\n</ul>\n<h2>Team Answers</h2>\n<h3>Modular and Mojo Docs</h3>\n<p>we use Quarto (for now) but this will change to our own custom solution for a number of reasons</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1104620458168553563/1136344454802964512\" target=\"_blank\" rel=\"noopener noreferrer\">2023-08-03 Discord Tim Davis</a></li>\n</ul>\n<h3>Python PEP 703 - Optional Global Interpreter Lock</h3>\n<p>It should be strictly compatible with Mojo's use of CPython and I think it is a good move for the Python ecosystem in general. I'm seeing a lot of folks that seem to be declaring success early, my read of PEP703 is that there is still a lot of work to do to figure things out and land things. The <a href=\"https://discuss.python.org/t/a-steering-council-notice-about-pep-703-making-the-global-interpreter-lock-optional-in-cpython/30474\" target=\"_blank\" rel=\"noopener noreferrer\">Python core team summary</a> is really great and I highly recommend reading it. It seems like the transition will take a few years. I'm personally very curious how heavy users of CPython internals (e.g. TensorFlow and PyTorch) will handle the transition - the changes are pretty profound, breaking core C APIs like <code>PyList_GetItem</code>.</p>\n<p>Also my read of the code in the implementation seems that they may need to iterate a bit. One of the core operations in the critical path for performance is <code>_Py_ThreadId</code> and my read of it is that it will break code that uses thread local storage for other things by directly scribbling into it in a <a href=\"https://github.com/colesbury/nogil/blob/f7e45d6bfbbd48c8d5cf851c116b73b85add9fc6/Include/object.h#L428-L455\" target=\"_blank\" rel=\"noopener noreferrer\">very low-level way</a></p>\n<p>That said, there are a ton of crazy smart people working on this and everyone seems highly motivated. Overall, it's a great step forward for the ecosystem in any case in my opinion.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1135312969664843846/1135332933805285457\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-31 Discord Chris Lattner</a></li>\n</ul>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-08-04T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-07-28",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-07-28.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-07-28.html",
      "summary": "Logo\nThis Week in Mojo 2023-07-28\nPlayground Release\nFull changelog here\n‚≠êÔ∏è New\nTypes that define both __getitem__ and __setitem__ (i.e. where sub-scripting instances creates co...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-07-28</h1>\n<h2>Playground Release</h2>\n<p><a href=\"https://docs.modular.com/mojo/changelog.html#july-2023\" target=\"_blank\" rel=\"noopener noreferrer\">Full changelog here</a></p>\n<h3>‚≠êÔ∏è New</h3>\n<p>Types that define both <code>__getitem__</code> and <code>__setitem__</code> (i.e. where sub-scripting instances creates computed LValues) can now be indexed in parameter expressions.\nUnroll decorator for loops with constant bounds and steps:</p>\n<ul>\n<li><code>@unroll</code>: Fully unroll a loop.</li>\n<li><code>@unroll(n)</code>: Unroll a loop by factor of n, where n is a positive integer.</li>\n</ul>\n<p>Unroll decorator requires loop bounds and iteration step to be compiler time constant value, otherwise unrolling will fail with compilation error. This also doesn‚Äôt make loop induction variable a parameter.</p>\n<p>Fully unroll the loop:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">unroll</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">5</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">    print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><p>Unroll the loop by a factor of 4 (with remainder iterations of 2):</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">unroll</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">4</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">10</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">    print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><p>The Mojo REPL now prints the values of variables defined in the REPL. There is full support for scalars and structs. Non-scalar SIMD vectors are not supported at this time.</p>\n<h3>üõ†Ô∏è Fixed</h3>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/437\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #437</a> - Range can now be instantiated with a PythonObject.</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/288\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #288</a> - Python strings can now be safely copied.</li>\n</ul>\n<h2>Community Content</h2>\n<ul>\n<li><a href=\"https://github.com/automata\" target=\"_blank\" rel=\"noopener noreferrer\">Vilson Vieira</a> has been working on a <a href=\"https://github.com/automata/mojograd\" target=\"_blank\" rel=\"noopener noreferrer\">Mojo implementation of micrograd named mojograd</a>, still a work in progress</li>\n<li>added a chatbot to the bottom of <a href=\"/mojo-team-answers.html#mojo-chatbot\" target=\"_blank\">Mojo Team Answers</a> while experimenting with it.</li>\n</ul>\n<h2>Mojo Team Answers</h2>\n<h3>Loop Unrolling</h3>\n<p>These are two loop decorators to tell the compiler to unroll a loop, see <a href=\"https://en.wikipedia.org/wiki/Loop_unrolling\" target=\"_blank\" rel=\"noopener noreferrer\">wikipedia loop unrolling</a>. This doesn't impact the functionality of the loops, but potentially can help for better performance since it opens possibility for further compiler optimizations.</p>\n<p>Fully unroll the loop's 10 iterations into 10 <code>do_something</code> calls and remove the for-loop:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">unroll</span><span style=\"color:#A9B1D6\"> </span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">10</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7AA2F7\">  do_something</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><p>Unroll every 2 iterations and loop over 5 times:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">unroll</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">2</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#A9B1D6\"> i </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\"> (</span><span style=\"color:#FF9E64\">10</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7AA2F7\">  do_something</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">i</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><p>This decorator can be attached to while statement too.</p>\n<p>Note that currently the compiler can only unroll a loop:</p>\n<ul>\n<li>Its lower bound, upper bound and induction variable step every iteration are compile time constants</li>\n<li>There is no early exits in the loop body that makes the loop trip count dynamic during runtime.</li>\n</ul>\n<p>Otherwise, Compilation fails if a loop is decorated with <code>@unroll</code></p>\n<p>Here is a brief description of these two decorators in <a href=\"https://docs.modular.com/mojo/changelog.html#july-2023\" target=\"_blank\" rel=\"noopener noreferrer\">Mojo changelog on 2023-07-26</a>.</p>\n<p><a href=\"https://docs.modular.com/mojo/MojoStdlib/Functional.html#unroll\" target=\"_blank\" rel=\"noopener noreferrer\">Functional.unroll</a> performs the same loop unrolling functionality as library functions. There are a few differences between using library function of unroll and decorator <code>@unroll</code> are:</p>\n<ul>\n<li>Library function call requires the induction variable to be a parameter while the decorator uses the induction variable as a dynamic variable.</li>\n<li>Library function call unroll the loop so that the program the compiler starts to compile is with unrolled code. The can potentially increase the amount of code to compile depends on the amount to unroll.</li>\n<li>Decorator unrolling happens at later stage of compilation which prevents program explosion too early.</li>\n</ul>\n<p>-<a href=\"https://github.com/modularml/mojo/discussions/482#discussioncomment-6581104\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-28 Github Weiwei Chen</a></p>\n<h3>JSON Parser</h3>\n<p>JSON is super important, but right now we are tracking more basic things, e.g. getting core data structures in place. Higher level libraries like this should likely be part of the broader package ecosystem, and we need packages before we plan that üòÉ</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/478#issuecomment-1654623649\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-28 Github Chris Lattner</a></li>\n</ul>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-07-28T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-07-21",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-07-21.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-07-21.html",
      "summary": "Logo\nThis Week in Mojo 2023-07-21\nOfficial Content\nProposal\nJeff Niu has put forward a Mojo and Dynamism proposal for how Mojo will handle Python dynamic behaviour, with a ladde...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-07-21</h1>\n<h2>Official Content</h2>\n<h3>Proposal</h3>\n<p>Jeff Niu has put forward a <a href=\"https://github.com/modularml/mojo/discussions/466\" target=\"_blank\" rel=\"noopener noreferrer\">Mojo and Dynamism proposal</a> for how Mojo will handle Python dynamic behaviour, with a ladder type system:</p>\n<ul>\n<li><code>fn</code> for fully optimized static behavior</li>\n<li><code>def</code> will by default use vtables and have the ability to inline method calls for better performance</li>\n<li><code>def</code> opt-in <code>@dynamic</code> decorator to match Python behaviour while retaining some performance benefits such as no GIL. Python to Mojo conversion tool to automatically add this decorator.</li>\n<li>Importing a Python module will work the same as it does now will full CPython ABI interop but no performance improvement</li>\n</ul>\n<h3>Roadmap addition</h3>\n<p>New section added to the roadmap document <a href=\"https://docs.modular.com/mojo/roadmap.html#overall-priorities\" target=\"_blank\" rel=\"noopener noreferrer\">overall priorities</a>:</p>\n<p>Mojo is still in early development and many language features will arrive in the coming months. We are highly focused on building Mojo the right way (for the long-term), so we want to fully build-out the core Mojo language features before we work on other dependent features and enhancements.</p>\n<p>Currently, that means we are focused on the core system programming features that are essential to Mojo‚Äôs mission, and as outlined in the following sections of this roadmap.</p>\n<p>In the near-term, we will not prioritize ‚Äúgeneral goodness‚Äù work such as:</p>\n<ul>\n<li>Adding syntactic sugar and short-hands for Python.</li>\n<li>Adding features from other languages that are missing from Python (such as public/private declarations).</li>\n<li>Tackling broad Python ecosystem challenges like packaging.</li>\n</ul>\n<p>If you have encountered any bugs with current Mojo behavior, please submit an issue on GitHub.</p>\n<p>If you have ideas about how to improve the core Mojo features, we prefer that you first look for similar topics or start a new conversation about it in our GitHub Discussions.</p>\n<p>We also consider Mojo to be a new member of the Python family, so if you have suggestions to improve the experience with Python, we encourage you to propose these ‚Äúgeneral goodness‚Äù enhancements through the formal PEP process.</p>\n<h2>Community Content</h2>\n<ul>\n<li>New Blog post from mojodojo.dev: <a href=\"https://mojodojo.dev/blog/2023-07-17-rust-or-mojo-ai.html\" target=\"_blank\" rel=\"noopener noreferrer\">Rust or Mojo for the future of AI?</a></li>\n</ul>\n<h2>Mojo Playground Update</h2>\n<h3>‚≠êÔ∏è New</h3>\n<p>Mojo now includes a Limits module, which contains functions to get the max and min values representable by a type, as requested in <a href=\"\">Issue #51</a>. The following functions moved from <code>Math</code> to <code>Limits</code>:</p>\n<ul>\n<li><code>inf()</code></li>\n<li><code>neginf()</code></li>\n<li><code>isinf()</code></li>\n<li><code>isfinite()</code></li>\n</ul>\n<p>Mojo decorators are now distinguished between ‚Äúsignature‚Äù and ‚Äúbody‚Äù decorators and are ordered. Signature decorators, like <code>@register_passable</code> and <code>@parameter</code>, modify the type of declaration before the body is parsed. Body decorators, like <code>@value</code>, modify the body of declaration after it is fully parsed. Due to ordering, a signature decorator cannot be applied after a body decorator. That means the following is now invalid:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">register_passable</span><span style=\"color:#51597D;font-style:italic\"> # error: cannot apply signature decorator after a body one!</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">value</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">struct</span><span style=\"color:#C0CAF5\"> Foo</span><span style=\"color:#9ABDF5\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    pass</span></span></span></code></pre>\n</div><p>Global variables can now be exported in Mojo compiled archives, using the @export decorator. Exported global variables are public symbols in compiled archives and use the variable name as its linkage name, by default. A custom linkage name can be specified with @export(\"new_name\"). This does not affect variable names in Mojo code.</p>\n<p>Mojo now supports packages! A Mojo package is defined by placing an <code>__init__.mojo</code> or <code>__init__.üî•</code> within a directory. Other files in the same directory form modules within the package, this works exactly like it does in Python, for example:</p>\n<div class=\"language-text line-numbers-mode line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-text\"><code><span class=\"line\"><span class=\"line\"><span>main.üî•</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>my_package/</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>  __init__.üî•</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>  module.üî•</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>  my_other_package/</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>    __init__.üî•</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>    stuff.üî•</span></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4>main.üî•</h4>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> my_package</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">module </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> some_function</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> my_package</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">my_other_package</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">stuff </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> SomeType</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> main</span><span style=\"color:#9ABDF5\">():</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> x</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> SomeType </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> some_function</span><span style=\"color:#9ABDF5\">()</span></span></span></code></pre>\n</div><p>Mojo now supports direct module and package imports! Modules and packages can be imported and bound to names. Module and package elements, like functions, types, global variables, and other modules, can be accessed using attribute references, like my_module.foo. Note that modules lack runtime representations, meaning module references cannot be instantiated.</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">import</span><span style=\"color:#FF9E64\"> IO</span><span style=\"color:#7DCFFF\"> as</span><span style=\"color:#A9B1D6\"> io</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">import</span><span style=\"color:#FF9E64\"> SIMD</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">io</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">hello world</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">var</span><span style=\"color:#C0CAF5\"> x</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9E64\"> SIMD</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">Float32 </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 1.2</span></span></span></code></pre>\n</div><h3>ü¶ã Changed</h3>\n<p>Reverted the feature from 2023-02-13 that allowed unqualified struct members. Use the Self keyword to conveniently access struct members with bound parameters instead. This was required to fix Issue #260.</p>\n<p>Updated the RayTracing notebook: added step 5 to create specular lighting for more realistic images and step 6 to add a background image.</p>\n<h3>üõ†Ô∏è Fixed</h3>\n<p><a href=\"https://github.com/modularml/mojo/issues/260\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #260</a> - Definitions inside structs no longer shadow definitions outside of struct definitions.</p>\n<h2>Mojo Team Answers</h2>\n<h3>Top level code in REPL and Jupyter</h3>\n<p>The default right now is in a bit of a weird place, Mojo top-level code behaves differently than anything else. It is \"strict\" by default, however the problem right now is that top-level Mojo code is neither \"static\" in the <code>fn</code> sense or \"dynamic\" in the <code>def</code> sense. The goal is to make it behave like an imperative body of code.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/411#discussioncomment-6491987\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-20 Github Jeff Niu</a></li>\n</ul>\n<h3>Only allowing <code>fn</code> in <code>struct</code></h3>\n<p>I can see how this might avoid some accidental use of dynamic behavior, but I'm not sure why that is something we're worried about. Further, there are other issues - we need to support top level code and other things that aren't tied to an <code>fn</code> keyword. Furthermore, we want constrained dynamic classes as well (Jeff will share a doc hopefully ~this week about this) in Mojo that aren't as dynamic as Python's.</p>\n<p>At the end of the day, we also want <code>fn</code> and <code>def</code> to be friends and get along and allow intermixing. This is a pretty important design principle - we don't want \"fn to be mojo\" and \"def to be legacy python code\", so I see this approach working...</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/452#issuecomment-1639473356\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-18 Github Chris Lattner</a></li>\n</ul>\n<h3>Renaming Mojo to Python++</h3>\n<p>Just to set expectations here, we don't plan to rename Mojo - we quite like the name üòÄ. I agree with you that Python++ is a useful working model to think about some of Mojo's goals though!</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/389#discussioncomment-6474134\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-18 Github Chris Lattner</a></li>\n</ul>\n<h3>Vales region borrow checker</h3>\n<p>Yep, I've followed it. It is currently experimental and adds non-trivial overhead to the runtime of a program, so it will be interesting to see how it bakes out and matures in Vale. For Mojo, we're sticking with somewhat more traditional implementation approaches.</p>\n<p>This isn't to say \"no, we will never do this\": we need to get more experience with the planned lifetimes and other features, and if they don't work then we'd consider it. That said, I can say that \"it isn't on our radar and it looks like there is more research to be done before we'd seriously consider it\".</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/461#discussioncomment-6474092\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-18 Github Chris Lattner</a></li>\n</ul>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-07-21T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "Rust or Mojo for the future of AI?",
      "url": "https://www.mojodojo.dev/blog/2023-07-17-rust-or-mojo-ai.html",
      "id": "https://www.mojodojo.dev/blog/2023-07-17-rust-or-mojo-ai.html",
      "summary": "I wrote this blog before I started working at Modular, these views are not representative of Modular\nRust or Mojo for the future of AI?\nIntro\nThere has been dissatisfaction with...",
      "content_html": "<p><em>I wrote this blog before I started working at Modular, these views are not representative of Modular</em></p>\n<h1>Rust or Mojo for the future of AI?</h1>\n<h2>Intro</h2>\n<p>There has been dissatisfaction with the combination of C/C++ and Python for putting ML models into production, debugging problems when something goes wrong can be a nightmarish task. Ideally we could have one language that allows systems programmers to squeeze our hardware to the limits of physics, while also being suitable as a safe high level language to make putting code into production easy, reliable and performant. Rust fits that space well despite having a steep learning curve, and it's starting to be noticed in the industry as a potential solution.</p>\n<p>Converting production code that uses computer vision ML models from C/C++/Python to Rust is a nice experience on the surface, Rust works well as a high-level, safe and expressive language with very low performance overhead. But the ecosystem is still young, and so we still rely on huge C++ projects like opencv, which itself relies on huge C++ projects like ffmpeg for image and video encoding and decoding. The experience of linking to these libraries can be quite painful, especially statically, and squeezing performance out of SIMD registers or other specialized hardware requires even more complexity. It begins to feel redundant when you end up with hundreds of megabytes of <code>.so</code> dependencies while wrapping C/C++ in unsafe Rust.</p>\n<h2>C++ Dependencies</h2>\n<p>There is an ongoing attempt to <a href=\"https://github.com/rust-cv/cv/graphs/contributors?from=2019-05-05&amp;to=2019-05-17&amp;type=c\" target=\"_blank\" rel=\"noopener noreferrer\">rewrite opencv functionality</a> in Rust but it hasn't picked up much steam since it was introduced in 2019 with very little activity now, and it only really scratches the surface. Many are using <a href=\"https://github.com/twistedfall/opencv-rust\" target=\"_blank\" rel=\"noopener noreferrer\">opencv-rust C++ bindings</a> which are maintained by a dedicated, but mostly solo contributor. It gives you everything needed for computer vision, including the aforementioned ffmpeg to decode video and get frames into a tensor. Then, to boost performance on ML models, the fastest solution in my benchmarks was to convert TensorFlow and PyTorch models to ONNX and use libonnxruntime bindings from a crate named <a href=\"https://github.com/pykeio/ort\" target=\"_blank\" rel=\"noopener noreferrer\">ort</a>. There is a good Rust native implementation named <a href=\"https://github.com/sonos/tract\" target=\"_blank\" rel=\"noopener noreferrer\">tract-onnx</a>, but it doesn't have many contributors, so it is missing operators, is slow with some operators, and only runs on CPU. The <a href=\"https://github.com/pykeio/ort\" target=\"_blank\" rel=\"noopener noreferrer\">ort</a> fork of the original outdated libonnxruntime bindings is faster for all the models I've benchmarked, plus the <code>libonnxruntime.so</code> dependency is very small and easy to statically link, and some larger companies like Twitter have started using it.</p>\n<h2>C++ from Rust</h2>\n<p>The tensor representation in opencv is a <code>Matrix</code>, a bit of a misnomer as it can contain more than 2 dimensions. <code>ort</code> uses a Rust native crate named <code>ndarray</code> for it's tensor type, they both have the same C row-major representation in memory, so we can get performance improvements by dipping into unsafe Rust and bitcasting the Rust native <code>ndarray::Array</code> as the C++ native <code>opencv::Matrix</code> without copying any data. However writing <code>unsafe</code> Rust around C++ libraries is <a href=\"https://zackoverflow.dev/writing/unsafe-rust-vs-zig/\" target=\"_blank\" rel=\"noopener noreferrer\">not always the most pleasant experience</a>, and with the vast majority of AI researchers being Python users who aren't interested in learning Rust, it's unlikely that it will ever get significant adoption in ML. It'll never be as ergonomic for researchers as the combination of <code>opencv-python</code>, <code>numpy</code>, <code>pytorch</code> etc.</p>\n<p>What if we could keep the beauty and simplicity of Python as a high level language, and rewrite one function at a time in Mojo to get better performance, removing the complexity and indirections of all the C/C++/Fortran dependencies?</p>\n<h2>Rewriting C/C++/Python with Mojo</h2>\n<p>Instead of adding more complexity on top of C++, let's see how we can use Mojo to simplify things and get even faster performance.</p>\n<p>Currently Mojo is only available from an online Jupyter notebook (local release should be in the next few months), so to benchmark we're going to need to need to run Python from the same notebook environment.</p>\n<p>We'll be taking a png of a fire emoji, manually implementing a box blur in python, then using an optimized opencv function, and rewriting it in Mojo to remove all the underlying C/C++/OpenCL complexity.</p>\n<p>In Mojo we can use any library from the entire Python ecosystem, so we'll use opencv to get our images into a numpy array and matplotlib to render them:</p>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> cv2</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> numpy </span><span style=\"color:#7DCFFF\">as</span><span style=\"color:#A9B1D6\"> np</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> matplotlib </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> colors</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> pyplot </span><span style=\"color:#7DCFFF\">as</span><span style=\"color:#A9B1D6\"> plt</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> timeit </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> timeit</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> write_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">path</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> img</span><span style=\"color:#9ABDF5\">):</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">    cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">imwrite</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">path</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> img</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> open_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">img</span><span style=\"color:#9ABDF5\">):</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">    img </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">imread</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">img</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">astype</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">np</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">uint8</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">    img </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">cvtColor</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">img</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#FF9E64\">COLOR_RGB2RGBA</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> img</span></span></span></code></pre>\n</div><p>There is a image in the same folder as this notebook named <code>fire.png</code>:</p>\n\n<p>Using <a href=\"https://marketplace.visualstudio.com/items?itemName=jackos.md-notebook\" target=\"_blank\" rel=\"noopener noreferrer\">md-notebook</a> you can access all the previous Python cells from Mojo using the <code>py</code> module:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">img </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> py</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">open_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">fire.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># Convert from RGB to BGR to color flame blue</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">img </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> py</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">cvtColor</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">img</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> py</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#FF9E64\">COLOR_RGBA2BGRA</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">py</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">write_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">blue-fire.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> img</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">img </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> open_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">fire.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">img</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9E64\">4</span><span style=\"color:#9ABDF5\">])</span></span></span></code></pre>\n</div><div class=\"language-text\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-text\"><code><span class=\"line\"><span class=\"line\"><span>[255 255 255 255]</span></span></span></code></pre>\n</div><p>The format is: [Red, Green, Blue, Alpha] represented by 8bit unsigned integers.</p>\n<p>Or a middle pixel with some color:</p>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">img</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">120</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 120</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#FF9E64\">4</span><span style=\"color:#9ABDF5\">])</span></span></span></code></pre>\n</div><div class=\"language-text\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-text\"><code><span class=\"line\"><span class=\"line\"><span>[ 27 161 252 255]</span></span></span></code></pre>\n</div><p>Let's try applying a blur using python first:</p>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> box_blur</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">image</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> diameter</span><span style=\"color:#9ABDF5\">):</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">    blurred_image </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> np</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">copy</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">image</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">    height</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> width</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> _ </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> image</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">shape</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">    radius </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> diameter </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 2</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> x </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> height</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">        for</span><span style=\"color:#A9B1D6\"> y </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> width</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">            # Take the average of the pixels in the neighborhood</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">            blurred_image</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> y</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> np</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">mean</span><span style=\"color:#9ABDF5\">(</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#C0CAF5\">                image</span><span style=\"color:#9ABDF5\">[</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">                    max</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> x </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#C0CAF5\"> radius</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\">min</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">height</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> x </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#C0CAF5\"> radius </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">,</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">                    max</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> y </span><span style=\"color:#89DDFF\">-</span><span style=\"color:#C0CAF5\"> radius</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\">min</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">width</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> y </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#C0CAF5\"> radius </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9ABDF5\">                ]</span><span style=\"color:#89DDFF\">,</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#E0AF68\">                axis</span><span style=\"color:#89DDFF\">=(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 1</span><span style=\"color:#89DDFF\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9ABDF5\">            )</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> blurred_image</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">blurred </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> box_blur</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">img</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 8</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7AA2F7\">write_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">blurred.jpg</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> blurred</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div> \n<p>This is obviously going to be a very slow operation in Python compared to what you can do in a language like C, let's time how long it takes:</p>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">img </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> open_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">fire.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">python_secs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> timeit</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">lambda</span><span style=\"color:#9ABDF5\">:</span><span style=\"color:#7AA2F7\"> box_blur</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">img</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 8</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> number</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 5</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> /</span><span style=\"color:#FF9E64\"> 5</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">python_secs</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><div class=\"language-text\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-text\"><code><span class=\"line\"><span class=\"line\"><span>0.21889668439980597</span></span></span></code></pre>\n</div><p>The opencv version of the operation uses C++ and one of a few hardware APIs depending on how it was compiled, taking advantage of vectorization. First lets take a look at the result to make sure it's doing the same thing:</p>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">img </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> open_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">fire.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">img </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">filter2D</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">img</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> np</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">ones</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#FF9E64\">8</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 8</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">/</span><span style=\"color:#FF9E64\">64</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7AA2F7\">write_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">filter2D.jpg</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> img</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">img </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> open_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">fire.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">opencv_secs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#7AA2F7\"> timeit</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#BB9AF7\">lambda</span><span style=\"color:#9ABDF5\">:</span><span style=\"color:#C0CAF5\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">filter2D</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">img</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> np</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">ones</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">(</span><span style=\"color:#FF9E64\">8</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 8</span><span style=\"color:#89DDFF\">),</span><span style=\"color:#C0CAF5\"> np</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">uint8</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">/</span><span style=\"color:#FF9E64\">64</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> number</span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\">5</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> /</span><span style=\"color:#FF9E64\"> 5</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Seconds:</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> opencv_secs</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><div class=\"language-text\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-text\"><code><span class=\"line\"><span class=\"line\"><span>Seconds: 0.0006133885999588529</span></span></span></code></pre>\n</div><p>That's giving us a very nice speedup over the Python version using C++:</p>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">Speedup:</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> python_secs </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#C0CAF5\"> opencv_secs</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><div class=\"language-text\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-text\"><code><span class=\"line\"><span class=\"line\"><span>Speedup: 305.831956407965</span></span></span></code></pre>\n</div><p>Going to the definition of <code>filter2D</code> we find the below code. The <code>...</code> means the C++ functions have default values; these are just for type hints in Python. The overload with <code>UMat</code> is for when you're using the GPU version of opencv:</p>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># md-notebook:skip</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">typing</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">overload</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> filter2D</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">src</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">typing</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">MatLike</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> ddepth</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> int</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> kernel</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">typing</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">MatLike</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> dst</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">typing</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">MatLike </span><span style=\"color:#BB9AF7\">|</span><span style=\"color:#FF9E64\"> None</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#E0AF68\"> ...</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> anchor</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">typing</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">Point </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#E0AF68\"> ...</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> delta</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> float</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#E0AF68\"> ...</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> borderType</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> int</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#E0AF68\"> ...</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> -&gt;</span><span style=\"color:#A9B1D6\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">typing</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">MatLike</span><span style=\"color:#9ABDF5\">:</span><span style=\"color:#E0AF68\"> ...</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">typing</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">overload</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">def</span><span style=\"color:#7AA2F7\"> filter2D</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">src</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> UMat</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> ddepth</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> int</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> kernel</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> UMat</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> dst</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> UMat </span><span style=\"color:#BB9AF7\">|</span><span style=\"color:#FF9E64\"> None</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#E0AF68\"> ...</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> anchor</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> cv2</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">typing</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">Point </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#E0AF68\"> ...</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> delta</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> float</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#E0AF68\"> ...</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> borderType</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\"> int</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#E0AF68\"> ...</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> -&gt;</span><span style=\"color:#A9B1D6\"> UMat</span><span style=\"color:#9ABDF5\">:</span><span style=\"color:#E0AF68\"> ...</span></span></span></code></pre>\n</div><p>Then if you do a search for filter2D in <a href=\"https://github.com/search?q=repo%3Aopencv%2Fopencv+filter2D&amp;type=code\" target=\"_blank\" rel=\"noopener noreferrer\">the opencv C++ source code</a> you'll find 5 pages of results where <code>filter2D</code> is defined. Likely your version of opencv will be running through OpenCL to take advantage of your CPU SIMD registers, so if you want to contribute a faster version not only will you need to <a href=\"https://www.nersc.gov/assets/pubs_presos/MattsonTutorialSC14.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">figure out how OpenCL works</a>, you'll also need to learn know how to use SIMD intrinsics from C++ as a fallback.</p>\n<p>There is a lot more going on underneath the hood, for example <code>ffmpeg</code> decoding the image and putting it into a <code>numpy</code> array for us. A lot of engineering hours and complexity went into making the API's so simple and easy to use while remaining fast. It's great for the Python user with an interface that is as close to English pseudo code as possible, but what if you wanted to build your own library to operate efficiently on numpy arrays?</p>\n<p>You're going to have to know about:</p>\n<ul>\n<li>The C/C++ programming languages</li>\n<li>The Python <a href=\"https://docs.python.org/3/c-api/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">C API</a></li>\n<li>The <a href=\"https://numpy.org/doc/stable/reference/c-api/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">NumPy C API</a>,</li>\n<li>How NumPy does <a href=\"https://numpy.org/doc/stable/reference/simd/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">CPU/SIMD optimizations</a></li>\n<li>How to <a href=\"https://numpy.org/doc/stable/user/basics.interoperability.html\" target=\"_blank\" rel=\"noopener noreferrer\">Interop with NumPy</a></li>\n</ul>\n<p>And if you're doing anything with linear algebra:</p>\n<ul>\n<li>The Fortran programming language</li>\n<li><a href=\"https://www.netlib.org/blas/\" target=\"_blank\" rel=\"noopener noreferrer\">BLAS</a></li>\n<li><a href=\"https://www.netlib.org/lapack/\" target=\"_blank\" rel=\"noopener noreferrer\">LAPACK</a></li>\n</ul>\n<p>Making your way down the stack to the actual Fortran routines requires many layers of indirection and is a daunting task. With Mojo we can learn one simple programming model that applies to CPU's, GPU's and even TPU's to replace all that complexity.</p>\n<h2>Pointing to a CPython object from Mojo</h2>\n<p>The standard library is still being built up for Mojo, so sometimes we need to use foreign-looking syntax to interact with <a href=\"https://mlir.llvm.org/\" target=\"_blank\" rel=\"noopener noreferrer\">MLIR</a> for things that haven't been added yet. Everything in Mojo lowers to MLIR, which is used to generate code for hardware-specific optimizations. It was built by Chris Lattner and his team at Google as a successor to LLVM because it allows the modularity required for ML and exotic hardware types. Since then it was open sourced with wide adoption and absorbed into the LLVM project. It still uses the legacy LLVM infrastructure for CPU codegen and optimization.</p>\n<p>There is nothing in the standard library yet for converting a Python integer representing an address to a Mojo pointer with a given data type, so for now we need to write our own function:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> numpy_data_pointer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">numpy_array</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> PythonObject</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9D7CD8;font-style:italic\"> raises</span><span style=\"color:#89DDFF\"> -&gt;</span><span style=\"color:#A9B1D6\"> DTypePointer</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#9ABDF5\">]:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    return</span><span style=\"color:#A9B1D6\"> DTypePointer</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#9ABDF5\">](</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">                __mlir_op</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#9ECE6A\">`pop.index_to_pointer`</span><span style=\"color:#89DDFF\">[</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7AA2F7\">                    _type=</span><span style=\"color:#0DB9D7\">__mlir_type</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#9ECE6A\">`!kgen.pointer&lt;scalar&lt;ui32&gt;&gt;`</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">                ]</span><span style=\"color:#9ABDF5\">(</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#FF9E64\">                    SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#C0CAF5\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">index</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#C0CAF5\">numpy_array</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">__array_interface__</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#9ECE6A\">data</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">].</span><span style=\"color:#0DB9D7\">__index__</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">value</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9ABDF5\">                )</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9ABDF5\">            )</span></span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">Tips</p>\n<p>In the comments below, an AI compiler engineer working on Mojo suggests they'll add a static <code>from_address</code> method to make this a lot more simple:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># md-notebook:skip</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">let</span><span style=\"color:#C0CAF5\"> p</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> DTypePointer</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">from_address</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">arr</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">__array_interface__</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#9ECE6A\">data</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">]</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div></div>\n<p>You can see <code>pop</code> is an MLIR dialect the Modular team have developed; it's not intended for normal programmers to need to understand this syntax, and over time useful things will be wrapped in a nice API by compiler engineers for systems engineers and Python programmers to use at a higher level. But you still have the power to define your own dialects or use one of the many already defined in the MLIR ecosystem, which makes it easy for vendors to accelerate their hardware, for example you can take a look at the <a href=\"https://mlir.llvm.org/docs/Dialects/GPU/\" target=\"_blank\" rel=\"noopener noreferrer\">gpu dialect</a> here. This enables compiler engineers to write optimizations for different hardware as it becomes more exotic for AI acceleration, and Mojo developers will be able to take full advantage.</p>\n<p>Lets go line by line to explain what's happening:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># md-notebook:skip</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> numpy_array_pointer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">numpy_array</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> PythonObject</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9D7CD8;font-style:italic\"> raises</span><span style=\"color:#89DDFF\"> -&gt;</span><span style=\"color:#A9B1D6\"> DTypePointer</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#9ABDF5\">]:</span></span></span></code></pre>\n</div><p><code>PythonObject</code> has the same representation in Mojo as it does in Python, see <a href=\"/guides/intro-to-mojo/basic-types.html\" target=\"_blank\">Intro to Mojo: Basic Types</a> for more details. <code>raises</code> means that an error could occur which is always the case when interacting with Python. Here I'm returning a Pointer to a DType of <code>uint32</code> so each element represents the RGBA of a single pixel.</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># md-notebook:skip</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">__mlir_op</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#9ECE6A\">`pop.index_to_pointer`</span><span style=\"color:#89DDFF\">[</span></span></span></code></pre>\n</div><p>This is the operation to convert from an index which is an integer of size that matches your architecture, for example 64bit on an x86-64 machine, to an address that can be used as a pointer.</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># md-notebook:skip</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">_type</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#0DB9D7\">__mlir_type</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#9ECE6A\">`!pop.pointer&lt;scalar&lt;ui32&gt;&gt;&gt;`</span></span></span></code></pre>\n</div><p>This is the type as represented in MLIR, it's 32bits so each element encompasses 4*8bit color channels representing RGBA.</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># md-notebook:skip</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#FF9E64\">SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">index</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#7AA2F7\">numpy_array</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">__array_interface__</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#9ECE6A\">data</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">].</span><span style=\"color:#0DB9D7\">__index__</span><span style=\"color:#9ABDF5\">())</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">value</span></span></span></code></pre>\n</div><p>Let's split the above into three separate parts:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># md-notebook:skip</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">numpy_array</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">__array_interface__</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#9ECE6A\">data</span><span style=\"color:#89DDFF\">'</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">]</span></span></span></code></pre>\n</div><p>This is using the Python interpreter to get back the address of where the raw data of the numpy array starts in memory.</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># md-notebook:skip</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">.</span><span style=\"color:#0DB9D7\">__index__</span><span style=\"color:#9ABDF5\">()</span></span></span></code></pre>\n</div><p>This converts it from a PythonObject to a Mojo <code>Int</code></p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># md-notebook:skip</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#FF9E64\">SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">index</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#E0AF68\">...</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">value</span></span></span></code></pre>\n</div><p>This gets us back a raw MLIR <code>scalar&lt;index&gt;</code> type which can then be converted to a <code>pointer&lt;scalar&lt;ui32&gt;&gt;&gt;</code> type via the MLIR operation.</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\"># md-notebook:skip</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">return</span><span style=\"color:#A9B1D6\"> DTypePointer</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#E0AF68\">...</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><p>Finally it's returned as the desired type, which is a Mojo pointer starting at the address in memory where the raw data of the numpy array starts.</p>\n<h2>Writing the Box Blur in Mojo</h2>\n<p>Below we're taking advantage of Mojo's builtin SIMD type, we figure out how many 32bit pixels we can operate on at once in the hardwares SIMD register, then for each pixel we accumulate the RGB values in a box around it and apply the average to give the blur effect. For example if our SIMD register is 512bits we can operate on 16 32bit pixels at once:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> memory </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> memcpy</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> time </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> now</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> math </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> clamp</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> box_blur_mojo</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#E0AF68\">diameter</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#E0AF68\">image</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> PythonObject</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9D7CD8;font-style:italic\"> raises</span><span style=\"color:#9ABDF5\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    # Get number of elements that fit into your hardwares SIMD register</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    alias</span><span style=\"color:#C0CAF5\"> simd_width</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> simdwidthof</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#9ABDF5\">]()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    # The amount of pixels that will be averaged in box around the target pixel</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    alias</span><span style=\"color:#C0CAF5\"> pixels</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> diameter </span><span style=\"color:#89DDFF\">**</span><span style=\"color:#FF9E64\"> 2</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    alias</span><span style=\"color:#C0CAF5\"> radius</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> diameter </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 2</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    # Use the function we defined earlier to point to the numpy arrays raw data</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> p</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#7AA2F7\"> numpy_data_pointer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">image</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    # Get the numpy dimensions from the Python iterpreter and convert them to Mojo ints</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> height</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> image</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">shape</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#0DB9D7\">__index__</span><span style=\"color:#9ABDF5\">()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> width</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> image</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">shape</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#0DB9D7\">__index__</span><span style=\"color:#9ABDF5\">()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> el</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> width </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#A9B1D6\"> height</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    # Because we don't want blurred pixels influencing the outcome of the next pixel, we allocate a new array</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> tmp</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> DTypePointer</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">alloc</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">el</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> y </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> height</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        # Step over the amount of elements we'll operate on at the same time with SIMD</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">        for</span><span style=\"color:#A9B1D6\"> x </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> width</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> simd_width</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">            var</span><span style=\"color:#C0CAF5\"> sum_r</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> simd_width</span><span style=\"color:#9ABDF5\">]()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">            var</span><span style=\"color:#C0CAF5\"> sum_g</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> simd_width</span><span style=\"color:#9ABDF5\">]()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">            var</span><span style=\"color:#C0CAF5\"> sum_b</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> simd_width</span><span style=\"color:#9ABDF5\">]()</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">            # Loop through a box around the pixel</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">            for</span><span style=\"color:#A9B1D6\"> ky </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#C0CAF5\">radius</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> radius</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">                for</span><span style=\"color:#A9B1D6\"> kx </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#C0CAF5\">radius</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> radius</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">                    # Make sure to not go out of bounds</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">                    var</span><span style=\"color:#C0CAF5\"> iy</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#7AA2F7\"> clamp</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">Int64</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">y</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#C0CAF5\"> ky</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> height</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">                    var</span><span style=\"color:#C0CAF5\"> ix</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#7AA2F7\"> clamp</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">Int64</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">x</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#C0CAF5\"> kx</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> width</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">                    # Grab the amount of 32bit RGBA pixels that can fit into your hardwares SIMD register</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">                    var</span><span style=\"color:#C0CAF5\"> rgb</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> p</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">load</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">width=simd_width</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#7AA2F7\">iy</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">to_int</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#7AA2F7\"> width </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#7AA2F7\"> ix</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">to_int</span><span style=\"color:#9ABDF5\">())</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">                    # and seperate out the RGB components using bit shifts and masking, adding the values to the sums</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">                    sum_r </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#A9B1D6\"> rgb </span><span style=\"color:#BB9AF7\">&amp;</span><span style=\"color:#FF9E64\"> SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> simd_width</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#FF9E64\">255</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">                    sum_g </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#A9B1D6\"> rgb </span><span style=\"color:#BB9AF7\">&gt;&gt;</span><span style=\"color:#FF9E64\"> 8</span><span style=\"color:#BB9AF7\"> &amp;</span><span style=\"color:#FF9E64\"> SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> simd_width</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#FF9E64\">255</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">                    sum_b </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#A9B1D6\"> rgb </span><span style=\"color:#BB9AF7\">&gt;&gt;</span><span style=\"color:#FF9E64\"> 16</span><span style=\"color:#BB9AF7\"> &amp;</span><span style=\"color:#FF9E64\"> SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> simd_width</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#FF9E64\">255</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">            # Combine 8bit color channels back into 32bit pixel (last channel is alpha 255 for no transparency)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">            # And divide by total pixels in the box to get the average colors</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">            var</span><span style=\"color:#C0CAF5\"> combined</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">sum_r </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#A9B1D6\"> pixels</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#BB9AF7\"> |</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">sum_g </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#A9B1D6\"> pixels </span><span style=\"color:#BB9AF7\">&lt;&lt;</span><span style=\"color:#FF9E64\"> 8</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#BB9AF7\"> |</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">sum_b </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#A9B1D6\"> pixels </span><span style=\"color:#BB9AF7\">&lt;&lt;</span><span style=\"color:#FF9E64\"> 16</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#BB9AF7\"> |</span><span style=\"color:#89DDFF\">  (</span><span style=\"color:#FF9E64\">255</span><span style=\"color:#BB9AF7\"> &lt;&lt;</span><span style=\"color:#FF9E64\"> 24</span><span style=\"color:#89DDFF\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">            # Store all the pixels at once (16 on a 512bit SIMD register)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">            tmp</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">store</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">y </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#C0CAF5\"> width </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#C0CAF5\"> x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> combined</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">    # Copy the data from the temporay image to the original numpy array</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7AA2F7\">    memcpy</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">p</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> tmp</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> el</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">    tmp</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">free</span><span style=\"color:#9ABDF5\">()</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">var</span><span style=\"color:#C0CAF5\"> image</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> py</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">open_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">fire.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">box_blur_mojo</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">8</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#7AA2F7\">image</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">py</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">write_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">mojo-blur.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> image</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div> \n<h2>Vectorize</h2>\n<p>You may have noticed a bug: if the image width isn't a multiple of our SIMD register, we'll have some leftover pixels that don't get blurred. Mojo includes a vectorize function because it's such a common requirement to load chunks of data that fit into the SIMD register, and it accounts for any leftovers without us having to calculate that ourselves:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> algorithm </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> vectorize</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> box_blur_vectorize_mojo</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#E0AF68\">diameter</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#E0AF68\">image</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> PythonObject</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#9D7CD8;font-style:italic\"> raises</span><span style=\"color:#9ABDF5\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    alias</span><span style=\"color:#C0CAF5\"> simd_width</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> simdwidthof</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#9ABDF5\">]()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    alias</span><span style=\"color:#C0CAF5\"> pixels</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> diameter </span><span style=\"color:#89DDFF\">**</span><span style=\"color:#FF9E64\"> 2</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    alias</span><span style=\"color:#C0CAF5\"> radius</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> diameter </span><span style=\"color:#89DDFF\">//</span><span style=\"color:#FF9E64\"> 2</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> p</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#7AA2F7\"> numpy_data_pointer</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">image</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> height</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> image</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">shape</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#0DB9D7\">__index__</span><span style=\"color:#9ABDF5\">()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> width</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> image</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">shape</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#0DB9D7\">__index__</span><span style=\"color:#9ABDF5\">()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> el</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> width </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#A9B1D6\"> height</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> tmp</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> DTypePointer</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">alloc</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">el</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    for</span><span style=\"color:#A9B1D6\"> y </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> height</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        # This inner loop is vectorized by stepping over simd_width pixels (16 32bit pixels on a 512bit SIMD register) </span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        # on the x axis, as we're loading that amount of pixels and operating on them at the same time</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">        @</span><span style=\"color:#7AA2F7\">parameter</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">        fn</span><span style=\"color:#7AA2F7\"> inner</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#E0AF68\">simd_width</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#E0AF68\">x</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#9ABDF5\">):</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">            var</span><span style=\"color:#C0CAF5\"> sum_r</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">DType</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">uint32</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> simd_width</span><span style=\"color:#9ABDF5\">]()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">            var</span><span style=\"color:#C0CAF5\"> sum_g</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> sum_r</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">            var</span><span style=\"color:#C0CAF5\"> sum_b</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> sum_r</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">            for</span><span style=\"color:#A9B1D6\"> ky </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#C0CAF5\">radius</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> radius</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">                for</span><span style=\"color:#A9B1D6\"> kx </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#C0CAF5\">radius</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> radius</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">                    var</span><span style=\"color:#C0CAF5\"> iy</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#7AA2F7\"> clamp</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">Int64</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">y</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#C0CAF5\"> ky</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> height</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">                    var</span><span style=\"color:#C0CAF5\"> ix</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#7AA2F7\"> clamp</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#7AA2F7\">Int64</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">x</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> +</span><span style=\"color:#C0CAF5\"> kx</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 0</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> width</span><span style=\"color:#89DDFF\">-</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">                    var</span><span style=\"color:#C0CAF5\"> rgb</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#A9B1D6\"> p</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">load</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">width=simd_width</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#7AA2F7\">iy</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">to_int</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\"> *</span><span style=\"color:#7AA2F7\"> width </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#7AA2F7\"> ix</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">to_int</span><span style=\"color:#9ABDF5\">())</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">                    sum_r </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#A9B1D6\"> rgb </span><span style=\"color:#BB9AF7\">&amp;</span><span style=\"color:#FF9E64\"> 255</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">                    sum_g </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#A9B1D6\"> rgb </span><span style=\"color:#BB9AF7\">&gt;&gt;</span><span style=\"color:#FF9E64\"> 8</span><span style=\"color:#BB9AF7\"> &amp;</span><span style=\"color:#FF9E64\"> 255</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">                    sum_b </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#A9B1D6\"> rgb </span><span style=\"color:#BB9AF7\">&gt;&gt;</span><span style=\"color:#FF9E64\"> 16</span><span style=\"color:#BB9AF7\"> &amp;</span><span style=\"color:#FF9E64\"> 255</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">            var</span><span style=\"color:#C0CAF5\"> combined</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">sum_r </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#A9B1D6\"> pixels</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#BB9AF7\"> |</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">sum_g </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#A9B1D6\"> pixels </span><span style=\"color:#BB9AF7\">&lt;&lt;</span><span style=\"color:#FF9E64\"> 8</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#BB9AF7\"> |</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">sum_b </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#A9B1D6\"> pixels </span><span style=\"color:#BB9AF7\">&lt;&lt;</span><span style=\"color:#FF9E64\"> 16</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#BB9AF7\"> |</span><span style=\"color:#89DDFF\">  (</span><span style=\"color:#FF9E64\">255</span><span style=\"color:#BB9AF7\"> &lt;&lt;</span><span style=\"color:#FF9E64\"> 24</span><span style=\"color:#89DDFF\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">            tmp</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">store</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">y </span><span style=\"color:#89DDFF\">*</span><span style=\"color:#C0CAF5\"> width </span><span style=\"color:#89DDFF\">+</span><span style=\"color:#C0CAF5\"> x</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> combined</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        # Run the vectorized inner loop</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">        vectorize</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">inner</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> simd_width</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#7AA2F7\">width</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7AA2F7\">    memcpy</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">p</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> tmp</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> el</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">    tmp</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">free</span><span style=\"color:#9ABDF5\">()</span></span></span></code></pre>\n</div><p>Now we can use a similar benchmark function as Python to take the average of 5 iterations:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">image </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> py</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#7AA2F7\">open_img</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">fire.png</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">var</span><span style=\"color:#C0CAF5\"> nanos</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 0.0</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">var</span><span style=\"color:#C0CAF5\"> its</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#FF9E64\"> 5</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">for</span><span style=\"color:#A9B1D6\"> _ </span><span style=\"color:#BB9AF7\">in</span><span style=\"color:#0DB9D7\"> range</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">its</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> tick</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#7AA2F7\"> now</span><span style=\"color:#9ABDF5\">()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">    box_blur_mojo</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#FF9E64\">8</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#7AA2F7\">image</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">    nanos </span><span style=\"color:#89DDFF\">+=</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#7AA2F7\">now</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#A9B1D6\"> tick</span><span style=\"color:#89DDFF\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">mojo_secs </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> nanos </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#A9B1D6\"> its </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#FF9E64\"> 1e9</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">total time:</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> mojo_secs</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">python speedup:</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> py</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">python_secs </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#C0CAF5\"> mojo_secs</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">opencv speedup:</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#C0CAF5\"> py</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#C0CAF5\">opencv_secs </span><span style=\"color:#89DDFF\">/</span><span style=\"color:#C0CAF5\"> mojo_secs</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><div class=\"language-text\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-text\"><code><span class=\"line\"><span class=\"line\"><span>total time: 0.00032285000000000001</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>python speedup: 663.2885296575425</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>opencv speedup: 1.8979340248172347</span></span></span></code></pre>\n</div><p>We just replaced tens of thousands of lines of incredibly hard-to-understand C++ code, accounting for all the different hardware API's that opencv supports, and still managed to get a 3x performance improvement. This can be further improved by splitting rows and running on separate cores, but this didn't result in faster performance on my playground instance as the CPU is shared with other users, stay tuned for updates once the local compiler is released.</p>\n<p>This isn't the most performant way to do a box blur; I chose this method because it's the fewest lines of code and easiest to explain.</p>\n<h2>Conclusion</h2>\n<p>Overall I really enjoy working with computer vision and Rust as it's a fun language, but adding complexity is not going to help the ecosystem, it's desperately in need of simplification. As <a href=\"https://www.youtube.com/watch?v=VMj-3S1tku0\" target=\"_blank\" rel=\"noopener noreferrer\">Andrej Karpathy shows</a>, neural networks are not complicated to implement, it's making them go fast on different hardware where all the complexity comes from, and because Mojo is focused on simplifying that process while allowing AI researchers to interact with their code from Python, I'm confident that it's going to be the path forward for the industry.</p>\n<p>If you found any mistakes, incorrect information, or have faster benchmarks, please let me know in the comments below or <a href=\"https://github.com/mojodojodev/mojodojo.dev/edit/main/blog/2023-07-17-rust-or-mojo-ai.md\" target=\"_blank\" rel=\"noopener noreferrer\">Edit this page on GitHub</a> to raise a pull request!</p>\n<p><em>contributions by <a href=\"https://github.com/rgov\" target=\"_blank\" rel=\"noopener noreferrer\">Ryan Govostes</a> and <a href=\"https://github.com/abduld\" target=\"_blank\" rel=\"noopener noreferrer\">Abdul Dakkak</a></em></p>\n",
      "date_published": "2023-07-17T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-07-14",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-07-14.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-07-14.html",
      "summary": "Logo\nThis Week in Mojo 2023-07-14\nOfficial Content\n\nNew blog post titled: What's the difference between the AI Engine and Mojo?\n\nMojo Playground Update\n\nFull changelog here\n\n‚≠êÔ∏è ...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-07-14</h1>\n<h2>Official Content</h2>\n<ul>\n<li>New blog post titled: <a href=\"https://www.modular.com/blog/whats-the-difference-between-the-ai-engine-and-mojo\" target=\"_blank\" rel=\"noopener noreferrer\">What's the difference between the AI Engine and Mojo?</a></li>\n</ul>\n<h2>Mojo Playground Update</h2>\n<ul>\n<li><a href=\"https://docs.modular.com/mojo/changelog.html\" target=\"_blank\" rel=\"noopener noreferrer\">Full changelog here</a></li>\n</ul>\n<h3>‚≠êÔ∏è New</h3>\n<ul>\n<li>\n<p>Mojo now has support for global variables! This enables <code>var</code> and <code>let</code> declaration at the top-level scope in Mojo files. Global variable initializers are run when code modules are loaded by the platform according to the order of dependencies between global variables, and their destructors are called in the reverse order.</p>\n</li>\n<li>\n<p>The Mojo programming manual is now written as a Jupyter notebook, and available in its entirety in the Mojo Playground <code>programming-manual.ipynb</code>. Previously, <code>HelloMojo.ipynb</code> included most of the same material, but it was not up-to-date. We‚Äôve also re-written <code>HelloMojo.ipynb</code> to be much shorter and provide a more gentle first-user experience.</p>\n</li>\n<li>\n<p><a href=\"https://docs.modular.com/mojo/MojoStdlib/Coroutine.html\" target=\"_blank\" rel=\"noopener noreferrer\">Coroutine module documentation</a> is now available. Coroutines form the basis of Mojo‚Äôs support for asynchronous execution. Calls to <code>async fn</code> can be stored into a Coroutine, from which they can be resumed, awaited upon, and have their results retrieved upon completion.</p>\n</li>\n</ul>\n<h3>ü¶ã Changed</h3>\n<ul>\n<li><code>simd_bit_width</code> in the TargetInfo module has been renamed to <code>simdbitwidth</code> to better align with <code>simdwidthof</code>, <code>bitwidthof</code>, etc.</li>\n</ul>\n<h3>üõ†Ô∏è Fixed</h3>\n<ul>\n<li>\n<p>The walrus operator now works in if/while statements without parentheses, such as <code>x := function():</code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/modularml/mojo/issues/428\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #428</a>: The FloatLiteral and SIMD types now support conversion to Int via the <code>to_int</code> or <code>__int__</code> method calls. The behavior matches that of Python, which rounds towards zero.</p>\n</li>\n</ul>\n<h2>Mojo Team Answers</h2>\n<h3>Global Variables REPL</h3>\n<p>Global variables were added to the language but they have not been wired into the REPL environment yet. The REPL environment layers extra features on the language to provide redefinition and top-level variables, and using global variables to enable the code you wrote has not occurred yet. Sorry for the confusion!</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/448#discussioncomment-6443661\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-14 Github Mogball</a></li>\n</ul>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-07-14T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-07-07",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-07-07.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-07-07.html",
      "summary": "Logo\nThis Week in Mojo 2023-07-07\nPlayground Update\nFull Changelog Here\n‚≠êÔ∏è New\n\nTuple expressions now work without parentheses. For example a, b = b, a works as you‚Äôd expect in ...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-07-07</h1>\n<h2>Playground Update</h2>\n<p><a href=\"https://docs.modular.com/mojo/changelog.html#july-2023\" target=\"_blank\" rel=\"noopener noreferrer\">Full Changelog Here</a></p>\n<h3>‚≠êÔ∏è New</h3>\n<ul>\n<li>Tuple expressions now work without parentheses. For example <code>a, b = b, a</code> works as you‚Äôd expect in Python.</li>\n<li>Chained assigments <code>a = b = 42</code> and the walrus operator <code>some_function(b := 17)</code> are now supported.</li>\n</ul>\n<h3>ü¶ã Changed</h3>\n<ul>\n<li>\n<p>The <code>simd_width</code> and <code>dtype_simd_width</code> functions in the TargetInfo module have been renamed to <code>simdwidthof</code>.</p>\n</li>\n<li>\n<p>The <code>dtype_</code> prefix has been dropped from <code>alignof</code>, <code>sizeof</code>, and <code>bitwidthof</code>. You can now use these functions with any argument type, including <code>DType</code>.</p>\n</li>\n<li>\n<p>The <code>inf</code>, <code>neginf</code>, <code>nan</code>, <code>isinf</code>, <code>isfinite</code>, and <code>isnan</code> functions were moved from the Numerics module to the Math module, to better align with Python‚Äôs library structure.</p>\n</li>\n</ul>\n<h3>üõ†Ô∏è Fixed</h3>\n<ul>\n<li>\n<p><a href=\"https://github.com/modularml/mojo/issues/253\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #253</a> Issue when accessing a struct member alias without providing parameters.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/modularml/mojo/issues/404\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #404</a>: The docs now use snake_case for variable names, which more closely conforms to Python‚Äôs style.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/modularml/mojo/issues/379\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #379</a>: Tuple limitations have been addressed and multiple return values are now supported, even without parentheses.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/modularml/mojo/issues/347\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #347</a>: Tuples no longer require parentheses.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/modularml/mojo/issues/320\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #320</a>: Python objects are now traversable via for loops.</p>\n</li>\n</ul>\n<h2>Community Content</h2>\n<ul>\n<li><a href=\"https://mikeinnes.io\" target=\"_blank\" rel=\"noopener noreferrer\">Mike Innes</a> wrote a blog post: <a href=\"https://mikeinnes.io/2023/06/06/mojo\" target=\"_blank\" rel=\"noopener noreferrer\">Finding you Mojo</a></li>\n</ul>\n<h2>Mojo Team Answers</h2>\n<h3>Using <code>async fn</code></h3>\n<p>async fn and coroutines are a fairly powerful mechanism, and though at this time the only public way we're exposing to invoke them is directly on the same thread, the underlying mechanism is quite powerful and allows running in thread pools, etc. However, for the time being, you'll have to use our wrappers like parallelize, as the underlying functionality isn't otherwise public right now.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1126917199551012874/1126961335423483924\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-08 Discord Alex Kirchhoff</a></li>\n</ul>\n<h3>ML Compiler optimization projects</h3>\n<p>We believe that programmability and extensibility is actually the problem to be solved here, not just providing yet-another-special-case-ml-compiler</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1103420074372644916/1125842233875243008\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-09 Discord Chris Lattner</a></li>\n</ul>\n<h3>WASM Target</h3>\n<p>Our first downloadable deliverable won't support WASM.\nThis is a super interesting target for sure, but we're prioritizing getting things out with a first release, rather than blocking until we solve all the problems üôÇ</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1125837200748199988/1125837669964972125\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-05 Discord Chris Lattner</a></li>\n</ul>\n<h3>Autoderef</h3>\n<p>The weirder thing to me about the rust approach with <code>autoderef</code> is how it handles smart pointers etc. The safe default is to start without <code>autoderef</code> and we can see what that does for ergonomics of the resultant libraries. Any time there has to be a stumper \"quiz\" about a language feature, it is a sign there is something wrong üòÄ. In Rust, allowing impl traits on borrows themselves is \"interesting\". I'm not sure about why that was chosen vs just allowing nominal types to implement traits, but there is probably a good reason.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1125597373956116492/1125832654584029204\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-05 Discord Chris Lattner</a></li>\n</ul>\n<h3>Init uninitialized objects in <code>fn</code></h3>\n<p>This is effectively how the Mojo compiler works internally, and we fudge a couple of things for sake of simplicity of model. For example, the <code>self</code> member of a <code>__del__</code> destructor is a reference, but it is \"magic\" in that it is required to be live-in and uninit-out. The self for a memory-only <code>__init__</code> has the opposite polarity, being uninit on entry and init on exit.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/372#issuecomment-1619181242\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-04 Github Chris Lattner</a></li>\n</ul>\n<h3>Multiple Moves with <code>^</code></h3>\n<p>The <code>^</code> operator kills a lifetime or invokes the stealing moveinit, producing a new owned RValue, so <code>^^^</code> is just repeatedly moving üôÇ. It is probably a noop in the implementation because we do move elision, I haven't checked though.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1098713601386233997/1125596235882041464\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-04 Discord Chris Lattner</a></li>\n</ul>\n<h3>Docs Internationalization</h3>\n<p>We have no plans to translate our content at this time or in the near future. Our products and documentation are still in their infancy and there's a long way to go before curated translation becomes a priority.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/163#issuecomment-1613642961\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-30 Github Scott Main</a></li>\n</ul>\n<h3>String UInt8 implementation</h3>\n<p>It makes sense to use <code>UInt8</code> instead of <code>Int8</code>, although users should not be working directly with the bytes within a string üòÄ. Also, we try to match C semantics here which uses <code>char *</code> for strings. There is a plan to perform optimizations on strings for example small string optimizations, so you should never depend on its layout.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/420#issuecomment-1615472005\" target=\"_blank\" rel=\"noopener noreferrer\">2023-07-02 Github Abdul Dakkak</a></li>\n</ul>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-07-07T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-06-30",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-06-30.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-06-30.html",
      "summary": "Logo\nThis Week in Mojo 2023-06-30\nOfficial\n\nInterview with CPO Tim Davis: Redefining AI Infrastructure\n\nCommunity\n\nCode & Tech released a video: What is Mojoüî•?\nGautam made a bl...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-06-30</h1>\n<h2>Official</h2>\n<ul>\n<li>Interview with CPO Tim Davis: <a href=\"https://www.youtube.com/watch?v=r4Yx6AZobpU\" target=\"_blank\" rel=\"noopener noreferrer\">Redefining AI Infrastructure</a></li>\n</ul>\n<h2>Community</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/@Code-Tech\" target=\"_blank\" rel=\"noopener noreferrer\">Code &amp; Tech</a> released a video: <a href=\"https://www.youtube.com/watch?v=S1H6_GqfTdg\" target=\"_blank\" rel=\"noopener noreferrer\">What is Mojoüî•?</a></li>\n<li><a href=\"https://medium.com/@gautam.e\" target=\"_blank\" rel=\"noopener noreferrer\">Gautam</a> made a blog post on <a href=\"https://medium.com/@gautam.e/a-mojo-iterator-5ebd4ad6c02b\" target=\"_blank\" rel=\"noopener noreferrer\">Mojo Iterators</a></li>\n</ul>\n<h2>Playground Update</h2>\n<p><a href=\"https://docs.modular.com/mojo/changelog.html#june-2023\" target=\"_blank\" rel=\"noopener noreferrer\">Full changelog here</a></p>\n<h3>‚≠êÔ∏è New</h3>\n<p>You can now share <code>.ipynb</code> notebook files in Mojo Playground. Just save a file in the shared directory, and then right-click the file and select Copy Sharable link. To open a shared notebook, you must already have access to Mojo Playground. When you open a shared notebook, click Import at the top of the notebook to save your own copy. For more details about this feature, see the instructions inside the Mojo Playground file browser help directory.</p>\n<h3>ü¶ã Changed</h3>\n<p>The <code>unroll2()</code> and <code>unroll3()</code> functions in the Functional module have been renamed to overload the <code>unroll()</code> function. These functions unroll 2D and 3D loops and <code>unroll()</code> can determine the intent based on the number of input parameters.</p>\n<h3>üõ†Ô∏è Fixed</h3>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/74\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #74</a>: Struct definition with recursive reference crashes.</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/285\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #285</a>: The TargetInfo module now includes <code>is_little_endian()</code> and <code>is_big_endian()</code> to check if the target host uses either little or big endian.</li>\n</ul>\n<h2>Mojo Team Answers</h2>\n<h3>URL based imports</h3>\n<p>Traditionally, it has been a responsibility placed on the build system, but that makes reproducible scripts harder to manage. Having first-class support for URL imports seem like the right direction for Mojo. We're still focusing on nailing down having packages first, but later on thinking about distribution and sharing will be important to building an ecosystem.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/413#discussioncomment-6285136\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-27 GitHub Jeff Niu</a></li>\n</ul>\n<h3>Pointers</h3>\n<p>Pointers serve an important function even for safe code, it allows type-erasing a reference into an arbitrary container that holds a value in memory, just like a safe reference does. This is a pretty important thing, but you really want this to be safe for the common use-case. Such a thing would not support pointer arithmetic or indexing though, this is something a Slice type would support.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1124302001430339616/1124437937640194120\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-30 Discord Chris Lattner</a></li>\n</ul>\n<h3>Energy Efficiency</h3>\n<p>We have not done any analysis about energy efficiency, my guess is that Mojo would be in the top 2 or 3, since Mojo does not do anything fancy behind your back. We do need to study this however.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/302?notification_referrer_id=NT_kwDOB-auX7Q2NjI5NTQwODg4OjEzMjU1ODQzMQ\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-26 GitHub Abdul</a></li>\n</ul>\n<h3>Macros</h3>\n<p>I think it is important to have some sort of macro-like feature for syntax - one specific use-case for this is to enable things like \"parallel_for\" to be library features instead of language features. That said, we aren't looking to implement language features for their own sake, we should be motivated by specific problems we want to solve.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/410#discussioncomment-6269717\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-25 GitHub Chris Lattner</a></li>\n</ul>\n<h3>Multiple Dispatch</h3>\n<p>This is a nice feature from (eg) Julia, but it depends entirely on its compilation model which doesn't work the same way as Mojo's.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/407#issuecomment-1605594829\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-25 GitHub Chris Lattner</a></li>\n</ul>\n<h3>Python Type Hints</h3>\n<p>Mojo can tell the difference between Python \"hints\" and Mojo types. There will be no problem here, we can support the hints for compatibility (by ignoring them) just like Python does.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/410#discussioncomment-6269717\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-25 GitHub Chris Lattner</a></li>\n</ul>\n<h3>Rust</h3>\n<p>I don't think that mojo has any burden to prove novelty vs rust.  We're happy to adopt good ideas from Rust as with all other existing languages. Graydon himself was very happy for Rust to pull good ideas when he started it, and wasn't ashamed to admit it.  Mojo is similar.</p>\n<p>I also don't see Rust and Mojo in competition, while I'm hoping that Mojo can learn from and improve vs Rust in various areas, they're clearly servicing different segments of the world. Yes there is some crossover, but Rust is far more mature than Mojo and Rust is continuously improving as well. If you'd like to continue using Rust, go for it üòÄ.</p>\n<p>If you're interested in language nerdery, then yes, there are ways in which Mojo can provide better performance than Rust. There are two categories:</p>\n<ol>\n<li>\n<p>There are very low level implementation details (e.g. borrow by default instead of move, moves not implying memcpy etc) that can affect idiomatic use of the language at scale. As others say, it will be difficult to know how these work out until Mojo is more complete and there are more at-scale applications like your caching system. Mojo's trait system in particular is missing, and it's hard to write much realistic generic code without that!</p>\n</li>\n<li>\n<p>Mojo open new frontiers for GPUs and other accelerators. We can all have different opinions about what the \"end of moore's\" law means for computing, but if computers keep getting weirder, and if that matters for important workloads that you care about, then Mojo will be interesting because it can talk to them in ways that other languages weren't really built for.</p>\n</li>\n</ol>\n<p>That said if you care about Fibonacci on X86 cpus, both Rust and Mojo (and Clang and many many others) are all zero cost languages that boil down to LLVM. As such, any advantage claimed on such a workload will be more about accidental implementation details than anything else and could be easily fixed.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1122302305438539826/1122372150146383906\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-25 Discord Chris Lattner</a></li>\n</ul>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-06-30T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-06-23",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-06-23.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-06-23.html",
      "summary": "Logo\nThis Week in Mojo 2023-06-23\nOfficial Content\n\nBlog post: Modular natively supports dynamic shapes for AI workloads\nNotebook: Ray tracing in Mojo includes writing to a nump...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-06-23</h1>\n<h2>Official Content</h2>\n<ul>\n<li>Blog post: <a href=\"https://www.modular.com/blog/modular-natively-supports-dynamic-shapes-for-ai-workloads\" target=\"_blank\" rel=\"noopener noreferrer\">Modular natively supports dynamic shapes for AI workloads</a></li>\n<li>Notebook: <a href=\"https://docs.modular.com/mojo/notebooks/RayTracing.html\" target=\"_blank\" rel=\"noopener noreferrer\">Ray tracing in Mojo</a> includes writing to a numpy ndarray representing an image from Mojo</li>\n</ul>\n<h2>Community Content</h2>\n<ul>\n<li><a href=\"https://twimlai.com/\" target=\"_blank\" rel=\"noopener noreferrer\">TWIML AI</a> did a <a href=\"https://www.youtube.com/watch?v=-8TbsCUuwQQ\" target=\"_blank\" rel=\"noopener noreferrer\">podcast interview with Chris Lattner</a>, answers summarized below</li>\n<li>Added guides and new sections to <a href=\"https://mojodojo.dev/guides\" target=\"_blank\" rel=\"noopener noreferrer\">mojodojo.dev/guides</a></li>\n</ul>\n<h2>Mojo Playground Update</h2>\n<p><a href=\"https://docs.modular.com/mojo/changelog.html#june-2023\" target=\"_blank\" rel=\"noopener noreferrer\">Official patch notes here</a></p>\n<h3>‚≠êÔ∏è New</h3>\n<p>Added support for overloading on parameter signature. For example, it is now possible to write the following:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> foo</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#E0AF68\">a</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#E0AF68\">x</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#9ABDF5\">):</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    pass</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> foo</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#E0AF68\">a</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> b</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#9ABDF5\">](</span><span style=\"color:#E0AF68\">x</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#9ABDF5\">):</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    pass</span></span></span></code></pre>\n</div><p>For details on the overload resolution logic, see the <a href=\"https://docs.modular.com/mojo/programming-manual.html#overloading-on-parameters\" target=\"_blank\" rel=\"noopener noreferrer\">programming manual</a>.</p>\n<p>A new <code>cost_of()</code> function has been added to <code>Autotune</code>. This meta-function must be invoked at compile time, and it returns the number of MLIR operations in a function (at a certain stage in compilation), which can be used to build basic heuristics in higher-order generators.</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#7DCFFF\">from</span><span style=\"color:#A9B1D6\"> Autotune </span><span style=\"color:#7DCFFF\">import</span><span style=\"color:#A9B1D6\"> cost_of</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> generator</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#E0AF68\">f</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#BB9AF7\"> fn</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">Int</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#BB9AF7\">&gt;</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#9ABDF5\">]()</span><span style=\"color:#89DDFF\"> -&gt;</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#9ABDF5\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">    @</span><span style=\"color:#7AA2F7\">parameter</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    if</span><span style=\"color:#A9B1D6\"> cost_of</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">Int</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> -</span><span style=\"color:#BB9AF7\">&gt;</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> f</span><span style=\"color:#9ABDF5\">]()</span><span style=\"color:#BB9AF7\"> &lt;</span><span style=\"color:#FF9E64\"> 10</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#7AA2F7\"> f</span><span style=\"color:#9ABDF5\">()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    else</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#51597D;font-style:italic\">        # Do something else for slower functions...</span></span></span></code></pre>\n</div><p>Added a new example notebook with a basic Ray Tracing algorithm.</p>\n<h3>ü¶ã Changed</h3>\n<p>The <code>assert_param_msg()</code> in the <code>Assert</code> module has been renamed to <code>assert_param()</code></p>\n<h3>üõ†Ô∏è Fixed</h3>\n<p>Overloads marked with <code>@adaptive</code> now correctly handle signatures that differ only in declared parameter names, e.g. the following now works correctly:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">adaptive</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> foobar</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#E0AF68\">w</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> T</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> DType</span><span style=\"color:#9ABDF5\">]()</span><span style=\"color:#89DDFF\"> -&gt;</span><span style=\"color:#FF9E64\"> SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">T</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> w</span><span style=\"color:#9ABDF5\">]:</span><span style=\"color:#E0AF68\"> ...</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">@</span><span style=\"color:#7AA2F7\">adaptive</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> foobar</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#E0AF68\">w</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> S</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> DType</span><span style=\"color:#9ABDF5\">]()</span><span style=\"color:#89DDFF\"> -&gt;</span><span style=\"color:#FF9E64\"> SIMD</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">S</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> w</span><span style=\"color:#9ABDF5\">]:</span><span style=\"color:#E0AF68\"> ...</span></span></span></code></pre>\n</div><ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/219\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #219</a> - Issue when redefining a function and a struct defined in the same cell.</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/355\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #355</a> - The loop order in the Matmul notebook for Python and naive mojo have been reordered for consistency. The loop order now follows (M, K, N) ordering.</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/309\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #309</a> - Use snake case naming within the testing package and move the asserts out of the TestSuite struct.</li>\n</ul>\n<h2>Mojo Team Answer</h2>\n<h3>Logo and brand community usage</h3>\n<p>We definitely want the community to be able to use the Mojo logo and name. We should get a proper web page up that describes this, we're behind on this mostly getting the details sorted out. My current understanding: we want people to be free to use the word Mojo and Mojoüî•, and using the Mojoüî• logo is fine. The things we need to protect are:</p>\n<ol>\n<li>Don't represent that you are speaking on behalf of modular</li>\n<li>Don't use the \"Modular M\" with the notch taken out without permission.</li>\n</ol>\n<p>It is fine to use Mojo or Mojoüî• with a normal M.</p>\n<p>We've also seen a lot of the troubles of other communities, and want to ensure that the Mojoüî• community has a clear understanding of our trademark rights, and the relevant community usage from the beginning.</p>\n<p>The spirit of what we want to achieve is essentially to have a \"Community Logo\" and a \"Official Logo\" that enables a flexible use for the community, but also provides us with an ability to have \"Official Use\" when needed. There will be subtle differences (i.e. the Notch in the M, the style of the Fire icon etc) but enabling our incredible community to use the logo is definitely our goal.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/389#discussioncomment-6206675\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-18 GitHub Chris Lattner</a></li>\n<li><a href=\"https://github.com/modularml/mojo/discussions/389#discussioncomment-6264254\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-24 GitHub Tim Davis</a></li>\n</ul>\n<h3><a class=\"header-anchor\" href=\"#bnf-notation-for-mojo\"><span></span></a><a href=\"https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form\" target=\"_blank\" rel=\"noopener noreferrer\">BNF</a> notation for Mojo</h3>\n<p>We currently use a hand written parser in C++ and don't have a formal grammar unfortunately; we do have a black grammar, but it is \"quite a superset\" of the language. It would be great to build this out and document it.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/401#discussioncomment-6247900\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-22 Github Chris Lattner</a></li>\n</ul>\n<h3>Three World Problem</h3>\n<p>Python has a dependence on C/C++ for performance and hardware-focused tasks, Mojo directly addresses the <code>three world problem</code> of Python, C/C++, and accelerator languages required for CPUs, GPUs, TPUs etc.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=143\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-21 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Technology Mojo Builds on</h3>\n<p>Mojo builds on a lot of technologies where the research has been done and implemented such as MLIR, which is an evolution of LLVM that has enabled a new generation of compiler technologies. MLIR is now widely utilized across the entire industry for AI accelerators, we built it at Google and then open sourced it, and it's now part of LLVM. LLVM is an umbrella of technologies that includes MLIR, the Clang compiler for C/C++, and the fundamental building blocks like code generation for an x86 processor, so we build directly on top of that as well. This is the core of how we make the hardware go really fast.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=336\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-21 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Speeding up Python</h3>\n<p>Despite Python's popularity for research and training models, it presents challenges for deploying at scale, often leading teams to rewrite their models in C++. The Modular inference engine was constructed entirely on top of Mojo, and now is the fastest inference engine for TensorFlow and PyTorch models by maximizing the potential of hardware. In comparison to Python, Mojo is compiled, eliminates the GIL, introduces types and adds metaprogramming features which make it a substantially different thing.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=453\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Typescript Comparison</h3>\n<p>TypeScript is very popular, a lot of people use it and it fits right into the JavaScript ecosystem, Mojo has a similar relationship to Python where it's a superset. All the Python packages work in Mojo which is really important to us, we don't want to break the Python community.</p>\n<p>There's a big difference though, Python already allows you to add types like TypeScript, but they're just for tools to identify bugs and obvious mistakes in your code, those types aren't used to improve runtime performance. Mojo takes it to the next step, we often see 10x-20x performance improvements just by adding a few type annotations.</p>\n<p>In the traditional world of Python if you run into performance problems, or if you need access to low level features you have to build a hybrid package of half C/C++ and half Python. In Mojo you can continue writing dynamically typed code, and you can also use lower-level syntax and put more effort into performance, instead of having to switch to a completely different language where the debugger no longer works on both sides.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=747\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>MLIR to unlock exotic hardware</h3>\n<p>AI isn't just about a GPU, even though so much thinking around AI technology is focused on that, the Modular team spent years working Google TPUs, they're highly specialized for AI workloads and scale to exaflops of compute, they're also internally really weird.</p>\n<p>Mojo is built on top of MLIR which We built back at Google, now it's being used by basically the who's who of all the hardware industry. LLVM talks to CPUs and some GPUs, but it's never been successful at targeting AI accelerators and video optimization engines, and all the other weird hardware that exists in the world. That's the role that MLIR provides, Mojo fully exposes MLIR and all the nerdery that goes into compiler technology, and gives it to library developers.</p>\n<p>It's important that you can talk to TPUs or other exotic hardware in their native language, which in the case of a TPU is a 128x128 tile, being able to expose that out in the language is really quite important. It's more than just CPUs and GPUs, we've built it to have really long legs so it can bring us into the future.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=1231\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Inference Engine</h3>\n<p>Modular's building what we called a unified AI engine, people are familiar with PyTorch and TensorFlow and these machine learning frameworks that provide APIs, underneath the covers there's a lot of technology for getting things onto a CPU and GPU through things like CUDA. And so our engine fits at that level of the stack, the cool thing about it particularly when you're deploying, is that it talks to a lot of different hardware.</p>\n<p>It also talks to both TensorFlow and PyTorch, so when you're taking a model from research like a nice PyTorch model off Hugging Face, and you want to deploy this thing. We don't actually want all of PyTorch in a production Docker container, you want a low dependency efficient way to serve the model. The process of going from PyTorch and into deployment is what the modular technology stack can help with.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=1391\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Other cloud providers and Mojo</h3>\n<p>SambaNova's chip is, from my understanding, what's called a Coarse-grain reconfigurable architecture (CGRA), which is a super parallel and has almost nothing to do with CPUs.\nGraphcores are apparently lots of things that look like CPUs, but their memories are weird and different, and the way they communicate is very structured. What our technology stack enables companies like SambaNova is a way to implement a compiler for their chip. They're the experts on their chip, they understand how it works, Modular can provide something to plug into so that they get all the benefits of TensorFlow and PyTorch.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=1475\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Hardware Vendors</h3>\n<p>One of the challenges with hardware accelerators is that the tools provided by non-dominant players often prove difficult to use, especially with regard to compatibility. For instance, Apple's Core ML which interacts with neural accelerators, isn't compatible with all models. This often results in complications when attempting to integrate models onto Apple devices.</p>\n<p>These issues are recognized by numerous leaders at software companies integrating AI into their products, they see firsthand the long deployment times and the need for large, specialized, and expensive teams. This is largely due to the discrepancy between the tools used for hardware deployment and those used for AI model training. Companies have to build an entire technology stack from the bottom up, there's very little code reuse across hardware. And it's very difficult to track the speed of AI, PyTorch moves fast and you need a very dedicated and responsive team.</p>\n<p>The compiler and technology problems to make the hardware work are really difficult, and so there are a lot of really smart people working on this, but if you're always focused on getting the next ship out the door, you can't take a step back and look at this whole technology stack. That's the leap that modular is driving forward.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=1540\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>CUDA</h3>\n<p>The AI industry owes a huge debt of gratitude to CUDA, if you go back to the AlexNet moment it was a confluence of ImageNet, datasets and the fact that GPUs enabled an amount of compute. People forget that CUDA enabled researchers to get a machine learning model running on a GPU, which the hardware was definitely not designed for back in the day. Now AI has taken over and it's different, but the initial breakthrough was really in a large part thanks to CUDA. A lot of technology has been built on top of CUDA and it's very powerful, flexible, and hackable and that's great,\nbut it's put us into a mode where one vendor has this dominant position and it's very difficult if you're a hardware vendor to be able to play in this ecosystem.</p>\n<p>There's the XLA compiler that Modular staff worked on at Google, and there are new compilers every day being announced by different companies where they're making make ML go fast, for example on GPUs.\nThe problem with that is that they've lost one of the things that made CUDA really powerful, which is the programmability.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=1674\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Complexity</h3>\n<p>As compiler enthusiasts, we transformed AI code generation into a compiler-centric problem, which excluded non-compiler experts. AI isn't just about matrix operations but involves comprehensive parallel compute tasks including data loading and preprocessing. The battle against CUDA lock-in has resulted in a different lock-in, pushing potential contributors out. Our solution at Modular aims to accommodate all current systems such as TensorFlow or PyTorch without requiring code rewriting, we're willing to grapple with the complex task of implementing thousands of operators to benefit everyone. Instead of creating a tool for one hardware and framework, we address the broader issue of deployment across various hardwares and frameworks. Mojo's mission is to simplify the stack, encourage collaboration among various experts, and invite more participation, ultimately to reduce the overwhelming complexity in the AI field.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=1861\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Package Management</h3>\n<p>The packaging problem is often due to incompatible systems that are lashed together, for example Python packages a lot of C/C++, C's never had a package manager that's any good. So you look at these old problems that we've been struggling with, get rid of the C code and suddenly packaging is way simpler. This is one of the things that Mojo is providing with a unified language to drive complexity down.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=2196\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Debugging Complicated Problems</h3>\n<p>What happens when you need to deploy a model through Core ML or one of the many other hardware interfaces, and the results don't work. Well now you need to know not just PyTorch, not just your model, not just Core ML, but also the translator, compiler and all these other things. You keep digging and you find out it's handling the edge padding on a convolution slightly differently. All of these tools were supposed to be making it easy aren't reliable, it's a leaky abstraction where if something goes wrong you have to understand all of this complexity.</p>\n<p>And so this is what causes it to take three months to deploy a model, leaders ask why it's taking so long but they don't realize that the tool set, this fundamental technology that all this stuff is built on top of, it's not up to high standards. No C programmer would tolerate AI tools of this quality, it's just crazy.</p>\n<p>But again, this is just the maturity of the AI technology space, and by solving that problem we should see way more inclusion and the kinds of companies that are able to work with AI, and that'll have a big impact on the world.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=2340\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Modular monetization</h3>\n<p>The engine itself can stand alone and you can use the engine as a drop-in replacement for running TensorFlow and PyTorch models in production. And so TensorFlow is quite good at production, but we're showing 3-5x better performance on, for example Intel CPUs, AMD CPUs or an ARM-based Graviton server in AWS. That's a massive cost savings and it's also a massive latency improvement, so many of our customers love that because then they can turn around and make their models bigger, which is a huge deal for them.</p>\n<p>One of the things also that our customers love is that Google and Meta don't actually support TensorFlow or PyTorch, people forget that these are not products, these are open source projects and more like hobbies for the megacorps. So what we're essentially offering is a supported and performance optimized version of TensorFlow and PyTorch, the enterprises we talked to that care about their costs often they want somebody that they can call. It's analogous to running your own mail server, very few companies do that, so why do we do it with AI infrastructure.</p>\n<p>Currently it's because there's no choice, there's nobody to reach out to who can actually can do this. The technology platform at Meta and Google has diverged a lot from what the rest of the industry uses, they both have their own chips and specific use cases, so they're not focused on the traditional CPU, GPU and public cloud use case. Because it's a product for us we can actually support it, invest a huge amount of energy into it, and it's why we have such phenomenal results as well.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=2498\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n<h3>Rewriting Libraries</h3>\n<p>In the case of modular and why we built Mojo, our business objective is go make ML really awesome, we care about the matrix multiplications and the convolutions and the core operations that people spend all their time on in AI. And so we rewrote all of that stuff in Mojo, this isn't like rewriting Matplotlib, this is like rewriting Intel MKL, or the CUDA implementation of these CUDA kernels equivalent. That's where we've put our energy into\nbecause that's what enables unlocking of the hardware, performance, and usability.</p>\n<ul>\n<li><a href=\"https://youtu.be/-8TbsCUuwQQ?t=3061\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-20 YouTube Chris Lattner</a></li>\n</ul>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-06-23T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-06-16",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-06-16.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-06-16.html",
      "summary": "Logo\nThis Week in Mojo 2023-06-16\nMojo Playground Update\nRelease Notes here\n‚≠êÔ∏è New\nTuple type syntax is now supported, for example the following works:\n\nü¶ã Changed\nThe TupleLite...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-06-16</h1>\n<h2>Mojo Playground Update</h2>\n<p><a href=\"https://docs.modular.com/mojo/changelog.html#june-2023\" target=\"_blank\" rel=\"noopener noreferrer\">Release Notes here</a></p>\n<h3>‚≠êÔ∏è New</h3>\n<p>Tuple type syntax is now supported, for example the following works:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">fn</span><span style=\"color:#7AA2F7\"> return_tuple</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\"> -&gt;</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#A9B1D6\">Int</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#A9B1D6\"> Int</span><span style=\"color:#89DDFF\">)</span><span style=\"color:#9ABDF5\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">   return</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#FF9E64\">1</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#FF9E64\"> 2</span><span style=\"color:#89DDFF\">)</span></span></span></code></pre>\n</div><h3>ü¶ã Changed</h3>\n<p>The <code>TupleLiteral</code> type was renamed to just Tuple, e.g. <code>Tuple[Int, Float]</code></p>\n<h3>üõ†Ô∏è Fixed</h3>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/354\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #354</a> - Returning a tuple doesn‚Äôt work even with parens.</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/365\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #365</a> - Copy-paste error in FloatLiteral docs.</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/357\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #357</a> - Crash when missing input parameter to variadic parameter struct member function.</li>\n</ul>\n<h2>Community Content</h2>\n<ul>\n<li>The team at <a href=\"https://kapa.ai\" target=\"_blank\" rel=\"noopener noreferrer\">kapa.ai</a> created a <a href=\"https://demo.kapa.ai/widget/modular\" target=\"_blank\" rel=\"noopener noreferrer\">GPT-4 powered chatbot for Mojo docs</a> which you can now prompt from the <a href=\"https://discord.com/channels/1087530497313357884/1119100298456215572\" target=\"_blank\" rel=\"noopener noreferrer\">#mojo-bot-help</a> channel</li>\n<li>Put up a initial draft for the first chapter of a tutorial series <a href=\"https://mojodojo.dev/guides/intro_to_mojo/2-basic-types.html\" target=\"_blank\" rel=\"noopener noreferrer\">Intro to Mojo: Basic Types</a>. Feedback very welcome on <a href=\"https://github.com/mojodojodev/mojodojo.dev/issues\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub issues</a>.</li>\n<li><a href=\"https://github.com/crisadamo\" target=\"_blank\" rel=\"noopener noreferrer\">Cristian Adamo</a> is working on a <a href=\"https://github.com/crisadamo/mojo-libc/blob/main/Libc.mojo\" target=\"_blank\" rel=\"noopener noreferrer\">libc implementation</a> in Mojo!</li>\n<li><a href=\"https://github.com/yakupc55\" target=\"_blank\" rel=\"noopener noreferrer\">yakupc55</a> has been <a href=\"https://github.com/yakupc55/mojo-example/blob/main/harezmi/harezmi_nn_01.md\" target=\"_blank\" rel=\"noopener noreferrer\">experimenting with neural networks</a></li>\n<li><a href=\"https://alexforgerr.medium.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Alex1957</a> did a blog post on <a href=\"https://alexforgerr.medium.com/exploring-vectors-in-mojo-71451165bb84\" target=\"_blank\" rel=\"noopener noreferrer\">exploring vectors in Mojo</a></li>\n</ul>\n<h2>Mojo Team Answers</h2>\n<h3>Custom Allocators</h3>\n<p>We don't have an established policy here and this is a really complicated topic, I'm not keen on making everyone <em>always</em> think about allocators like Zig does, I don't think that is practical in a language that cares about usability and ergonomics, but it is clearly good to <em>allow</em> folks to care.</p>\n<p>In my personal opinion, there is a big difference practically between <code>node</code> allocation and <code>array</code> allocation. Error handling for small objects will kill us, and we don't want to make allocation of any class instance be failable. That said, allocating an array that could be 16GB definitely can fail. On the third hand, core data structures like Array probably don't want to expose memory allocation failability to the client by default for usability reasons.</p>\n<p>It would be interesting to explore making these different APIs, possibly overloaded with a keyword argument or something. As one idea, we could make <code>UnsafePointer[T].allocate()</code> non-failable, but make <code>UnsafePointer[T].allocate(Int)</code> failable. We'd still have to decide what to do with that at the Array api level, but it too could have overloads for <code>arr.resize(n)</code> vs <code>arr.resize(checked = n)</code> or something like that.</p>\n<p><a href=\"https://github.com/modularml/mojo/discussions/377#discussioncomment-6188353\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-16 Github Chris Lattner</a></p>\n<h3>First Class Lifetimes</h3>\n<p>I'm optimistic the Mojo lifetime solution will be a nice step forward in both usability and expressivity vs rust, and first class lifetimes are very nice for inner pointers etc.</p>\n<p>Mojo references are currently second class exactly as <a href=\"https://graydon2.dreamwidth.org/307291.html\" target=\"_blank\" rel=\"noopener noreferrer\">Graydon advocates</a>.  We're experimenting with lifetimes, but if they spiral in complexity we can always eliminate them as a concept and stay with the current design.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1098713601386233997/1118249300405780541\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-14 Discord Chris Lattner</a></li>\n</ul>\n<h3>Untyped Mojo Improvements over Python</h3>\n<p>The easy answers are that the compiler eliminates a ton of overhead compared to the interpreter even if the individual operations are the same, and our dynamic object representation is a variant on the stack for simple things like numbers instead of a heap box, which is a huge win. We aren't doing any interesting static or dynamic analysis like V8 or PyPy etc yet, but we can obviously layer those things into the system as it matures.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1098713601386233997/1118249387915751538\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-14 Discord Chris Lattner</a></li>\n</ul>\n<h3>Self Hosting</h3>\n<p>It will take us quite some time to get there, but yes I would like the Mojo parser to some day be written in Mojo. I would also like to see the CPython interpreter rewritten in Mojo, but have no plans to do so. One can dream üòâ</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1103006101261267004/1118233873738903704\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-14 Discord Chris Lattner</a></li>\n</ul>\n<h3>Receiver / Free Floating Functions</h3>\n<p>There are alternative ways to address the same thing, e.g. check out how extensions work in Swift. We'll need to look at this whole area as traits come in. We don't have a goal of providing the Julia multimethod dispatch thing. There isn't an efficient way to implement that other than full monomorphization, it is better to express the same thing with generics, which we haven't designed yet. Let's build out the traits system and see what the limitations are.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/366#discussioncomment-6155792\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-13 Github Chris Lattner</a></li>\n</ul>\n<h3>Side Effect Propagation</h3>\n<p>Unfortunately, it is pretty impractical to define what <code>side effect free</code> means in a general purpose language; particularly one that wants you to be able to call existing python code.</p>\n<p>In practice side effects would be so common that the model would have to be \"add a keyword to opt-in/indicate/require that a function is side effect free\", not \"add a keyword saying it has side effects\".</p>\n<p>Given that, very few people would use it, and it would interfere with printf debugging and a lot of other things.</p>\n<p>It's possible that there is a model here that will work and would be usable, but I'm not sure how much value it would provide.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1117003204400513054/1117495786507354233\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-12 Discord Chris Lattner</a></li>\n</ul>\n<h3>Sorting Algorithm discovered by AlphaDev</h3>\n<p>Sure, that algorithm could definitely be used inside the Mojo sort algorithm.  What they found is something you'd put into a standard library, e.g. they put it into the libc++ c++ standard library, eventually it could go into the Mojo stdlib.</p>\n<ul>\n<li><a href=\"https://discord.com/channels/1087530497313357884/1103420074372644916/1117497920678285332\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-12 Discord Chris Lattner</a></li>\n</ul>\n<h3>StringRef from LLVM</h3>\n<p>Yep that's where it came from. It is directly related to string_view in C++, the LLVM data structures predate the C++ STL growing all these things. The idea of a <code>pointer + extend without ownership</code> is more general than a <code>reference to a specific owning data structure</code> because it type erases the concrete storage type. For example, an LLVM StringRef can point into C array, an std::vector, or one of the zoo of other specialized storage types llvm has - it can even point to a scalar on the stack.</p>\n<p>Per the comments above, I think actually calling this sort of type <code>ArrayRef</code> and <code>StringRef</code> in mojo would be super confusing if we have <code>ref</code> as a different concept. Python generally uses the word \"Slice\" for these things, and I think that would be great to use for these.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/338#discussioncomment-6145782\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-12 GitHub Chris Lattner</a></li>\n</ul>\n<h3><code>borrowed</code> keyword</h3>\n<p>I don't have strong opinions, but I have some concern about general programmers (i.e., those without Rust experience) and the word \"borrow\". It is a word that can be explained and has good meaning in the rust lexicon, but doesn't connote referencing something, and doesn't even appear in the rust language (they use the &amp; sigil instead). This isn't to say that \"borrow\" or \"borrowed\" is bad, but it does have some challenges.</p>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/discussions/338#discussioncomment-6145791\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-12 GitHub Chris Lattner</a></li>\n</ul>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-06-16T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-06-09",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-06-09.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-06-09.html",
      "summary": "Logo\nThis Week in Mojo 2023-06-09\nMojo Playground Update\nChangelog Here\n‚≠êÔ∏è New\nTuple syntax now works on the left-hand side of assignments (in ‚Äúlvalue‚Äù positions), enabling thin...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-06-09</h1>\n<h2>Mojo Playground Update</h2>\n<p><a href=\"https://docs.modular.com/mojo/changelog.html\" target=\"_blank\" rel=\"noopener noreferrer\">Changelog Here</a></p>\n<h3>‚≠êÔ∏è New</h3>\n<p>Tuple syntax now works on the left-hand side of assignments (in ‚Äúlvalue‚Äù positions), enabling things like (a, b) = (b, a).</p>\n<p>There are several caveats: the element types must exactly match (no implicit conversions), this only work with values of TupleLiteral type (notably, it will not work with PythonObject yet) and parentheses are required for tuple syntax.</p>\n<h3>‚ùå Removed</h3>\n<p>Mojo Playground no longer includes the following Python packages (due to size, compute costs, and environment complications): torch, tensorflow, keras, transformers.</p>\n<h3>ü¶ã Changed</h3>\n<p>The data types and scalar names now conform to the naming convention used by numpy. So we use Int32 instead of SI32, similarly using Float32 instead of F32. Closes Issue <a href=\"https://github.com/modularml/mojo/issues/152\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #152</a>.</p>\n<h3>üõ†Ô∏è Fixed</h3>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/287\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #287</a> - computed lvalues don‚Äôt handle raising functions correctly</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/318\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #318</a>- Large integers are not being printed correctly</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/326\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #326</a> - Float modulo operator is not working as expected</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/282\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #282</a>- Default arguments are not working as expected</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/271\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #271</a>- Confusing error message when converting between function types with different result semantics</li>\n</ul>\n<h2>Official Content</h2>\n<ul>\n<li>New Proposal: <a href=\"https://github.com/modularml/mojo/blob/main/proposals/lifetimes-and-provenance.md\" target=\"_blank\" rel=\"noopener noreferrer\">Provenance Tracking and Lifetimes in Mojo</a></li>\n<li>New Proposal: <a href=\"https://github.com/modularml/mojo/blob/main/proposals/lifetimes-keyword-renaming.md\" target=\"_blank\" rel=\"noopener noreferrer\">Keyword Naming</a></li>\n<li>Blog Post: <a href=\"https://www.modular.com/blog/if-ai-serving-tech-cant-solve-todays-problems-how-do-we-scale-into-the-future\" target=\"_blank\" rel=\"noopener noreferrer\">If AI serving tech can‚Äôt solve today‚Äôs problems, how do we scale into the future?</a></li>\n<li>Blog Post: <a href=\"https://www.modular.com/blog/do-llms-eliminate-the-need-for-programming-languages\" target=\"_blank\" rel=\"noopener noreferrer\">Do LLMs eliminate the need for programming languages?</a></li>\n</ul>\n<h2>Community Content</h2>\n<ul>\n<li><a href=\"https://www.thapaliya.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Suvash</a> did a blog post on implementing <a href=\"https://www.thapaliya.com/en/writings/hello-with-a-glider-gun-mojo/\" target=\"_blank\" rel=\"noopener noreferrer\">Game of Life in Mojo</a> and video <a href=\"https://youtu.be/pduYnTpRBLo\" target=\"_blank\" rel=\"noopener noreferrer\">introduction to Mojo</a></li>\n</ul>\n<h2>Mojo Team Answers</h2>\n<h3>Pure Functions</h3>\n<p>Pureness is what is known as an \"effect\" in PL terminology. You can see this in the handling of async and raises in the current mojo implementation: a non-raising function is not allowed to call a raising function directly - it must wrap it in a try block.</p>\n<p>I don't see a way to provide this sort of mapping from one world to the other for purity, I think we cannot practically implement this, and while pure computation is important, it is actually quite complicated: is reading from memory pure? If no, \"purity\" is pretty useless. If so, you cannot use purity information for much optimization, because you need to know which memory sets may be read and written by functions anyway.</p>\n<p>Also, in other pure-functional languages like Haskell, you need escape hatches (perform unsafe io) because you want to add printf debugging etc to \"pure\" functions and compiler enforcement makes that whole thing incredibly difficult.</p>\n<p>Overall I can understand wanting to have this conceptually, but I can't see how it could work out well in practice. We can come back to this later as the language evolves.</p>\n<p><a href=\"https://github.com/modularml/mojo/discussions/345#discussioncomment-6136537\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-09 Pure Functions</a></p>\n<h3>Becoming a <code>Mojo Champion</code> mod on Discord</h3>\n<p>We reached out to individuals we identified ourselves this time. In the future as the server scales, if we look to add more, we will probably send out an application form that folks can fill out and we'll review on a rolling basis.</p>\n<p><a href=\"https://discord.com/channels/1087530497313357884/1116515673611448352/1116528356603736084\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-09 Discord Andrew</a></p>\n<h3>String to PythonObject</h3>\n<p>Right now you can turn a <code>StringRef</code> or a <code>StringLiteral</code> into a <code>PythonObject</code>. To get a <code>PythonObject</code> from a <code>String</code>, you'd need to turn the <code>String</code> into a <code>StringRef</code>. This is available through some underscored methods, but it's currently unsafe due to some lifetime issues. Let me see if I can add a direct conversion path, though it will take a week to make its way to the playground.</p>\n<p>A direct conversion should be included in the next Playground release.</p>\n<p><a href=\"https://discord.com/channels/1087530497313357884/1116063443200520334/1116066258664828949\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-08 Discord Alex Kirchhoff</a></p>\n<h3>Compiler Guidance</h3>\n<p>Mojo already gives a couple warnings that suggest better things to do, such as using <code>let</code> instead of <code>var</code> where possible. That said, the compiler isn't good at pointing out larger design pattern changes, for this I think we'll have LLM based tools outside the compiler itself. The UI is much better for explaining things in that context.</p>\n<p><a href=\"https://github.com/modularml/mojo/discussions/323#discussioncomment-6084627\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-05 GitHub Chris Lattner</a></p>\n<h3>Compile time metaprogramming relationship to MLIR</h3>\n<p>Mojo has great support for evaluating fairly arbitrary expressions at compile time with an interpreter that (under the covers) ends up calling an MLIR dialect's fold operations.</p>\n<p>These then get wrapped up in structs to give a new programmable veneer etc. Check out the Bool workbook example in the documentation for a simple example of doing this with the index dialect.</p>\n<p>Mojo is designed \"for\" MLIR in this way - MLIR can talk to roughly anything that computes, and it is very important (over time) for Mojo to scale into new forms of computation, whether it be low level things like low-level tensorcore operators, mid-level things like a shape dialect, or high level things like an ML operator graph.</p>\n<p>Right now many folks on the channel are excited about a Python++, but Mojo was designed to work backwards from the \"speed of light\" of hardware and accelerators. The syntax and applicability to Python is important for community reasons, but not particularly relevant to the accelerator side of Mojo.</p>\n<p><a href=\"https://discord.com/channels/1087530497313357884/1114406301808726138/1116540613618323517\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-12 Discord Chris Lattner</a></p>\n<h3>Loose Typing</h3>\n<p>This is an evolving part of the language and likely another difference we pull into the <code>fn</code> vs <code>def</code> world, in a <code>def</code> we could default to getting objects for literals, but within a <code>fn</code> you get typed literals. Another potential solution is to have aggressive decay rules in <code>def</code> e.g. <code>True</code> starts out being typed to <code>Bool</code> but we allow decaying to object when an expression doesn't type check otherwise. We'll need to experiment with that when we make progress on other more basic things. The major reason to have both <code>def</code> and <code>fn</code> is to have a Python compatible world and a stricter systems programmer world, and have them coexist seamlessly.</p>\n<p><a href=\"https://discord.com/channels/1087530497313357884/1114818534946648165/1114971056671838350\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-05 Discord Chris Lattner</a></p>\n<h3>Struct Memory Layout C Compatibility</h3>\n<p>I agree that an opt-in decorator that specifies layout is the right way to go. By default the compiler should be able to reorder fields to eliminate internal padding so programmers don't have to worry about this, but people putting bits on a wire or dealing with c compatibility should be able to get that. We will need to properly design this out.</p>\n<p><a href=\"https://github.com/modularml/mojo/discussions/289#discussioncomment-6080125\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-04 Github Chris Lattner</a></p>\n<h3>Int Provenance</h3>\n<p>Ints and pointers are different things, so no ints don't carry provenance. This is one of the major things that C/C++ got wrong that has haunted LLVM IR and many other things for a long time. Taking a hard line on this makes everything simpler, but that is only possible when you have a fresh slate like Mojo provides us.</p>\n<p><a href=\"https://discord.com/channels/1087530497313357884/1098713601386233997/1115452333074153653\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-06 Discord Chris Lattner</a></p>\n<h3>Float8</h3>\n<p>There are so many variants of Float8 representation. We need to think about which ones does Mojo represents and how to expose the variety. For now, we are removing Float8 from the DType list to avoid folks from falling into this trap.</p>\n<p><a href=\"https://github.com/modularml/mojo/discussions/289#discussioncomment-6080125\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-04 Github Abdul Dakkak</a></p>\n<h3>Integer Overflow on <code>object</code></h3>\n<p>It needs to eventually provide full Python semantics, so we'll need <code>object</code> to contain a <code>PythonObject</code> in its variant. We could overflow from inline <code>int</code> to Python object on demand.</p>\n<p><a href=\"https://github.com/modularml/mojo/issues/328#issuecomment-1579468329\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-04 Github Chris Lattner</a></p>\n<h3>Boolean on SIMD types</h3>\n<p>The way to do this is by explicitly calling the bool method later:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">struct</span><span style=\"color:#C0CAF5\"> MyPair</span><span style=\"color:#9ABDF5\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> first</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Float32</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> second</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> Float32</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    fn</span><span style=\"color:#0DB9D7\"> __lt__</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#E0AF68\">self</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> rhs</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> MyPair</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\"> -&gt;</span><span style=\"color:#A9B1D6\"> Bool</span><span style=\"color:#9ABDF5\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">        return</span><span style=\"color:#89DDFF\"> (</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#F7768E\">            self</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">first </span><span style=\"color:#BB9AF7\">&lt;</span><span style=\"color:#A9B1D6\"> rhs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">first</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">            or</span><span style=\"color:#89DDFF\"> (</span><span style=\"color:#F7768E\">self</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">first </span><span style=\"color:#BB9AF7\">==</span><span style=\"color:#A9B1D6\"> rhs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">first </span><span style=\"color:#BB9AF7\">and</span><span style=\"color:#F7768E\"> self</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">second </span><span style=\"color:#BB9AF7\">&lt;</span><span style=\"color:#A9B1D6\"> rhs</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">second</span><span style=\"color:#89DDFF\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#89DDFF\">        ).</span><span style=\"color:#0DB9D7\">__bool__</span><span style=\"color:#9ABDF5\">()</span></span></span></code></pre>\n</div><p>We could add <code>SIMD[DType.bool, 1]</code> as an initializer to the <code>Bool</code> type, but cannot do that currently because <code>Bool</code> is a builtin type while <code>SIMD</code> is not. We need to think about this and have a library-based solution.</p>\n<p><a href=\"https://github.com/modularml/mojo/issues/335\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-07 Github Abdul Dakkak</a></p>\n<h3><code>String</code> supporting UTF-8</h3>\n<p>We want to enhance the <code>String</code> type to support UTF-8 encoding before starting work on file system.</p>\n<p><a href=\"https://github.com/modularml/mojo/issues/306#issuecomment-1579268808\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-07 Github Abdul Dakkak</a></p>\n<h3>Mutable and explicit types when iterating over collections</h3>\n<p>This was noted as a known <code>sharp edge</code> in the <a href=\"https://docs.modular.com/mojo/roadmap.html\" target=\"_blank\" rel=\"noopener noreferrer\">roadmap &amp; sharp edges</a> document. The behaviour here is definitely subject to change, maybe syntax like <code>for var i in range(3)</code> but I don't have a strong opinion.</p>\n<p><a href=\"https://github.com/modularml/mojo/issues/331#issuecomment-1579122472\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-07 Github Jeff Niu</a></p>\n<h3>Local Toolchain Release</h3>\n<p>We are working on this, and expect to ship it in <code>O(few months)</code>! Please <a href=\"https://www.modular.com/newsletter\" target=\"_blank\" rel=\"noopener noreferrer\">sign up for our newsletter</a> to track progress, thanks!</p>\n<p><a href=\"https://github.com/modularml/mojo/discussions/327#discussioncomment-6095594\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-06 Github Chris Lattner</a></p>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-06-09T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-06-02",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-06-02.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-06-02.html",
      "summary": "Logo\nThis Week in Mojo 2023-06-02\nMojo Playground Release\nFull Changelog\n‚≠êÔ∏è New\nThese Python packages are now available on Mojo Playground:\n\ntorch\ntensorflow\npolars\nopencv-pytho...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-06-02</h1>\n<h2>Mojo Playground Release</h2>\n<p><a href=\"https://docs.modular.com/mojo/changelog.html#section\" target=\"_blank\" rel=\"noopener noreferrer\">Full Changelog</a></p>\n<h3>‚≠êÔ∏è New</h3>\n<p>These Python packages are now available on Mojo Playground:</p>\n<ul>\n<li>torch</li>\n<li>tensorflow</li>\n<li>polars</li>\n<li>opencv-python</li>\n<li>keras</li>\n<li>Pillow</li>\n<li>plotly</li>\n<li>seaborn</li>\n<li>sympy</li>\n<li>transformers</li>\n</ul>\n<p>An optimization has been implemented to move an object instead of copying, if it's not used again.</p>\n<h3>üõ†Ô∏è Fixed</h3>\n<ul>\n<li><a href=\"https://github.com/modularml/mojo/issues/231\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #231</a>: Unexpected error when a Python expression raises an exception</li>\n<li><a href=\"https://github.com/modularml/mojo/issues/119\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #199</a>: The REPL fails when a python variable is redefined</li>\n</ul>\n<h2>Official Content</h2>\n<ul>\n<li>Blog post titled <a href=\"https://www.modular.com/blog/accelerating-ai-model-serving-with-the-modular-ai-engine\" target=\"_blank\" rel=\"noopener noreferrer\">Accelerating AI model serving with the Modular AI Engine</a> detailing the integration with NVIDIA Triton and performance improvements compared to the Tensorflow and Pytorch backends.</li>\n</ul>\n<h2>Community Content</h2>\n<ul>\n<li><a href=\"https://mzaks.medium.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Maxim</a> made a post about <a href=\"https://mzaks.medium.com/simple-csv-parser-in-mojo-3555c13fb5c8\" target=\"_blank\" rel=\"noopener noreferrer\">Parsing CSV in Mojo</a> and used SIMD to get speedups</li>\n<li><a href=\"https://www.youtube.com/watch?v=21WFgScvrdg\" target=\"_blank\" rel=\"noopener noreferrer\">Tech With Tim</a> did a high level introduction to the language</li>\n<li><a href=\"https://medium.com/@elemento\" target=\"_blank\" rel=\"noopener noreferrer\">Elemento</a> wrote an article on <a href=\"https://medium.com/mlearning-ai/the-story-of-modular-1e3ef08fdc7\" target=\"_blank\" rel=\"noopener noreferrer\">The Story of Modular</a></li>\n<li><a href=\"https://medium.com/@gautam.e/hello-mojo-83f5a8b04074\" target=\"_blank\" rel=\"noopener noreferrer\">Gautam Ethiraj</a> expressed his <a href=\"https://medium.com/@gautam.e/hello-mojo-83f5a8b04074\" target=\"_blank\" rel=\"noopener noreferrer\">Mojo FOMO</a> (Fear Of Missing Out)</li>\n</ul>\n<h2>General</h2>\n<p>Guido van Rossum, Python creator and CPython core developer said this about Mojoüî• on <a href=\"https://discuss.python.org/t/mojo-python-with-c-gpu-performance/26993/6\" target=\"_blank\" rel=\"noopener noreferrer\">python.org</a>:</p>\n<p>It‚Äôs definitely early days for Mojo. I plan to talk to Chris about how he plans it to become a true Python superset that will run existing Python code out of the box.</p>\n<p>So far, Mojo is a separate language (they have struct but not class, Int but not int, etc.), and their ‚ÄúCPython compatibility‚Äù strategy involves calling a helper function that you pass the name of a module, and it will import that module and execute it in CPython, returning a Mojo proxy object. It then treats CPython as a separate language runtime and when values are passed between Mojo and CPython they are ‚Äúmarshalled‚Äù (boxing/unboxing Int/int, etc.). This is syntactically very smooth, because Mojo and Python have compatible syntax (so you can write e.g. x+y where x is a Mojo value and y a CPython object), but doesn‚Äôt speed up running CPython at all.</p>\n<p>I presume that the reported speedups on PyTorch etc. are obtained by rewriting key parts of the PyTorch kernel in Mojo, applying the optimizations shown in the notebooks on the Mojo site.</p>\n<h2>Lex Fridman Interview</h2>\n<p><a href=\"https://www.youtube.com/@lexfridman\" target=\"_blank\" rel=\"noopener noreferrer\">Lex Fridman</a> did a 3.5 hour <a href=\"https://www.youtube.com/watch?v=pdJQ8iVTwj8\" target=\"_blank\" rel=\"noopener noreferrer\">interview with Chris Lattner</a>, these are answers directly related to Mojo that give new information or more context for <a href=\"/mojo-team-answers.html\" target=\"_blank\">Mojo Team Answers</a>, but the whole interview is worth watching for more general philosophy and Modular specific information.</p>\n<h3>Curly Braces</h3>\n<p>Curly brace languages are typically run through formatting tools now which automatically indents them, so you end up with indentation and curly braces, why not get rid of the clutter and have a more beautiful thing? Some languages allow you to use braces or indentation which adds a complicated design space, that you don't need if you just use Python style indentation.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=803\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 13:23</a></p>\n<h3>Compile Time Metaprogramming</h3>\n<p>One of the things that makes Python very beautiful is it's very dynamic and expressive through the powerful dynamic metaprogramming features. But you can't use those features on things like a GPU due to performance costs, so we take the interpreter and allow it to run at compile time. This gives us Python style expressive API's that enable libraries like PyTorch, with no performance penalty.</p>\n<p>This is similar to newer languages like Zig, which allow you use the core language during compile time the same way you would during runtime. As opposed to C++ templating where it's a completely different language and universe, one of the goals of Mojo is to make things really easy to use and learn so there's a natural stepping stone.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=983\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 16:23</a></p>\n<h3>Autotune and adaptive compilation</h3>\n<p>Libraries like PyTorch have pushed ML towards an abstract specification of a compute problem, which then gets mapped in a whole bunch of different ways, this is why it has become a metaprogramming problem.</p>\n<p>Hardware systems and algorithms are really complicated, most programmers don't want to know the intricate details of how the hardware actually works, so how do we allow people to build more abstracted and portable code, a lot of the algorithms are the same but parameters like cache size, vector length or tail size might need to change to optimize for different hardware.</p>\n<p>Instead of having humans go and test all these things with different parameters which can grow to complex multidimensional spaces, why don't we have computers do that for us. So you can specify different options and have the compiler empirically test what the fastest implementation is for the target you're compiling to.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=1262\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 21:02</a></p>\n<h3>Speedup moving from CPython to Mojo</h3>\n<p>Interpreters have an extra layer of bytecode that they have to go and read and interpret, and it makes them slow from this perspective. The first thing that converting your code to Mojo does is get a 2x to 10x speedup without changing the code.</p>\n<p>In Python everything's an object, the memory layout of all objects is the same, so you're always passing around a pointer to the data which has overhead from allocation and reference counting, so you can move that out of the heap and into registers and that's another 10x speedup.</p>\n<p>Modern CPU's allow you to do Single Instruction Multiple Data (SIMD) to run the same operation on a vector of data which Python doesn't expose, Mojo builds it into the language and this can lead to more huge speedups.</p>\n<p>Python also has the Global Interpret Lock (GIL) due to reference counting and other implementation details, in Mojo you can take direct advantage of threads.</p>\n<p>There's even more performance improvements via things like memory hierarchy etc. Mojo allows you to take advantage of all these powerful things that have been built into hardware over time.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=1521\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 22:21</a></p>\n<h3>Mojo Types</h3>\n<p>Python has types like strings, integers, dictionaries etc. but they all live at runtime, in Mojo you specify what the actual types are which allows the compiler to do way better optimizations, gets rid of the expensive indirections, and gives you code completion. You can progressively adopt types where you want them, but you don't have to use them if you don't want to. Our opinion is not that types are the wrong or right thing, but they're a useful thing.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=1869\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 31:09</a></p>\n<h3>Migration</h3>\n<p>Mojo is aiming to be a full superset of Python, the world went through a very long painful migration from Python 2 to Python 3, I don't want people to have to go through that if they want to move to Mojo, they shouldn't have to rewrite all their code.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=2125\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 35:25</a></p>\n<h3>Built in types like C++ <code>int</code></h3>\n<p>I want to get magic out of the compilers and put it into the libraries, we can build an <code>Int</code> that's beautiful and has an amazing API and does all the things you expect an integer to do, but maybe you don't like it and want to build a <code>BigInt</code>, you can do that and it's not a second class citizen. This is opposed to a language like C++ where the builtins have special promotion rules and other things that are hacked into the compiler.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=2408\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 40:08</a></p>\n<h3>Standard Library Completeness</h3>\n<p>We provide integers, floats, buffers, tensors and other things you'd expect in an ML context, honestly we need to keep designing, redesigning, and working with the community to build that out and make it better, it's not our strength right now. But the power of putting it in the library means we can have teams of experts that aren't compiler engineers that can help us design, refine, and drive this forward.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=2522\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 42:02</a></p>\n<h3>Current State</h3>\n<p>Mojo is very useful but only if you're a super low level programmer right now, and we're working our way up the stack. Mojo is currently like a <code>0.1</code>, and in a year from now it will be way more useful to a wider variety of people, but we decided to launch it early so we can build it with the community. We have a <a href=\"https://docs.modular.com/mojo/roadmap.html\" target=\"_blank\" rel=\"noopener noreferrer\">roadmap that's transparent about the current state</a> we're optimizing for building the right thing the right way. There is a dynamic where everyone wants it yesterday, but I still think it's the right thing.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=2562\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 42:42</a></p>\n<h3>Community Stress</h3>\n<p>We're tapping into some deep long held pressures in the Python, AI and hardware worlds, so people want us to move faster! We decided to release early because in my experience you get something way better when you build in the open and work with the community.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=2637\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 43:57</a></p>\n<h3>Value semantics</h3>\n<p>Mojo doesn't force, but enables the use of value semantics. This allows you to pass objects like collections and strings into a function, and it doesn't copy any data unless you mutate it. This is the best of both worlds, where the original object won't be modified if you mutate it inside a function, but it also won't copy the data leading to a performance hit if it doesn't need to. The language allows the type author to express this behaviour without forcing it into all cases.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=2908\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 48:28</a></p>\n<h3>Ownership</h3>\n<p>It's related to work done in the Rust, Swift, C++ and many other communities, it's a body of work that's been developing over many years. Mojo takes the best ideas and remixes them so you get the power of the Rust ownership model, but you don't have to deal with it when you don't want to, which is a major help in usability and teaching.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=3213\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 53:33</a></p>\n<h3>Solving Complexity</h3>\n<p>A tensor is like an abstraction around a gigantic parralelizable data set, using frameworks like PyTorch and Tensorflow you can also represent the operations over those data sets, which you can then map onto parralelizable cores or machines. This has an enabled an explosion in AI and accelerators, but also an explosion in complexity.</p>\n<p>Researchers are smart in various domains like calculus but they don't want to know anything about the hardware or C++, so they train the model and then you have teams who are specialized in deploying the model which might have to split out onto various machines so the complexity explodes, making changes takes weeks or months because all these teams with different expertise need to coordinate which is always a huge problem.</p>\n<p>Why is it so difficult that it takes a team of 45 people to deploy a model when it's so easy to train? If you dig into this, every layer is problematic. PyTorch and Tensorflow weren't really designed for this complicated world we have today, they were designed for when models could be trained and fit onto a single GPU. Tensorflow can scale to many machines, but most researchers are using PyTorch which doesn't have those capabilities.</p>\n<p>The main thing that Modular is fighting against is all this complexity:</p>\n<ul>\n<li>Hardware accelerators and software stacks to interact with the hardware</li>\n<li>Modeling constantly changing with new research and huge amounts of diversity</li>\n<li>Serving technology like zero copy networking, asyncio etc. that hasn't made it into machine learning</li>\n</ul>\n<p>These things have been built up over many years in their own silos and there hasn't been a first principles rethink, Modular has an amazing team to create a unified platform that solves this issue because we've worked on a lot of these silos including Tensorflow, TPUs, PyTorch Core, ONNXRuntime, Apple accelerators etc.</p>\n<p>Our joking mission statement is to \"Save the world from terrible AI software\", so we need a syntax, and we wouldn't have to build the programming language if it already existed, if Python was already good enough we would have just used it, we're not doing very large scale expensive engineering projects for the sake of it, it's to solve a problem.</p>\n<p>In the early days of PyTorch and Tensorflow things were basically CPU and CUDA, so for a dense layer with matrix multiplication you could kick off a CUDA kernel on GPU, or use something like Intel MKL for CPU. Now you have an explosion of hardware on one end with thousands of different types of hardware, and explosion of development in AI models on the other end with thousands of different operators. From giant TPU stacks to CPU's on mobile devices, whenever someone releases new hardware they need teams of people rewriting the compiler and kernel technology, which keeps out the little competitors. There is only a handful of people compiler experts out there which excludes a tonne of people. Mojo and the Modular stack brings programmability back into this world, allowing more general programmers to extend the stack without having to go hack the compiler itself. This opens it up to researchers and hardware innovators and people who know things that compiler people don't know.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=3484\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 58:04</a></p>\n<h3>First Principles</h3>\n<p>There have been a number of languages that have attempted to speed up Python, with Mojo we're trying to understand what the limit of the hardware and physics is, and how to express that in software. Typically that ends up being a memory problem, you can do a lot of math inside these accelerators, but you get bottlenecked sending data back and forth to memory as the training size gets large. Typically engineers that are really familiar with the hardware and specific models would optimize for a single use case, but these models are getting so large that details can't fit in one humans head, so we need to generalize. What the Modular stack allows is someone to use it for a new problem and it'll generally work quite well.</p>\n<p>We're not working forwards from making Python a little bit better, we're working backwards from the limits of physics.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=5210\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 1:26:50</a></p>\n<h3>CPython Interop</h3>\n<p>We use the CPython existing interpreter which runs Python bytecode, Mojo uses the CPython objects to make it fully compatible, as well as the ability to use all the C packages, so Mojo keeps the objects in that representation when they're coming from CPython.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=5874\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 1:37:56</a></p>\n<h3>Static Metaprogramming Features</h3>\n<p>Python has amazing dynamic metaprogramming features, and they translate to beautiful static metaprogramming features which has profound implications. People use Python for things it wasn't meant to do, because it was designed very thoughtfully in this space.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=6321\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 1:45:20</a></p>\n<h3><a class=\"header-anchor\" href=\"#python-creator-guido-van-rossums-s-thoughts\"><span>Python creator </span></a><a href=\"https://en.wikipedia.org/wiki/Guido_van_Rossum\" target=\"_blank\" rel=\"noopener noreferrer\">Guido van Rossums's</a> Thoughts</h3>\n<p>We talked before Mojo launched, he found it very interesting. I have a tonne of respect for Guido in how he steered such a gigantic community towards what it is today. It was really important to get his eyes and feedback on Mojo, what he's most concerned about is how to avoid fragmenting the community. It's really important we're a good member of the community, we think Guido is interested in the path out of the reasons why Python is slow. Python can suddenly go all the places it's never been able to go before, so it can have even more impact on the world.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=6611\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 1:50:11</a></p>\n<h3>Python using Mojo code</h3>\n<p>We learnt a bunch of tricks along the way converting an entire community of programmers from Objective-C to Swift, we built a lot of machinery to deeply integrate with the Objective-C runtime, we're doing the same thing with Python. When a new library gets built in Mojo people should be able to use it in Python. We need to vend Python interfaces to the Mojo types, that's what we did in Swift and it worked great, it's a huge challenge to implement for the compiler people, but it benefits millions of users and really helps adoption.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=6809\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 1:53:29</a></p>\n<h3>Unifying Theory</h3>\n<p>If you look at companies like OpenAI building huge ML models, they're innovating in the data collection and model architecture side, but they're spending a lot of time writing CUDA kernels. How much faster could all that progress go if they weren't hand writing all those CUDA kernels. There are projects trying to solve subsets of this problem but it's fragmenting the space, Mojo provides a <code>Unifying Theory</code> to stop this problem slowing people down.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=7171\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 1:59:31</a></p>\n<h3>Julia</h3>\n<p>I think Julia is a great language with a lovely community, but it's a different angle to Mojo, our goal is to take something great in Python and make it even better, so programmers don't have to learn an entirely new language.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=7583\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 2:06:25</a></p>\n<h3>Adoption</h3>\n<p>The thing that will most help adoption is you don't have to rewrite all your Python code, you can learn a new trick, and grow your knowledge that way. You can start with the world you know, and progressively learn and adopt new things where it makes sense.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=8096\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 2:14:58</a></p>\n<h3>Hardware Complexity</h3>\n<p>Hardware is getting very complicated, part of my thesis is that it's going to get a lot more complicated, part of what's exciting about what we're building is the universal platform to support the world as we get more exotic hardware, and they don't have to rewrite their code every time a new device comes out.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=8217\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 2:16:57</a></p>\n<h3>Running Locally</h3>\n<p>A lot of the feedback we've received is that people want to run it locally, so we're working on that right now, we just want to make sure we do it right.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=8516\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 2:21:56</a></p>\n<h3>Releasing Source Code</h3>\n<p>When we launched Swift, we had worked on it for four years in secrecy, we launched at a big event saying developers would be able to deploy code using Swift to the app store in 3 months. We had way more bugs than we expected, it wasn't actually production quality, and it was extremely stressful and embarrassing. Pushing major versions became super painful and stressful for the engineering team, and the community was very grumpy about it, there was a lot of technical debt in the compiler. I don't want to do that again, we're setting expectations saying don't use this for production yet, we'll get there but lets do it in the right way. We want to build the worlds best thing, if we do it right and it lifts the industry it doesn't matter if it takes an extra two months. Doing it right and not being overwhelmed with technical debt is absolutely the right thing to do.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=8524\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 2:22:04</a></p>\n<h3>Package Manager</h3>\n<p>A lot of people have very big pain points with Python packages, it becomes a huge disaster when code is split between Python and building C code, Mojo solves that part of the problem directly. One of the things we can do with the community, is we'll have an opportunity to reevaluate packaging, we have an entirely new compiler stack so maybe we can innovate in this area.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=9107\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 2:31:47</a></p>\n<h3>Error Handling</h3>\n<p>It uses variants to avoid performance cost and allows it to run on various hardware, e.g. a function can return a variant of None/Error, but it maps to Python try / except syntax.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=9881\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 2:44:41</a></p>\n<h3>Syntactic Sugar</h3>\n<p>We want to avoid this after learning the hard way from Swift that it distracts from building the core abstractions for the language, and we want to be a good member of the Python community. We want to be able to evolve Mojo with Python.</p>\n<p><a href=\"https://youtu.be/pdJQ8iVTwj8?t=11068\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Lex Fridman Interview 3:04:28</a></p>\n<h2>Mojo Team Answers</h2>\n<h3>OS Kernel development</h3>\n<p>Yeah just to clarify, when modular-ites use the word <code>kernel</code> they typically mean high performance numeric kernel which may be targeted at an accelerator or GPU or CPU etc. Secondary meanings are <code>OS kernel</code> or <code>Jupyter kernel</code>, because the word is overloaded.</p>\n<p>Mojo is a general purpose language and can be used to replace C use cases like Rust does etc, but that isn't where we're focusing initial development. That doesn't mean we're excluding it, just that the libraries etc aren't the focus for us to build. We hope the community will be interested in filling that in and building out the use cases in time though.</p>\n<p><a href=\"https://github.com/modularml/mojo/discussions/302#discussioncomment-6065569\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Github Issue</a></p>\n<h3>Paid Licenses like MATLAB</h3>\n<p><a href=\"https://docs.modular.com/mojo/faq.html#distribution\" target=\"_blank\" rel=\"noopener noreferrer\">Plz see the faq</a></p>\n<p>Broadly speaking, we see Mojo as a technology, not a product. We have AI based products, and mojo is something that is very important to those products, but it also stands alone for other uses. Mojo is still young and building the right thing for the long term is the priority for us right now.</p>\n<p><a href=\"https://discord.com/channels/1087530497313357884/1103420074372644916/1113937251576057948\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Discord Reply</a></p>\n<h3><a class=\"header-anchor\" href=\"#static-single-assignment\"><span></span></a><a href=\"https://en.wikipedia.org/wiki/Static_single-assignment_form\" target=\"_blank\" rel=\"noopener noreferrer\">Static Single Assignment</a></h3>\n<p>Mojo generators happen in SSA form, we haven't enabled full imperative reflection over the MLIR representation, but would like to build towards that. This is the \"ultimate python decorator at compile time\" after all</p>\n<p><a href=\"https://discord.com/channels/1087530497313357884/1113898580885917786/1113914827988013147\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Discord Reply</a></p>\n<h3>MLIR Dialect for Unique Requirements</h3>\n<p>I worked on Google TPUs (which have several public architecture papers), I'm familiar with difficult to program accelerators w funky requirements üôÇ.</p>\n<p>One of the major ideas in Mojo wrt MLIR and hardware is to expose \"compiler engineering\" to library developers instead of having to hack the compiler. That said, we have great ambitions and plans, and I don't want to get us over our skiis. We need to get lifetimes and traits (and numerous other smaller features) <a href=\"https://docs.modular.com/mojo/roadmap.html\" target=\"_blank\" rel=\"noopener noreferrer\">explained in the roadmap</a> done before we can go out and play. The architecture is in place though.</p>\n<p><a href=\"https://discord.com/channels/1087530497313357884/1113898580885917786/1113915440587079680\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Discord Reply</a></p>\n<h3>Triton Compiler Tech</h3>\n<p>GPUs are very important to our work obviously, and we'll have something more to share about that later this year.\nZooming out though, your point about \"Triton had to build a compiler in order to express a new programming model\" is really a key observation. One of our goals is to enable building programming models like this <code>as a library</code> using the metaprogramming features in the language.</p>\n<p>Folks shouldn't have to design an entirely new compiler/EDSL to achieve such a thing</p>\n<p><a href=\"https://discord.com/channels/1087530497313357884/1098713601386233997/threads/1113898580885917786\" target=\"_blank\" rel=\"noopener noreferrer\">2023-06-02 Discord Reply</a></p>\n<h3>Implicit Type Declaration</h3>\n<p>Within a function, implicitly declared variables get the type of their first value assigned into them. This is probably not the right thing - within a def, we will need to maintain dynamic typing (including type transformations like python has) for compatibility. Our base object isn't super built out and set up for this yet, which is why we have a \"default to the first type\" approach.</p>\n<p><a href=\"https://github.com/modularml/mojo/issues/290\" target=\"_blank\" rel=\"noopener noreferrer\">2023-05-31 Github Issue</a></p>\n<h3>Generic <code>AnyType</code></h3>\n<p>This is mostly just a placeholder for now.  This has known problems and will need to be reworked when we get traits/typeclasses/protocols filled in.  Do you have a specific interest/concern in mind?\nOne problem with AnyType is that we will need to decide if it is implicitly copyable/movable, if that is trivial, etc.  There are lots of properties we'll want to be able to express elegantly; none of this has been designed, but there is a lot of prior art in rust/swift/haskell/etc.</p>\n<p><a href=\"https://discord.com/channels/1087530497313357884/1113029339500511233/1113149935773298698\" target=\"_blank\" rel=\"noopener noreferrer\">2023-05-30 discord reply</a></p>\n<h3><code>let</code> inside <code>fn</code> definitions</h3>\n<p>Thank you for filing this. This is known (to me) to not be supported. We have the infrastructure to do this now, but we need to decide whether we want it. There are various folks (incl on this forum) that are proposing that we eliminate 'let' declarations to simplify things, and I'd rather resolve that direction before investing more time into let declarations.</p>\n<p>Incidentally, this discussion will come up \"real soon now\" as it is all tangled into the lifetime proposal. This should be coming to the community for discussion in the next two weeks.</p>\n<p><a href=\"https://github.com/modularml/mojo/issues/280#issuecomment-1566300145\" target=\"_blank\" rel=\"noopener noreferrer\">2023-05-29 Github Issue</a></p>\n<h3>What do we call Mojo users?</h3>\n<p>I'm fond of mojician ü™Ñ</p>\n<p><a href=\"https://github.com/modularml/mojo/discussions/276#discussioncomment-6023971\" target=\"_blank\" rel=\"noopener noreferrer\">2023-05-29 Github Issue</a></p>\n<h3>Generics for non trivial types</h3>\n<p>This is going to be tricky to address in the immediate term. In the absence of traits/protocols (which is scheduled to start soon) we can't reason about what members a generic AnyType has, nor can we constrain that type. This is actually a pretty big deal, because we don't have the infra to map back to what a substituted type's destructors are. As a consequence of this, it is only possible to use trivial types like Int/FP with generic algorithms. This is incredibly constraining right now üôÅ</p>\n<p>There is a separate issue where register_passable and memory-only types have different concrete ABIs / conventions. This is solvable in a simple way (just treat register passable types as memory abi when generic) or a fancier way (delay binding of ABI until type substitution)... but until we solve the trait issue, we'll still only be able to express generic algorithms over trivial types, even if they are memory only. So solving this in the immediate term isn't much of a relief.</p>\n<p>The best workarounds right now are pretty ugly:</p>\n<ul>\n<li>Limit your generic code to trivial register passable types; e.g. add an explicit delete() method that you manually manage instead of a <strong>del</strong> method that is automatically invoked.</li>\n<li>Copy and paste things to make them non-generic.</li>\n</ul>\n<p>sorry, this is pretty annoying to me too. I really want to get on top of this of course.</p>\n<p><a href=\"https://github.com/modularml/mojo/issues/271#issuecomment-1565709849\" target=\"_blank\" rel=\"noopener noreferrer\">2023-05-28 Github Issue</a></p>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-06-02T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-05-26",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-05-26.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-05-26.html",
      "summary": "Logo\nThis Week in Mojo 2023-05-26\nMojo Playground Release\nSee all the bug fixes here\n‚≠êÔ∏è New\nfinally clauses are now supported on try statements. In addition, try statements no l...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-05-26</h1>\n<h2>Mojo Playground Release</h2>\n<p><a href=\"https://docs.modular.com/mojo/changelog.html#fixed\" target=\"_blank\" rel=\"noopener noreferrer\">See all the bug fixes here</a></p>\n<h3>‚≠êÔ∏è New</h3>\n<p><code>finally</code> clauses are now supported on <code>try</code> statements. In addition, <code>try</code> statements no longer require <code>except</code> clauses, allowing <code>try-finally</code> blocks. <code>finally</code> clauses contain code that is always executed from control-flow leaves any of the other clauses of a <code>try</code> statement by any means.</p>\n<h3>ü¶ã Changed</h3>\n<p><code>with</code> statement emission changed to use the new <code>finally</code> logic so that</p>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">with</span><span style=\"color:#7AA2F7\"> ContextMgr</span><span style=\"color:#9ABDF5\">()</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    return</span></span></span></code></pre>\n</div><p>Will correctly execute <code>ContextMgr.__exit__</code> before returning.</p>\n<h2>Community Content</h2>\n<ul>\n<li>\n<p><a href=\"https://gursimarsm.medium.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Gursimar Singh</a> did a <a href=\"https://medium.com/coinmonks/introduction-to-mojo-the-programming-language-for-ai-which-35000x-faster-than-python-4fcd3a9cecab\" target=\"_blank\" rel=\"noopener noreferrer\">blog post</a> exploring the features of Mojo.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/Nicholaswogan\" target=\"_blank\" rel=\"noopener noreferrer\">Nicholaswogan</a> has created a gist benchmarking <a href=\"https://gist.github.com/Nicholaswogan/ca156adb065cb598bd3903b3eaab2381\" target=\"_blank\" rel=\"noopener noreferrer\">Radiative transfer with Mojo</a> against Numba</p>\n</li>\n<li>\n<p>Vlad a.k.a. <a href=\"https://github.com/ego\" target=\"_blank\" rel=\"noopener noreferrer\">ego</a> has created a repo named <a href=\"https://github.com/ego/awesome-mojo\" target=\"_blank\" rel=\"noopener noreferrer\">awesome-mojo</a> collecting and curating various information about Mojo</p>\n</li>\n<li>\n<p>New Mojo Dojo post: <a href=\"https://mojodojo.dev/blog.html#mojo-first-impressions-2023-05-22\" target=\"_blank\" rel=\"noopener noreferrer\">Mojo first impressions</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/sa-\" target=\"_blank\" rel=\"noopener noreferrer\">sa-</a> who is active on the Discord as <code>sa-code</code> made their own <a href=\"https://github.com/modularml/mojo/discussions/251#discussioncomment-5998651\" target=\"_blank\" rel=\"noopener noreferrer\">tensor struct</a> for tensors with up to 2 dimensions as well as a linear regression struct, as they experiment with creating a nice API for a full library.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/DayDun\" target=\"_blank\" rel=\"noopener noreferrer\">DayDun</a> who has been actively raising bugs and answering questions on GitHub has been experimenting with ray tracing and attempting to improve performance via SIMD, here was the latest image and speed:</p>\n</li>\n</ul>\n<p><img src=\"/raytrace-2.png\" alt=\"Ray Tracing via SIMD\"></p>\n<ul>\n<li><a href=\"https://gist.github.com/yt7589\" target=\"_blank\" rel=\"noopener noreferrer\">yt7589</a> has been enthusiastically experimenting with their own <a href=\"https://gist.github.com/yt7589/e6f28328a0ce56f21db3861113ea5c94\" target=\"_blank\" rel=\"noopener noreferrer\">matmul implementation</a> of up to 4 dimensions similiar to <code>numpy.matmul</code> a.k.a the <code>@</code> operator for an <code>ndarray</code></li>\n</ul>\n<h3>Python and Mojo creator exchange</h3>\n<p>Python creator and <code>Benevolent Dictator For most-of-Life</code> Guido van Rossum had a small tongue-in-cheek exchange with Mojo creator and Modular CEO Chris Lattner:</p>\n<p>Guido:</p>\n<p>How do you pronounce the flame emoji that‚Äôs part of the language name?</p>\n<p>Chris:</p>\n<p>Good question, everyone I've heard say it out loud pronounced it as üî•</p>\n<p>Guido:</p>\n<p>Snark üòÄ BTW we should talk some more about the evolution of Mojo's design in the context of Python.</p>\n<p>Chris:</p>\n<p>It is super important to me that Mojo is a good member of the wider Python community. I'd love to reconnect of course!</p>\n<h2>Mojo Team Answers</h2>\n<h3><code>lambda</code> syntax</h3>\n<p>Loosely held opinion, Mojo clearly needs to support:</p>\n<p>Nested functions (currently wired up, but have a few issues given lifetimes are not here yet). I'd like @parameter to go away on the nested functions eventually too.\nExisting Python lambda syntax, which is sugar, we need to support type annotations here.</p>\n<p>Lower priority, but I think we're likely to explore:</p>\n<p>Possibly implement more flexible/general/ergonomic light-weight closures like Scala3 =&gt; syntax</p>\n<p>User defined statement blocks, e.g.:</p>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#7AA2F7\">parallel_loop</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">42</span><span style=\"color:#9ABDF5\">)</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#7AA2F7\">    stuff</span><span style=\"color:#9ABDF5\">()</span></span></span></code></pre>\n</div><p>User defined statements are a nice way to shift more language syntax into the library, but are just syntactic sugar and will require a little more infra to get wired up. For example, I would like \"return\" in that context to return from the enclosing function (not from the lambda), and things like break to work for loop-like constructs. This is quite possible to wire up, but will require a bit of design work.</p>\n<p>It still bugs me how \"return\" works the wrong way and break doesn't work in a \"closure taking control flow\" function in Swift. We can do better.</p>\n<h3>Error Handling</h3>\n<blockquote>\n<p>On question about Result type like Rust</p>\n</blockquote>\n<p>It will be one of the things added when Abstract Data Types (ADT) and traits are in place</p>\n<h3>Curly Brackets</h3>\n<p>There are practical reasons why brackets will not work and why significant whitespace is crucial to the parser: lazy body parsing. Mojo's parser can trivially skip over the body of structs, functions, etc. because it can use the expected indentation to find the end of the indentation block.</p>\n<blockquote>\n<p>Answer from Chris after more discussion</p>\n</blockquote>\n<p>This suggestion cuts directly against or goals for Mojo, which is to be a member of the Python family. Thank you for your suggestions, but our goal isn't to design a new language from first principles (been there done that üòÑ), it is to lift an existing ecosystem. We are also not adding general syntactic sugar, we are focused on core systems programming features that Python lacks.</p>\n<h3><code>type</code> builtin</h3>\n<p>The issue with adding the type bultin to Mojo is that we don't have a runtime type representation yet. I.e. in Python, type returns a type instance that can be used like a class.</p>\n<h3>Infinite Recursion Error</h3>\n<p>We want the compiler to generate diagnostics on obvious bugs to help the programmer. If someone accidentally typos something or (like your initial example) does something that is obviously recursive, we should help the programmer out.</p>\n<p>I don't think there is a good reason for people to want to exhaust the stack; generating an error seems fine, and if there is some important use case we can figure out if there are different ways to address the need.</p>\n<p>I agree we should generate a good error rather than just crashing when an undetected-infinite recursion (or just DEEP recursion) happens, this isn't going to get fixed in the immediate future due to prioritization, but I agree we should do it at some point.</p>\n<p>Watch out for LLVM which has tail call and other optimizations, which can turn things into closed form loops in some cases üòÄ</p>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-05-26T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "Mojo First Impressions",
      "url": "https://www.mojodojo.dev/blog/2023-05-22-mojo-first-impressions.html",
      "id": "https://www.mojodojo.dev/blog/2023-05-22-mojo-first-impressions.html",
      "summary": "I wrote this blog before I started working at Modular, these views are not representative of Modular\nMy Journey\nI'm an engineer that has fallen into optimizing Machine Learning ...",
      "content_html": "<p><em>I wrote this blog before I started working at Modular, these views are not representative of Modular</em></p>\n<h2>My Journey</h2>\n<p>I'm an engineer that has fallen into optimizing Machine Learning (ML) performance by converting Python to Rust, I really enjoy the work because it's so much more challenging than any other programming I've done, but the ML engineers struggle using Rust and so can no longer contribute to the code I was tasked with converting. In my spare time I've been working on a high level Rust ML inference library to try and ease this problem, but the unsafe code, type system complexity, and compiling the dependent C++ libraries for different hardware is a huge pain.</p>\n<p>I first saw the Mojo launch announcement on hackernews which stated that <code>Chris Lattner</code> was involved, and so I started reading <a href=\"https://docs.modular.com/mojo/why-mojo.html\" target=\"_blank\" rel=\"noopener noreferrer\">Why Mojo</a> where they explicitly called out my exact problems, once I got to the end of the <a href=\"https://docs.modular.com/mojo/programming-manual.html\" target=\"_blank\" rel=\"noopener noreferrer\">programming manual</a> and watched <a href=\"https://www.youtube.com/watch?v=6GvB5lZJqcE\" target=\"_blank\" rel=\"noopener noreferrer\">Jeremy Howard's launch demo</a> I was completely sold and so bought the <a href=\"https://mojodojo.dev\" target=\"_blank\" rel=\"noopener noreferrer\">mojodojo.dev</a> domain.</p>\n<h2>Launch</h2>\n<p>I managed to get into the Mojo playground on launch day which was the 3rd of May, it was quickly apparent that this was a very young language with missing features, but there was an overwhelming surge of interest from people in the same position as me. The decision to launch early with missing features may seem counter-intuitive, but understanding what your users actually want can only be achieved through the tangible feedback that a product launch provides.</p>\n<p>The team behind Mojo is a collection of highly skilled developers with extensive experience in language design, compilers and ML. They're responsible for much of the technology that is currently running our models in production today, and they're building a product that answers their own intricate needs. But Mojo extends its appeal to a wider audience including system programmers who aren't <code>compiler nerds</code> (a term of endearment üòÄ), and Python developers interested in learning how to optimize at a lower level.</p>\n<h2>The first couple weeks</h2>\n<p>The speed at which the Mojo team is able to rectify the most common grievances is impressive. In Mojo there is a <code>PythonObject</code> that represents a pointer to a value from <code>CPython</code> interpreted code, the most common complaint was not being able to print the values from these objects, as well as other unimplemented <code>dunder</code> (double underscore) methods such as <code>__truediv__</code> for the <code>\\</code> operator. The Mojo team established a <a href=\"https://github.com/modularml/mojo/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repository for raising issues</a> and feature requests. Once an engineer was assigned it took just a few days for <a href=\"https://docs.modular.com/mojo/MojoPython/PythonObject.html\" target=\"_blank\" rel=\"noopener noreferrer\">all of the requested dunder methods to be implemented</a>. Launching early gives you valuable feedback about what your core audience actually wants, and builds confidence as you fix the main pain points.</p>\n<p>The growing Mojo community has a positive and helpful attitude, with numerous community members emerging that are enthusiastically answering questions and solving compiler errors. The Mojo team also responds to community content with enthusiasm, I've seen multiple people start engaging with answering questions after a nice message from someone on the Mojo team about their blog post.</p>\n<p>Syntax debates have already begun of course! But they've be met with a surprising level of maturity, for example the <code>inout</code> keyword for a mutable reference makes a lot of sense when you've used it for a while but it's quite novel at first, there was much debate at first but once <a href=\"https://github.com/modularml/mojo/issues/7#issuecomment-1551821543\" target=\"_blank\" rel=\"noopener noreferrer\">Chris asked for a bikeshedding pause</a> it actually happened! <a href=\"https://en.wikipedia.org/wiki/Law_of_triviality\" target=\"_blank\" rel=\"noopener noreferrer\">See bike-shedding</a>. I believe this comes from a respect in Chris Lattner's expertise, having led large open source projects building ubiquitous languages, compilers and infrastructure including Clang, LLVM, MLIR and Swift. Many languages have no final point of authority, or a lack of trust from the community, and so the bikeshedding never ends. The few negative sentiments I've seen have had a response that they hope the user returns once the language is more mature.</p>\n<h2>Language Features</h2>\n<p>Exploring the language further I feel that Mojo incorporates the best features of various languages:</p>\n<ul>\n<li>English readability of Python</li>\n<li>Memory Safety of Rust</li>\n<li>Hardware level control of C</li>\n<li>Zero cost abstractions of C++</li>\n<li>Metaprogramming and generics simplicity of Zig</li>\n<li>Parallelization simplicity of Go</li>\n</ul>\n<p>In several aspects, Mojo surpasses the aforementioned languages:</p>\n<ul>\n<li>Incorporation of <code>SIMD</code> at the language level for enhanced hardware control</li>\n<li>Simpler memory management model than Rust with more control through a lack of implicit <code>move</code></li>\n<li>Ability to use any existing runtime function at compile time without annotation</li>\n<li>Enables creating functions like <code>autotune</code> and <code>search</code> to optimize for various hardware at compile time using the core language</li>\n</ul>\n<p>Everything currently implemented is orthogonal, and not just a mixed bag of modern features. The big question mark is the implementation of <code>traits</code> also known as <code>protocols</code>, and a syntax to express <code>lifetimes</code> which is currently in the works.</p>\n<h2>Current State</h2>\n<p>My only criticism on the launch would be some of the marketing suggesting that Mojo is currently a superset of Python, to paraphrase Warren Buffet:</p>\n<blockquote>\n<p>You can hold a <code>rock concert</code>, and that's okay. You can perform a <code>symphony</code>, and that's okay. But don't hold a <code>rock concert</code> and advertise it as a <code>symphony</code>.</p>\n</blockquote>\n<p>Mojo is currently a <code>rock concert</code> for system programmers that don't mind getting their hands dirty, with a clear vision and path towards becoming a <code>symphony</code> and superset of Python.</p>\n<p>If you don't mind getting your hands dirty check out these resources:</p>\n<h3>Official</h3>\n<ul>\n<li><a href=\"https://www.modular.com/get-started\" target=\"_blank\" rel=\"noopener noreferrer\">Sign up for the playground</a></li>\n<li><a href=\"https://docs.modular.com/mojo/faq.html\" target=\"_blank\" rel=\"noopener noreferrer\">Read the FAQ</a></li>\n<li><a href=\"https://docs.modular.com/mojo/programming-manual.html\" target=\"_blank\" rel=\"noopener noreferrer\">Read the manual</a></li>\n<li><a href=\"https://www.discord.gg/modular\" target=\"_blank\" rel=\"noopener noreferrer\">Join the Discord</a></li>\n</ul>\n<h3>Unofficial</h3>\n<ul>\n<li><a href=\"/guides/\" target=\"_blank\">Mojo Guides</a></li>\n<li><a href=\"/this_week_in_mojo/\" target=\"_blank\">This week in Mojo</a></li>\n<li><a href=\"/mojo_team_answers\">Mojo team answers</a></li>\n<li><a href=\"/is_mojo_for_me\">Is Mojo for Me?</a></li>\n</ul>\n",
      "date_published": "2023-05-22T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-05-19",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-05-19.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-05-19.html",
      "summary": "Logo\nThis Week in Mojo 2023-05-19\nMojo Playground Release\n‚≠ê New:\n\nAdded missing dunder methods to PythonObject, enabling the use of common arithmetic and logical operators on im...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-05-19</h1>\n<h2>Mojo Playground Release</h2>\n<h3>‚≠ê New:</h3>\n<ul>\n<li>Added missing dunder methods to PythonObject, enabling the use of common arithmetic and logical operators on imported Python values.</li>\n<li>PythonObject is now printable from Mojo, instead of requiring you to import Python‚Äôs print function.</li>\n</ul>\n<h3>üõ†Ô∏è Fixed:</h3>\n<ul>\n<li>Issue #98: Incorrect error with lifetime tracking in loop.</li>\n<li>Issue #49: Type inference issue (?) in ‚Äòternary assignment‚Äô operation (FloatLiteral vs. ‚ÄòSIMD[float32, 1]‚Äô).</li>\n<li>Issue #48: and/or don‚Äôt work with memory-only types.</li>\n<li>Issue #11: setitem Support for PythonObject.</li>\n</ul>\n<h2>Community Content</h2>\n<ul>\n<li><a href=\"https://mzaks.medium.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Maxim Zaks</a> did a blog post on <a href=\"https://mzaks.medium.com/counting-chars-with-simd-in-mojo-140ee730bd4d\" target=\"_blank\" rel=\"noopener noreferrer\">counting chars with SIMD in Mojo</a></li>\n<li><a href=\"https://substack.com/profile/14520974-abhinav-upadhyay\" target=\"_blank\" rel=\"noopener noreferrer\">Abhinav Upadhyay</a> did a substack post titled <a href=\"https://codeconfessions.substack.com/p/mojo-the-future-of-ai-programming\" target=\"_blank\" rel=\"noopener noreferrer\">Mojo: The Future of AI Programming üî•</a></li>\n<li><a href=\"https://www.youtube.com/@codetothemoon\" target=\"_blank\" rel=\"noopener noreferrer\">Code to the Moon</a> did a live demo and introduction to Mojo titled <a href=\"https://www.youtube.com/watch?v=w14vohgjnKo\" target=\"_blank\" rel=\"noopener noreferrer\">All-in-one C++, Rust, AND Python Successor?</a></li>\n</ul>\n<h2>Mojo Team Answers</h2>\n<h3>Unsafe Code</h3>\n<blockquote>\n<p>The standard Pointer is very unsafe and can lead catastrophic scenarios</p>\n</blockquote>\n<p>I agree, the Mojo Pointer type is currently \"too sharp and pointy\" üòÄ. In my opinion, we should rename it to <code>UnsafePointer</code> and make some other changes to make it not have to be something that people reach for immediately, just like in C++ or Rust you should use higher level collections, and not jump right to unsafe features.</p>\n<h3>Bounds Checking</h3>\n<p>We have to implement array bound checking for our array/slice types, we just haven't solidified them due to missing features (notably traits)</p>\n<h3>Community</h3>\n<p>On community, this dovetails with our open source plan.  We're getting a bit crushed under lots of different kinds of interest right now, but I'd love to open up more code, enable pull requests etc, that's mostly blocked on logistical work and that we're being crushed in various ways. We have a Mojo developer advocate role open that will help us sort that out.</p>\n<h3>traits</h3>\n<p><em>currently an unimplemented feature</em>\nWe don't have a final name here, Guido recommended that <code>Protocols</code> as term of art in python already, but we'll need to loop back around and make a decision when we get there.</p>\n<h3>help</h3>\n<p>On the implementation, we'll need some work to build out <code>help(object)</code> and <code>help(Int)</code> (where Int is a struct, not a class).  I don't see us prioritizing that in the next month or so, but it is super important for us to do that over time.  We have ways to do that without adding a field to Int üôÇ etc, so that should be fine. It depends on Traits/Protocols which is on our roadmap</p>\n<h3>CPython Implementation Details</h3>\n<p>You're quite right about CPython.  Mojo takes a different implementation approach: ignoring C extensions for a moment, the core compilation model for mojo is to compile to native code, and use ownership optimizations, and more modern data layout approaches to avoid heap boxing all the things, and therefore reference counting them.  In CPython for example, a lot of reference counting traffic is required for simple integers and short strings etc.</p>\n<p>Mojo solves this in several ways:</p>\n<ol>\n<li>compilers: you get a lot of performance by not going through an interpreter, using register allocation etc.</li>\n<li>unboxing things: our default \"object\" is still naive in many ways, but has inline storage + variant for small types like integers to avoid indirections, refcount overhead, etc.</li>\n<li>types like Int are put in cpu registers etc, which give a massive performance uplift vs that.</li>\n</ol>\n<p>Now you can't ignore CPython and can't ignore c extensions.  Good news, MLIR and compilers can do more than one thing üòÉ, and so we can talk to other ABIs and handle other layout constraints.  We haven't built a proper \"talk to c python extensions\" directly from Mojo subsystem, but when we do, <strong>it</strong> will have a GIL because c extensions require it, just as you say.</p>\n<p>Similarly, when you import a cpython module, you get the cpython interpreter in the loop, which has a gil (and its datalayout etc) implicitly.</p>\n<p>The cool thing about mojo is that you don't pay this overhead in pure Mojo code, so if you care about performance you can incrementally move Python code -&gt; Mojo and you can adopt new features for performance ... but only if you care about performance!  If you don't, hack on and do so without caring, and all is well.</p>\n<h3>IOT</h3>\n<p>yes, definitely, we want Mojo to go everywhere, and deploying to small devices is part of our design. One step at a time though üòÄ</p>\n<h3>rebind</h3>\n<blockquote>\n<p>It will be nice to change the current rebind parameters from [dest, src] to [src, dest] since its more intuitive that the other way around. The current signature is rebind<a href=\"src_val\">dest_type, src_type</a></p>\n</blockquote>\n<p>The current way works better with parameter inference, because you can call it with <code>rebind[dest_type](src_val)</code> and have src_type inferred from the argument.</p>\n<h3>Pytorch on Different hardware</h3>\n<p>We outperform PyTorch across a large range of hardware (Intel, AMD, ARM etc) <a href=\"https://www.modular.com/engine#performance\" target=\"_blank\" rel=\"noopener noreferrer\">see performance dashboard</a> and swap around the Instance Types</p>\n<h3>Quantization</h3>\n<p>We support quantization and it will support many other HW types like edge deployments</p>\n<h3>Inference Engine Frameworks</h3>\n<p>It‚Äôs a unified engine that enables multi-framework support - many users aren‚Äôt just using PyTorch (TensorFlow, JAX etc)</p>\n<p>It integrates natively with Mojo üî• for a completely new high performance programming model that enables many things outside of just pure model execution performance</p>\n<h3>alias</h3>\n<p><code>comptime</code> is really obvious to Zig folk, but that's not really our audience. You're right that <code>alias</code> may not be the right word to use here either. Aligning this around \"parameter\" could be a good way to go, but I'm curious if there are other suggestions.</p>\n<p>Once nice thing about \"alias\" is that it is more obvious for the trivial cases like alias my_magic = 12312 or alias Int8 = SIMD[DType.int8, 1]. That doesn't make it the right thing, but it is a nice thing.</p>\n<p>If we replaced the keyword \"alias x = 42\" with \"parameter x = 42\", then we can say \"it's a declaration of a parameter\" and that \"parameters are all compile time expressions.\"</p>\n<p>alias (regardless of what it is called) is a declaration of a thing. We need spoken vocabulary for programmers to describe these things. It isn't just about encoding things in source code for the compiler, it is allowing humans to communicate ideas as well.</p>\n<p>Also, \"let\" values are not aliases. They've very different. A let isn't mutable after it is initialized, which is a flow sensitive property, e.g. this is allowed:</p>\n<div class=\"language-text line-numbers-mode line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-text\"><code><span class=\"line\"><span class=\"line\"><span>let x : Int </span></span></span>\n<span class=\"line\"><span class=\"line\"><span>if cond:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>    x = foo()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>else:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>    x = bar()</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>use(x)</span></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>which isn't allowed for aliases.</p>\n<h3>MLIR and LLVM</h3>\n<blockquote>\n<p>Reading the documents on MLIR related APIs, I feel that the style of these APIs seems to be quite different with Python</p>\n</blockquote>\n<p>Indeed, the MLIR integration hasn't been polished or designed to be pretty - we've focused primarily on making it fully capable and unblocking our needs. The idea for it is that only MLIR experts would be using this, but then they'd be wrapping user-facing Pythonic types and methods around them (e.g. like OurBool wraps i1). that said, we can definitely improve this in various ways, we just can't do so at the loss of fidelity/expressiveness.</p>\n<blockquote>\n<p>I wonder if it is possible to make Mojo more extensible such that it can also create new didacts?</p>\n</blockquote>\n<p>This is also something we're likely to look into in the far future, but isn't a priority right now. Also, as mojo opens up more, it would be great for community members to poke at this.</p>\n<h3>MLIR code with unknown dialects</h3>\n<p>The mojo compiler has a number of internal dialects, including <code>pop</code> and <code>kgen</code>, but they aren't documented yet. They are very much internal implementation details of the compiler and change all the time. I'd recommend sticking with the llvm and other dialects that are more stable.</p>\n<h3>i32 vs si32</h3>\n<blockquote>\n<p>Python programmers will probably be more familiar with the i32/u32 syntax.</p>\n</blockquote>\n<p>Yeah, for the core language types, our audience are general programmers and Python folks, not MLIR nerds üòâ</p>\n<p>We want things to be clear and unambiguous, compiler folk can deal with naming mapping. We will discuss.</p>\n<blockquote>\n<p>would it ever makes sense for Mojo to also support signless integers?</p>\n</blockquote>\n<p>I don't see a benefit to that. It would mean that we couldn't use the standard Python operators (which imply sign behavior, e.g. on divides). Signless integers are good for compilers because they want canonical forms, but users want operations that work on types. It's a bit of a different concern.</p>\n<h3>Optimization via MLIR</h3>\n<p>Mojo is a gateway to the whole MLIR ecosystem. It is entirely plausible that the matmul implementation for a particular piece of hardware just calls a few MLIR operations.</p>\n<h3>Accelerators</h3>\n<p>We can only say that we're working on accelerators and that is core to the mission, but can't talk about that until we're ready to talk about it üòÄ</p>\n<h3>Compile Time Optimizations</h3>\n<p>Mojo's compiler is not going to be magic. If you write matmul as a triply nested for loop, you will get a triply nested for loop on all hardwares (barring LLVM optimizations).</p>\n<p>The general idea is that Mojo's compiler is not going to perform some magic to optimize the code you are generating, but the language provides all the facilities to write that magic in a portable way as just Mojo code. Today, that magic is bundled into a handful of higher-order functions, like parallelize and vectorize_unroll, and as time continues, Mojo will ship with more \"batteries\" that mean most developers won't have to worry about SIMD, unrolling, etc. You just need to slap a few decorators on your functions/loops and call a function.</p>\n<h3>Python keyword compatibility</h3>\n<p>For now, we need to get Mojo from 0.1 to at least 0.7 (conceptually, we have no specific versioning planned), at which point we'll understand more of what we're dealing with, and have broader developed relationships with the python community.</p>\n<p>Also, my understanding is that Python3 generally doesn't take hard keywords for various compatibility reasons, even things like \"case\" are a soft keyword. If that is true, then we may be fine.</p>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-05-19T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "This Week in Mojo 2023-05-12",
      "url": "https://www.mojodojo.dev/this-week-in-mojo/2023-05-12.html",
      "id": "https://www.mojodojo.dev/this-week-in-mojo/2023-05-12.html",
      "summary": "Logo\nThis Week in Mojo 2023-05-12\nMojo Playground Release\nThe changes from week ending 2023-05-01 and week ending 2023-05-08 have been released to the Mojo Playground with highl...",
      "content_html": "<p><img src=\"/hero.png\" alt=\"Logo\"></p>\n<h1>This Week in Mojo 2023-05-12</h1>\n<h2>Mojo Playground Release</h2>\n<p>The changes from <a href=\"https://docs.modular.com/mojo/changelog.html#week-of-2023-05-01\" target=\"_blank\" rel=\"noopener noreferrer\">week ending 2023-05-01</a> and <a href=\"https://docs.modular.com/mojo/changelog.html#week-of-2023-05-08\" target=\"_blank\" rel=\"noopener noreferrer\">week ending 2023-05-08</a> have been released to the Mojo Playground with highlights:</p>\n<h3>inout</h3>\n<p>The <code>inout</code> keyword replaces <code>&amp;</code> postfix to declare a mutable reference, <code>self&amp;</code> is now <code>inout self</code>:</p>\n<div class=\"language-text line-numbers-mode line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"text\" data-title=\"text\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-text\"><code><span class=\"line\"><span class=\"line\"><span>struct MyVal:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>    var val: Int</span></span></span>\n<span class=\"line\"><span class=\"line\"><span></span></span></span>\n<span class=\"line\"><span class=\"line\"><span>    fn __init__(inout self, val: Int):</span></span></span>\n<span class=\"line\"><span class=\"line\"><span>        self.val = val</span></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>inout</code> will be familiar to Swift programmers, any mutations <code>in</code> the function will persist <code>out</code> of the function.</p>\n<p>See justification for the naming of the keyword <a href=\"https://github.com/modularml/mojo/issues/7\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> and <a href=\"https://github.com/modularml/mojo/discussions/105\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. To summarize <code>&amp;</code> is a heavily overloaded character, while <code>inout</code> describes exactly what's happening.</p>\n<h3>Generic parameters</h3>\n<p>Generic parameters would previously crash notebooks, this now works:</p>\n<div class=\"language-mojo\" data-highlighter=\"prismjs\" data-ext=\"mojo\" data-title=\"mojo\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-mojo\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">struct</span><span style=\"color:#A9B1D6\"> Multi</span><span style=\"color:#9ABDF5\">[</span><span style=\"color:#A9B1D6\">T</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> AnyType</span><span style=\"color:#9ABDF5\">]</span><span style=\"color:#89DDFF\">:</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">    var</span><span style=\"color:#C0CAF5\"> x</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> T</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#BB9AF7\">    fn</span><span style=\"color:#0DB9D7\"> __init__</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#9D7CD8;font-style:italic\">inout</span><span style=\"color:#E0AF68\"> self</span><span style=\"color:#89DDFF\">,</span><span style=\"color:#E0AF68\"> x</span><span style=\"color:#89DDFF\">:</span><span style=\"color:#A9B1D6\"> T</span><span style=\"color:#9ABDF5\">):</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#F7768E\">        self</span><span style=\"color:#89DDFF\">.</span><span style=\"color:#A9B1D6\">x </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#A9B1D6\"> x</span></span></span>\n<span class=\"line\"><span class=\"line\"></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">let</span><span style=\"color:#C0CAF5\"> x</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#7AA2F7\"> Multi</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#FF9E64\">10</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#9D7CD8;font-style:italic\">let</span><span style=\"color:#C0CAF5\"> y</span><span style=\"color:#89DDFF\"> =</span><span style=\"color:#7AA2F7\"> Multi</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ECE6A\">string</span><span style=\"color:#89DDFF\">\"</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><h2>Mojo Team Content</h2>\n<ul>\n<li><a href=\"https://www.modular.com/team/tim-davis\" target=\"_blank\" rel=\"noopener noreferrer\">Tim Davis</a> released a <a href=\"https://www.modular.com/blog/our-launch-whats-next\" target=\"_blank\" rel=\"noopener noreferrer\">blog post</a> on the launch and what's next</li>\n<li><a href=\"https://www.modular.com/team/scott-main\" target=\"_blank\" rel=\"noopener noreferrer\">Scott Main</a> added a section to the programming manual on <a href=\"https://docs.modular.com/mojo/programming-manual.html#argument-passing-control-and-memory-ownership\" target=\"_blank\" rel=\"noopener noreferrer\">memory ownership</a> that clarifies value and reference semantics in Mojo.</li>\n</ul>\n<h2>Community Content</h2>\n<ul>\n<li>Github user <a href=\"https://github.com/crisadamo/mojo-lang-syntax\" target=\"_blank\" rel=\"noopener noreferrer\">crisadamo</a> has released a VS Code extension for syntax highlighting: <a href=\"https://github.com/crisadamo/mojo-lang-syntax\" target=\"_blank\" rel=\"noopener noreferrer\">mojo-lang-syntax</a> while we wait for the official language extension.</li>\n<li>Github user <a href=\"https://github.com/czheo/mojo.vim\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/czheo</a> released a <a href=\"https://github.com/czheo/mojo.vim\" target=\"_blank\" rel=\"noopener noreferrer\">vim plugin</a> for syntax highlighting</li>\n<li>Telukso did a video where he experimented with <a href=\"https://www.youtube.com/watch?v=yovCqxZalJU\" target=\"_blank\" rel=\"noopener noreferrer\">the Mojo playground</a> and the matmul notebook, giving a nice visual for matrix multiplication before diving in <a href=\"https://www.youtube.com/watch?v=yovCqxZalJU?t=483\" target=\"_blank\" rel=\"noopener noreferrer\">starting at 8:08</a></li>\n<li>Jeff Delaney responsible for <a href=\"https://fireship.io\" target=\"_blank\" rel=\"noopener noreferrer\">fireship.io</a> released a <a href=\"https://www.youtube.com/watch?v=V4gGJ7XXlC0&amp;t=3s\" target=\"_blank\" rel=\"noopener noreferrer\">meme filled video about Mojo</a></li>\n<li>The Primagen who mixes comedy and tech <a href=\"https://www.youtube.com/watch?v=RZhTC33lStQ\" target=\"_blank\" rel=\"noopener noreferrer\">did a reaction video</a> to Jeremy Howard's launch demo</li>\n</ul>\n<h2>New Mojo Team Answers</h2>\n<h3>Thread Safety</h3>\n<p>A borrowed argument is <code>safe to share</code>. It isn't enforced yet, but the model is that a borrowed argument can never alias a mutable reference.</p>\n<p>Mojo provides the same model as Rust, which is <code>mutable XOR sharing</code> model. If you have a mutable reference to something, it is known to be unique. You can have many immutable references though.</p>\n<h3>Actor Model</h3>\n<p>We only have \"ideas\" not \"plans\" here. I'm a fan of actors, having designed/built out a system for swift a few years ago. I think an evolved version of that would compose well and will fit nicely into our system. I think we'll want a Mutex abstraction and classes first though. See <a href=\"https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782\" target=\"_blank\" rel=\"noopener noreferrer\">Swift Concurrency Manifesto</a> and <a href=\"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency/\" target=\"_blank\" rel=\"noopener noreferrer\">Swift Concurrency Docs</a></p>\n<p>You don't need to convince me of the value of actors, Carl Hewitt already did üôÇ</p>\n<h3>Leading underscore <code>_foo</code> for private members</h3>\n<p>This is a very clear extension we could consider, highly precedented of course. In the immediate future we are focusing on building the core systems programming features in the roadmap. When that is complete, we can consider \"general goodness\" features like this.</p>\n<h3>WASM Support</h3>\n<p>The Mojo stack is perfectly set up to do this. It doesn't use garbage collection, supports very small installed binaries etc. It'll be great, we just need to make a bit more progress üòÑ</p>\n<h3>Global Variables</h3>\n<p>Both <code>def</code> and <code>fn</code> cannot access variables outside their scope because Mojo as a language doesn't have proper global variables yet, this is a known missing feature.</p>\n<h3>Float Literals</h3>\n<p><code>FloatLiteral</code> is backed by <code>Float64</code> but the Mojo Playground is currently only printing to 6 decimal places. <a href=\"https://github.com/modularml/mojo/issues/115\" target=\"_blank\" rel=\"noopener noreferrer\">Feature request added here</a> to print all significant digits.</p>\n<h3>Type Erasure for Python Support</h3>\n<p>This currently doesn't work in Mojo as it does in Python:</p>\n<div class=\"language-python\" data-highlighter=\"prismjs\" data-ext=\"py\" data-title=\"py\"><pre class=\"shiki tokyo-night vp-code\" style=\"background-color:#1a1b26;color:#a9b1d6 language-python\"><code><span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">a </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#FF9E64\"> 9</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">a</span><span style=\"color:#9ABDF5\">)</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#A9B1D6\">a </span><span style=\"color:#89DDFF\">=</span><span style=\"color:#89DDFF\"> \"</span><span style=\"color:#9ECE6A\">Hello</span><span style=\"color:#89DDFF\">\"</span></span></span>\n<span class=\"line\"><span class=\"line\"><span style=\"color:#0DB9D7\">print</span><span style=\"color:#9ABDF5\">(</span><span style=\"color:#C0CAF5\">a</span><span style=\"color:#9ABDF5\">)</span></span></span></code></pre>\n</div><p>I agree we need to decide what the model is. This <strong>must</strong> work, at least in a <code>def</code>, for python compatibility. <code>def</code> currently allows implicit declaration, but infer the type from the first assignment. The above implies that implicitly declared variables in a <code>def</code> should default to having object type (which type erases the concrete type and will allow the above).</p>\n<p>I think this is the right/unavoidable thing to do, but I have two concerns:</p>\n<p>We don't really have the language features in place to implement object correctly (notably need the basics of classes), so I'd like to avoid switching to this model until we can make it work right.</p>\n<p>This push us to define/create the \"type erasure of structs to object\" model so that user defined struct types can be used here. We may or may not want to do this, it isn't clear to me. There is a lot of precedent in this in the Swift world where Swift classes can be typed erased to <code>AnyObject</code> (aka <code>id</code> in ObjC) and that <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0116-id-as-any.md\" target=\"_blank\" rel=\"noopener noreferrer\">allow dynamic dispatch in various ways</a></p>\n<p>These are super nuanced issues and I'd like to get more experience with the core language before touching into this. There is a big difference between bringing up something simple and building it really great.</p>\n<h3>Compile to Shared Library</h3>\n<p>Yes, it can be compiled as a shared library, no problem. We're not prioritizing this right now, but we'll enable this at some point</p>\n<h3>Mutable Reference vs Mutable Referee</h3>\n<p>An <code>immutable reference</code> can still have a <code>mutable referee</code>, this is equivalent to the difference between <code>const int*</code> and <code>int* const</code> in C.</p>\n",
      "image": "https://www.mojodojo.dev/hero.png",
      "date_published": "2023-05-12T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    },
    {
      "title": "Why Use Mojo?",
      "url": "https://www.mojodojo.dev/blog/2023-05-08-why-use-mojo.html",
      "id": "https://www.mojodojo.dev/blog/2023-05-08-why-use-mojo.html",
      "summary": "I wrote this blog before I started working at Modular, these views are not representative of Modular\nThe Mojo toolchain is not yet available, but you can signup to get early pre...",
      "content_html": "<p><em>I wrote this blog before I started working at Modular, these views are not representative of Modular</em></p>\n<p>The Mojo toolchain is not yet available, <a href=\"https://www.modular.com/get-started\" target=\"_blank\" rel=\"noopener noreferrer\">but you can signup</a> to get early preview access to a Mojo notebook.</p>\n<p>Check <a href=\"https://docs.modular.com/mojo/why-mojo.html\" target=\"_blank\" rel=\"noopener noreferrer\">the official why mojo page</a> for insights into the Modular team's reasoning for creating Mojo, this is the personal perspective of an engineer specializing in optimizing machine learning (ML) inference.</p>\n<h2>Intro</h2>\n<p>Mojo has been designed to address Python's limitations by adding proven language features, enabling performance enhancement at a low level. Developed by Chris Lattner and his experienced team, Mojo aims to be a fully compatible Python superset. Lattner is recognized amongst many other things for creating Low-Level Virtual Machine (LLVM), a prevalent compiler infrastructure that optimizes code performance across numerous hardware and platforms. LLVM is utilized by the majority of high-performance languages, including C/C++, Rust, Zig, and Swift.</p>\n<h2>Lessons Learned</h2>\n<p>Over the years, LLVM has seen extensive development, with a vast number of contributors ranging from individual hackers to major corporations. In the process of creating a modern programming language today, developers typically write code that is lowered to LLVM, as achieving similar performance across all existing hardware independently would be a monumental task. Consequently, the announcement of Chris Lattner launching a language that addresses Python's complex ecosystem and performance issues has generated considerable enthusiasm. This excitement stems not only from his prior success in resolving similar challenges, but also from his humble leadership style that fosters collaboration between hackers and corporate entities. Lattner acknowledges the lessons learned from past mistakes with the Swift language and demonstrates a appreciation for modern language features by improving upon them in Mojo, such as Rust's lifetimes and Zig's comptime.</p>\n<h2>Current Optimization Solution</h2>\n<p>The ML ecosystem has experienced significant growth in complexity, with the C++ library ONNXRuntime emerging as the quickest route to hardware optimization. However, this library presents substantial challenges due to its 20 distinct execution providers and the need to build it from source via the infamously tricky CMake build system to optimize for various hardware. Selecting the appropriate Linux distribution and dependency versions based on the target platform and hardware can be an arduous task, with certain hardware necessitating the use of a specific tag or commit when building the library that ONNXRuntime links to.</p>\n<h2>Mojo Benefits</h2>\n<p>Mojo enables fast development via an Interpreter and Just-in-Time (JIT) compilation or can compile to a single binary through Multi-Level Intermediate Representation (MLIR), another project initiated by Chris Lattner for TensorFlow, to enable hardware optimization during compilation. Resembling LLVM, MLIR incorporates additional benefits for ML and extensibility to other domains, and MLIR is now a part of the LLVM project.</p>\n<p>Mojo enables optimizations through language-level exposure of types, such as SIMD (Single Instruction, Multiple Data), which allows modern hardware to perform the same operation on blocks of data simultaneously. This capability is particularly valuable in ML, leading to substantial performance improvements. Delving into a current Python library making use of linear algebra such as Numpy reveals C, Fortran, and Assembly at the core optimizing for different hardware. <a href=\"https://www.youtube.com/watch?v=6GvB5lZJqcE\" target=\"_blank\" rel=\"noopener noreferrer\">Observe a demonstration by Jeremy Howard</a> as he simplifies thousands of lines of intricate, hardware-specific code into a few concise lines of Mojo.</p>\n<p>Mojo's current appeal lies not in its capabilities for training models, which will likely be developed in the future, but rather in its ability to improve the optimization process for inference at a lower level. This eliminates the need for modern engineers to delve into programming languages such as C/C++, Fortran, or Assembly, which can be a major barrier.</p>\n<h2>Summary</h2>\n<p>Engineers can leverage a minimalist superset of Python for low-level optimization while enabling high-level programmers to work with their code using familiar Python syntax, eliminating the need to depend on old, complex libraries for optimization across various hardware platforms. Currently, to enhance performance, engineers often convert Python to C/C++ or Rust, but this approach hinders ML engineers' ability to experiment with inference code. Mojo's appeal stems from its ability to provide optimal performance across diverse hardware platforms without the frustration of grappling with languages like C/C++, Fortran, Assembly, CUDA and CMake, all while offering code that is accessible to ML engineers primarily focused on reducing model loss. As a result, both parties can collaborate and experiment with the same inference code, increasing the likelihood that this approach will emerge as the optimal solution to overcome current challenges in ML.</p>\n",
      "date_published": "2023-05-08T00:00:00.000Z",
      "authors": [
        {
          "name": "Mojo Dojo"
        }
      ],
      "tags": []
    }
  ]
}