import{_ as o}from"./hero-CbGtQ2Lh.js";import{_ as a,c as n,a as i,d as r,r as s,o as l}from"./app-CGzBYgfx.js";const h={};function d(c,e){const t=s("CommentService");return l(),n("div",null,[e[0]||(e[0]=i('<p><img src="'+o+'" alt="Logo"></p><h1 id="this-week-in-mojo-2023-06-30" tabindex="-1"><a class="header-anchor" href="#this-week-in-mojo-2023-06-30"><span>This Week in Mojo 2023-06-30</span></a></h1><h2 id="official" tabindex="-1"><a class="header-anchor" href="#official"><span>Official</span></a></h2><ul><li>Interview with CPO Tim Davis: <a href="https://www.youtube.com/watch?v=r4Yx6AZobpU" target="_blank" rel="noopener noreferrer">Redefining AI Infrastructure</a></li></ul><h2 id="community" tabindex="-1"><a class="header-anchor" href="#community"><span>Community</span></a></h2><ul><li><a href="https://www.youtube.com/@Code-Tech" target="_blank" rel="noopener noreferrer">Code &amp; Tech</a> released a video: <a href="https://www.youtube.com/watch?v=S1H6_GqfTdg" target="_blank" rel="noopener noreferrer">What is Mojoüî•?</a></li><li><a href="https://medium.com/@gautam.e" target="_blank" rel="noopener noreferrer">Gautam</a> made a blog post on <a href="https://medium.com/@gautam.e/a-mojo-iterator-5ebd4ad6c02b" target="_blank" rel="noopener noreferrer">Mojo Iterators</a></li></ul><h2 id="playground-update" tabindex="-1"><a class="header-anchor" href="#playground-update"><span>Playground Update</span></a></h2><p><a href="https://docs.modular.com/mojo/changelog.html#june-2023" target="_blank" rel="noopener noreferrer">Full changelog here</a></p><h3 id="‚≠êÔ∏è-new" tabindex="-1"><a class="header-anchor" href="#‚≠êÔ∏è-new"><span>‚≠êÔ∏è New</span></a></h3><p>You can now share <code>.ipynb</code> notebook files in Mojo Playground. Just save a file in the shared directory, and then right-click the file and select Copy Sharable link. To open a shared notebook, you must already have access to Mojo Playground. When you open a shared notebook, click Import at the top of the notebook to save your own copy. For more details about this feature, see the instructions inside the Mojo Playground file browser help directory.</p><h3 id="ü¶ã-changed" tabindex="-1"><a class="header-anchor" href="#ü¶ã-changed"><span>ü¶ã Changed</span></a></h3><p>The <code>unroll2()</code> and <code>unroll3()</code> functions in the Functional module have been renamed to overload the <code>unroll()</code> function. These functions unroll 2D and 3D loops and <code>unroll()</code> can determine the intent based on the number of input parameters.</p><h3 id="üõ†Ô∏è-fixed" tabindex="-1"><a class="header-anchor" href="#üõ†Ô∏è-fixed"><span>üõ†Ô∏è Fixed</span></a></h3><ul><li><a href="https://github.com/modularml/mojo/issues/74" target="_blank" rel="noopener noreferrer">Issue #74</a>: Struct definition with recursive reference crashes.</li><li><a href="https://github.com/modularml/mojo/issues/285" target="_blank" rel="noopener noreferrer">Issue #285</a>: The TargetInfo module now includes <code>is_little_endian()</code> and <code>is_big_endian()</code> to check if the target host uses either little or big endian.</li></ul><h2 id="mojo-team-answers" tabindex="-1"><a class="header-anchor" href="#mojo-team-answers"><span>Mojo Team Answers</span></a></h2><h3 id="url-based-imports" tabindex="-1"><a class="header-anchor" href="#url-based-imports"><span>URL based imports</span></a></h3><p>Traditionally, it has been a responsibility placed on the build system, but that makes reproducible scripts harder to manage. Having first-class support for URL imports seem like the right direction for Mojo. We&#39;re still focusing on nailing down having packages first, but later on thinking about distribution and sharing will be important to building an ecosystem.</p><ul><li><a href="https://github.com/modularml/mojo/discussions/413#discussioncomment-6285136" target="_blank" rel="noopener noreferrer">2023-06-27 GitHub Jeff Niu</a></li></ul><h3 id="pointers" tabindex="-1"><a class="header-anchor" href="#pointers"><span>Pointers</span></a></h3><p>Pointers serve an important function even for safe code, it allows type-erasing a reference into an arbitrary container that holds a value in memory, just like a safe reference does. This is a pretty important thing, but you really want this to be safe for the common use-case. Such a thing would not support pointer arithmetic or indexing though, this is something a Slice type would support.</p><ul><li><a href="https://discord.com/channels/1087530497313357884/1124302001430339616/1124437937640194120" target="_blank" rel="noopener noreferrer">2023-06-30 Discord Chris Lattner</a></li></ul><h3 id="energy-efficiency" tabindex="-1"><a class="header-anchor" href="#energy-efficiency"><span>Energy Efficiency</span></a></h3><p>We have not done any analysis about energy efficiency, my guess is that Mojo would be in the top 2 or 3, since Mojo does not do anything fancy behind your back. We do need to study this however.</p><ul><li><a href="https://github.com/modularml/mojo/discussions/302?notification_referrer_id=NT_kwDOB-auX7Q2NjI5NTQwODg4OjEzMjU1ODQzMQ" target="_blank" rel="noopener noreferrer">2023-06-26 GitHub Abdul</a></li></ul><h3 id="macros" tabindex="-1"><a class="header-anchor" href="#macros"><span>Macros</span></a></h3><p>I think it is important to have some sort of macro-like feature for syntax - one specific use-case for this is to enable things like &quot;parallel_for&quot; to be library features instead of language features. That said, we aren&#39;t looking to implement language features for their own sake, we should be motivated by specific problems we want to solve.</p><ul><li><a href="https://github.com/modularml/mojo/discussions/410#discussioncomment-6269717" target="_blank" rel="noopener noreferrer">2023-06-25 GitHub Chris Lattner</a></li></ul><h3 id="multiple-dispatch" tabindex="-1"><a class="header-anchor" href="#multiple-dispatch"><span>Multiple Dispatch</span></a></h3><p>This is a nice feature from (eg) Julia, but it depends entirely on its compilation model which doesn&#39;t work the same way as Mojo&#39;s.</p><ul><li><a href="https://github.com/modularml/mojo/issues/407#issuecomment-1605594829" target="_blank" rel="noopener noreferrer">2023-06-25 GitHub Chris Lattner</a></li></ul><h3 id="python-type-hints" tabindex="-1"><a class="header-anchor" href="#python-type-hints"><span>Python Type Hints</span></a></h3><p>Mojo can tell the difference between Python &quot;hints&quot; and Mojo types. There will be no problem here, we can support the hints for compatibility (by ignoring them) just like Python does.</p><ul><li><a href="https://github.com/modularml/mojo/discussions/410#discussioncomment-6269717" target="_blank" rel="noopener noreferrer">2023-06-25 GitHub Chris Lattner</a></li></ul><h3 id="rust" tabindex="-1"><a class="header-anchor" href="#rust"><span>Rust</span></a></h3><p>I don&#39;t think that mojo has any burden to prove novelty vs rust. We&#39;re happy to adopt good ideas from Rust as with all other existing languages. Graydon himself was very happy for Rust to pull good ideas when he started it, and wasn&#39;t ashamed to admit it. Mojo is similar.</p><p>I also don&#39;t see Rust and Mojo in competition, while I&#39;m hoping that Mojo can learn from and improve vs Rust in various areas, they&#39;re clearly servicing different segments of the world. Yes there is some crossover, but Rust is far more mature than Mojo and Rust is continuously improving as well. If you&#39;d like to continue using Rust, go for it üòÄ.</p><p>If you&#39;re interested in language nerdery, then yes, there are ways in which Mojo can provide better performance than Rust. There are two categories:</p><ol><li><p>There are very low level implementation details (e.g. borrow by default instead of move, moves not implying memcpy etc) that can affect idiomatic use of the language at scale. As others say, it will be difficult to know how these work out until Mojo is more complete and there are more at-scale applications like your caching system. Mojo&#39;s trait system in particular is missing, and it&#39;s hard to write much realistic generic code without that!</p></li><li><p>Mojo open new frontiers for GPUs and other accelerators. We can all have different opinions about what the &quot;end of moore&#39;s&quot; law means for computing, but if computers keep getting weirder, and if that matters for important workloads that you care about, then Mojo will be interesting because it can talk to them in ways that other languages weren&#39;t really built for.</p></li></ol><p>That said if you care about Fibonacci on X86 cpus, both Rust and Mojo (and Clang and many many others) are all zero cost languages that boil down to LLVM. As such, any advantage claimed on such a workload will be more about accidental implementation details than anything else and could be easily fixed.</p><ul><li><a href="https://discord.com/channels/1087530497313357884/1122302305438539826/1122372150146383906" target="_blank" rel="noopener noreferrer">2023-06-25 Discord Chris Lattner</a></li></ul>',40)),r(t)])}const p=a(h,[["render",d],["__file","2023-06-30.html.vue"]]),f=JSON.parse('{"path":"/this-week-in-mojo/2023-06-30.html","title":"This Week in Mojo 2023-06-30","lang":"en-US","frontmatter":{"title":"This Week in Mojo 2023-06-30","date":"2023-06-30T00:00:00.000Z","author":"Mojo Dojo","author_site":"https://mojodojo.dev","author_image":"https://mojodojo.dev/hero.png","feed":true,"head":[["meta",{"name":"twitter:card","content":"summary"}],["meta",{"name":"twitter:site","content":"@mojodojodev"}],["meta",{"name":"twitter:title","content":"This Week in Mojo"}],["meta",{"name":"twitter:description","content":"This week in Mojo with language updates, community content, and everything else related to Mojo"}],["meta",{"name":"twitter:image","content":"https://mojodojo.dev/hero.png"}]]},"headers":[{"level":2,"title":"Official","slug":"official","link":"#official","children":[]},{"level":2,"title":"Community","slug":"community","link":"#community","children":[]},{"level":2,"title":"Playground Update","slug":"playground-update","link":"#playground-update","children":[{"level":3,"title":"‚≠êÔ∏è New","slug":"‚≠êÔ∏è-new","link":"#‚≠êÔ∏è-new","children":[]},{"level":3,"title":"ü¶ã Changed","slug":"ü¶ã-changed","link":"#ü¶ã-changed","children":[]},{"level":3,"title":"üõ†Ô∏è Fixed","slug":"üõ†Ô∏è-fixed","link":"#üõ†Ô∏è-fixed","children":[]}]},{"level":2,"title":"Mojo Team Answers","slug":"mojo-team-answers","link":"#mojo-team-answers","children":[{"level":3,"title":"URL based imports","slug":"url-based-imports","link":"#url-based-imports","children":[]},{"level":3,"title":"Pointers","slug":"pointers","link":"#pointers","children":[]},{"level":3,"title":"Energy Efficiency","slug":"energy-efficiency","link":"#energy-efficiency","children":[]},{"level":3,"title":"Macros","slug":"macros","link":"#macros","children":[]},{"level":3,"title":"Multiple Dispatch","slug":"multiple-dispatch","link":"#multiple-dispatch","children":[]},{"level":3,"title":"Python Type Hints","slug":"python-type-hints","link":"#python-type-hints","children":[]},{"level":3,"title":"Rust","slug":"rust","link":"#rust","children":[]}]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"}]},"filePathRelative":"this-week-in-mojo/2023-06-30.md"}');export{p as comp,f as data};
