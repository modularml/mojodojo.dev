import{_ as l}from"./hero-CbGtQ2Lh.js";import{_ as t,c as r,a as n,b as e,e as a,d as i,f as p,r as c,o as d}from"./app-CGzBYgfx.js";const h={};function m(u,o){const s=c("RouteLink");return d(),r("div",null,[o[4]||(o[4]=n('<p><img src="'+l+`" alt="Logo"></p><h1 id="this-week-in-mojo-2023-07-28" tabindex="-1"><a class="header-anchor" href="#this-week-in-mojo-2023-07-28"><span>This Week in Mojo 2023-07-28</span></a></h1><h2 id="playground-release" tabindex="-1"><a class="header-anchor" href="#playground-release"><span>Playground Release</span></a></h2><p><a href="https://docs.modular.com/mojo/changelog.html#july-2023" target="_blank" rel="noopener noreferrer">Full changelog here</a></p><h3 id="‚≠êÔ∏è-new" tabindex="-1"><a class="header-anchor" href="#‚≠êÔ∏è-new"><span>‚≠êÔ∏è New</span></a></h3><p>Types that define both <code>__getitem__</code> and <code>__setitem__</code> (i.e. where sub-scripting instances creates computed LValues) can now be indexed in parameter expressions. Unroll decorator for loops with constant bounds and steps:</p><ul><li><code>@unroll</code>: Fully unroll a loop.</li><li><code>@unroll(n)</code>: Unroll a loop by factor of n, where n is a positive integer.</li></ul><p>Unroll decorator requires loop bounds and iteration step to be compiler time constant value, otherwise unrolling will fail with compilation error. This also doesn‚Äôt make loop induction variable a parameter.</p><p>Fully unroll the loop:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">unroll</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">5</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p>Unroll the loop by a factor of 4 (with remainder iterations of 2):</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">unroll</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">10</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p>The Mojo REPL now prints the values of variables defined in the REPL. There is full support for scalars and structs. Non-scalar SIMD vectors are not supported at this time.</p><h3 id="üõ†Ô∏è-fixed" tabindex="-1"><a class="header-anchor" href="#üõ†Ô∏è-fixed"><span>üõ†Ô∏è Fixed</span></a></h3><ul><li><a href="https://github.com/modularml/mojo/issues/437" target="_blank" rel="noopener noreferrer">Issue #437</a> - Range can now be instantiated with a PythonObject.</li><li><a href="https://github.com/modularml/mojo/issues/288" target="_blank" rel="noopener noreferrer">Issue #288</a> - Python strings can now be safely copied.</li></ul><h2 id="community-content" tabindex="-1"><a class="header-anchor" href="#community-content"><span>Community Content</span></a></h2>`,16)),e("ul",null,[o[3]||(o[3]=e("li",null,[e("a",{href:"https://github.com/automata",target:"_blank",rel:"noopener noreferrer"},"Vilson Vieira"),a(" has been working on a "),e("a",{href:"https://github.com/automata/mojograd",target:"_blank",rel:"noopener noreferrer"},"Mojo implementation of micrograd named mojograd"),a(", still a work in progress")],-1)),e("li",null,[o[1]||(o[1]=a("added a chatbot to the bottom of ")),i(s,{to:"/mojo-team-answers.html#mojo-chatbot"},{default:p(()=>o[0]||(o[0]=[a("Mojo Team Answers")])),_:1}),o[2]||(o[2]=a(" while experimenting with it."))])]),o[5]||(o[5]=n(`<h2 id="mojo-team-answers" tabindex="-1"><a class="header-anchor" href="#mojo-team-answers"><span>Mojo Team Answers</span></a></h2><h3 id="loop-unrolling" tabindex="-1"><a class="header-anchor" href="#loop-unrolling"><span>Loop Unrolling</span></a></h3><p>These are two loop decorators to tell the compiler to unroll a loop, see <a href="https://en.wikipedia.org/wiki/Loop_unrolling" target="_blank" rel="noopener noreferrer">wikipedia loop unrolling</a>. This doesn&#39;t impact the functionality of the loops, but potentially can help for better performance since it opens possibility for further compiler optimizations.</p><p>Fully unroll the loop&#39;s 10 iterations into 10 <code>do_something</code> calls and remove the for-loop:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">unroll</span><span style="color:#A9B1D6;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">10</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">  do_something</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p>Unroll every 2 iterations and loop over 5 times:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">unroll</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;"> (</span><span style="color:#FF9E64;">10</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">  do_something</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p>This decorator can be attached to while statement too.</p><p>Note that currently the compiler can only unroll a loop:</p><ul><li>Its lower bound, upper bound and induction variable step every iteration are compile time constants</li><li>There is no early exits in the loop body that makes the loop trip count dynamic during runtime.</li></ul><p>Otherwise, Compilation fails if a loop is decorated with <code>@unroll</code></p><p>Here is a brief description of these two decorators in <a href="https://docs.modular.com/mojo/changelog.html#july-2023" target="_blank" rel="noopener noreferrer">Mojo changelog on 2023-07-26</a>.</p><p><a href="https://docs.modular.com/mojo/MojoStdlib/Functional.html#unroll" target="_blank" rel="noopener noreferrer">Functional.unroll</a> performs the same loop unrolling functionality as library functions. There are a few differences between using library function of unroll and decorator <code>@unroll</code> are:</p><ul><li>Library function call requires the induction variable to be a parameter while the decorator uses the induction variable as a dynamic variable.</li><li>Library function call unroll the loop so that the program the compiler starts to compile is with unrolled code. The can potentially increase the amount of code to compile depends on the amount to unroll.</li><li>Decorator unrolling happens at later stage of compilation which prevents program explosion too early.</li></ul><p>-<a href="https://github.com/modularml/mojo/discussions/482#discussioncomment-6581104" target="_blank" rel="noopener noreferrer">2023-07-28 Github Weiwei Chen</a></p><h3 id="json-parser" tabindex="-1"><a class="header-anchor" href="#json-parser"><span>JSON Parser</span></a></h3><p>JSON is super important, but right now we are tracking more basic things, e.g. getting core data structures in place. Higher level libraries like this should likely be part of the broader package ecosystem, and we need packages before we plan that üòÉ</p><ul><li><a href="https://github.com/modularml/mojo/issues/478#issuecomment-1654623649" target="_blank" rel="noopener noreferrer">2023-07-28 Github Chris Lattner</a></li></ul>`,18))])}const f=t(h,[["render",m],["__file","2023-07-28.html.vue"]]),b=JSON.parse('{"path":"/this-week-in-mojo/2023-07-28.html","title":"This Week in Mojo 2023-07-28","lang":"en-US","frontmatter":{"date":"2023-07-28T00:00:00.000Z","author":"Mojo Dojo","author_site":"https://mojodojo.dev","author_image":"https://mojodojo.dev/hero.png","feed":true,"head":[["meta",{"name":"twitter:card","content":"summary"}],["meta",{"name":"twitter:site","content":"@mojodojodev"}],["meta",{"name":"twitter:title","content":"This Week in Mojo"}],["meta",{"name":"twitter:description","content":"This week in Mojo with language updates, community content, and everything else related to Mojo"}],["meta",{"name":"twitter:image","content":"https://mojodojo.dev/hero.png"}]]},"headers":[{"level":2,"title":"Playground Release","slug":"playground-release","link":"#playground-release","children":[{"level":3,"title":"‚≠êÔ∏è New","slug":"‚≠êÔ∏è-new","link":"#‚≠êÔ∏è-new","children":[]},{"level":3,"title":"üõ†Ô∏è Fixed","slug":"üõ†Ô∏è-fixed","link":"#üõ†Ô∏è-fixed","children":[]}]},{"level":2,"title":"Community Content","slug":"community-content","link":"#community-content","children":[]},{"level":2,"title":"Mojo Team Answers","slug":"mojo-team-answers","link":"#mojo-team-answers","children":[{"level":3,"title":"Loop Unrolling","slug":"loop-unrolling","link":"#loop-unrolling","children":[]},{"level":3,"title":"JSON Parser","slug":"json-parser","link":"#json-parser","children":[]}]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"this-week-in-mojo/2023-07-28.md"}');export{f as comp,b as data};
