import{_ as n,c as o,a as l,d as p,r as e,o as t}from"./app-CGzBYgfx.js";const r={};function c(i,s){const a=e("CommentService");return t(),o("div",null,[s[0]||(s[0]=l(`<h1 id="pointer" tabindex="-1"><a class="header-anchor" href="#pointer"><span>Pointer</span></a></h1><p>Store an address to any type, allowing you to allocate, load and modify single instances or arrays of the type on the heap</p><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>Import</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Pointer </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> Pointer</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Memory </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> memset_zero</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> String </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> String</span></span></span></code></pre></div><h2 id="initialization" tabindex="-1"><a class="header-anchor" href="#initialization"><span>Initialization</span></a></h2><p>Create a struct and use that as the type for the pointer</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Coord</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt8 </span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt8</span></span></span></code></pre></div><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> p1</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> Pointer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">Coord</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> p2</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> Pointer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">Coord</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p>All the values will be garbage, we need to manually zero them if there is a chance we might read the value before writing it, otherwise it&#39;ll be undefined behaviour (UB):</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7AA2F7;">memset_zero</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">memset_zero</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><h2 id="operators" tabindex="-1"><a class="header-anchor" href="#operators"><span>Operators</span></a></h2><p>Perform operations with the two pointers</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">if</span><span style="color:#A9B1D6;"> p1</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">p1 is not null</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">p1 and p2 are equal:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> p1 </span><span style="color:#BB9AF7;">==</span><span style="color:#C0CAF5;"> p2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">p1 and p2 are not equal:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> p1 </span><span style="color:#BB9AF7;">!=</span><span style="color:#C0CAF5;"> p2</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>p1 is not null
p1 and p2 are equal: False
p1 and p2 are not equal: True
</code></pre><h2 id="register-passable" tabindex="-1"><a class="header-anchor" href="#register-passable"><span>Register Passable</span></a></h2><p>Let&#39;s try printing the zeroed value from the first point:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> coord</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> p1</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">coord</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>error: Expression [6]:17:19: invalid call to &#39;__getitem__&#39;: result cannot bind generic !mlirtype to memory-only type &#39;Coord&#39;
    let coord = p1[0]
                ~~^~~

/.modular/Kernels/mojo/Stdlib/Pointer.mojo:118:5: function declared here
    fn __getitem__(self, offset: Int) -&gt; type:
    ^
</code></pre><p>Take note of the above error, a <code>memory-only</code> type means it can&#39;t be passed through registers, we need that behavior to use the <code>[x]</code> syntax on a Pointer. Lets redefine it with <code>@register_passable</code> annotated:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">register_passable</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Coord</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt8 </span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt8</span></span></span></code></pre></div><p>Now we&#39;ll be able to use Python syntax to access objects of type <code>Coord</code>:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> p1</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> Pointer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">Coord</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">memset_zero</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> coord</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> p1</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">coord</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>0
</code></pre><h2 id="storing-values" tabindex="-1"><a class="header-anchor" href="#storing-values"><span>Storing Values</span></a></h2><p>Let&#39;s try setting the values</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">coord</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">x </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 5</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">coord</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">y </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 5</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">coord</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>5
</code></pre><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p1</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>0
</code></pre><p>Note above that <code>coord</code> is an identifier to memory on the stack or in a register, when we try and print <code>p1[0]</code> it hasn&#39;t been modified. We need to write the data.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">store</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> coord</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p1</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>5
</code></pre><p>Lets add 5 to it and store it at offset 1</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">coord</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">x </span><span style="color:#89DDFF;">+=</span><span style="color:#FF9E64;"> 5</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">coord</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">y </span><span style="color:#89DDFF;">+=</span><span style="color:#FF9E64;"> 5</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">store</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> coord</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p>Now print both the coords:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p1</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p1</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>5
5
10
10
</code></pre><h2 id="undefined-behaviour" tabindex="-1"><a class="header-anchor" href="#undefined-behaviour"><span>Undefined Behaviour</span></a></h2><p>Now we&#39;ll destroy the universe by going outside the bounds we allocated:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> third_coord</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> p1</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">load</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">third_coord</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">third_coord</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>179
85
</code></pre><p>These are garbage values, we&#39;ve done something very dangerous that will cause undefined behaviour, and allow attackers to access data they shouldn&#39;t.</p><p>Let&#39;s keep going down this dangerous path:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">p1 </span><span style="color:#89DDFF;">+=</span><span style="color:#FF9E64;"> 2</span></span></span></code></pre></div><p>Now the pointer is pointer is pointing straight to unallocated garbage data! Let&#39;s have a look:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p1</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p1</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>179
85
0
0
</code></pre><p>Oh no! Let&#39;s move back to where we were and free the memory, if we forget to free the memory that&#39;ll cause a memory leak if this code runs a lot:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">p1 </span><span style="color:#89DDFF;">-=</span><span style="color:#FF9E64;"> 2</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">free</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><h2 id="build-your-own-struct" tabindex="-1"><a class="header-anchor" href="#build-your-own-struct"><span>Build your own struct</span></a></h2><p>It&#39;s easy to make mistakes when playing with pointers, let&#39;s create a struct to reduce the surface area of potential errors.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Coords</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Pointer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">Coord</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> length</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __init__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">inout</span><span style="color:#E0AF68;"> self</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> length</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">)</span><span style="color:#9D7CD8;font-style:italic;"> raises</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> Pointer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">Coord</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">length</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">        memset_zero</span><span style="color:#9ABDF5;">(</span><span style="color:#F7768E;">self</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">data</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> length</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">length </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> length</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __getitem__</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">self</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> index</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">)</span><span style="color:#9D7CD8;font-style:italic;"> raises</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#A9B1D6;"> Coord</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        if</span><span style="color:#A9B1D6;"> index </span><span style="color:#BB9AF7;">&gt;</span><span style="color:#F7768E;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">length </span><span style="color:#89DDFF;">-</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">            raise</span><span style="color:#7AA2F7;"> Error</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Trying to access index out of bounds</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        return</span><span style="color:#F7768E;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">load</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">index</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#51597D;font-style:italic;">    # This is what will run when the object goes out of scope</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __del__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">owned</span><span style="color:#E0AF68;"> self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        return</span><span style="color:#F7768E;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">free</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><p>We&#39;ve added some initial safety, this is the bare minimum but instead of allowing potential undefined behaviour, we&#39;re causing the program to throw an error when accessing an index out of bounds:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> coords</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> Coords</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">5</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">coords</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">5</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>Error: Trying to access index out of bounds
</code></pre><p>Experiment with your own safety checks and adding functions utilizing the pointer safely, Mojo gives you the power to do whatever you want with pointers, but <a href="https://youtu.be/P9qCFIVlNyM?t=12" target="_blank" rel="noopener noreferrer">always remember what uncle ben said</a></p>`,56)),p(a)])}const F=n(r,[["render",c],["__file","Pointer.html.vue"]]),d=JSON.parse('{"path":"/guides/std/Pointer/Pointer.html","title":"Pointer","lang":"en-US","frontmatter":{"title":"Pointer","categories":"Pointer\\n","usage":"Store an address to any type, allowing you to allocate, load and modify single instances or arrays of the type on the heap\\n"},"headers":[{"level":2,"title":"Import","slug":"import","link":"#import","children":[]},{"level":2,"title":"Initialization","slug":"initialization","link":"#initialization","children":[]},{"level":2,"title":"Operators","slug":"operators","link":"#operators","children":[]},{"level":2,"title":"Register Passable","slug":"register-passable","link":"#register-passable","children":[]},{"level":2,"title":"Storing Values","slug":"storing-values","link":"#storing-values","children":[]},{"level":2,"title":"Undefined Behaviour","slug":"undefined-behaviour","link":"#undefined-behaviour","children":[]},{"level":2,"title":"Build your own struct","slug":"build-your-own-struct","link":"#build-your-own-struct","children":[]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/std/Pointer/Pointer.md"}');export{F as comp,d as data};
