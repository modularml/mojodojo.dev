import{_ as n,c as l,a as e,d as o,r as p,o as t}from"./app-CGzBYgfx.js";const c={};function r(i,s){const a=p("CommentService");return t(),l("div",null,[s[0]||(s[0]=e(`<h1 id="register-passable" tabindex="-1"><a class="header-anchor" href="#register-passable"><span>@register_passable</span></a></h1><p>You can decorate a type with <code>@register_passable</code> which allows a type to passed through registers and adds some generic behaviour, for example a <code>UInt32</code> is just 32 bits for the actual value and can be directly copied into and out of registers, while a <code>String</code> contains a pointer that requires special constructor and destructor behavior to allocate and free memory so it&#39;s <code>memory only</code>.</p><p>Create a type with a pair of <code>UInt32</code> and mark it register passable:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">register_passable</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Pair</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt32</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt32</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __init__</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt32</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt32</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#A9B1D6;"> Self</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        return</span><span style="color:#A9B1D6;"> Self</span><span style="color:#89DDFF;">{</span><span style="color:#A9B1D6;">a</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 4</span><span style="color:#89DDFF;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#7AA2F7;"> __copyinit__</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">self</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#A9B1D6;"> Self</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        return</span><span style="color:#A9B1D6;"> Self</span><span style="color:#89DDFF;">{</span><span style="color:#A9B1D6;">a</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 4</span><span style="color:#89DDFF;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __del__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">owned</span><span style="color:#E0AF68;"> self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">        print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">running __del__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p><code>__init__</code>, <code>__copyinit__</code> and <code>__del__</code> aren&#39;t required, this is just to indicate what you can define on a <code>@register_passable</code> type, for example printing something when the object is dropped:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">fn</span><span style="color:#7AA2F7;"> test</span><span style="color:#9ABDF5;">():</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    let</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> Pair</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">5</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 10</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> x</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    y</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">a </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 10</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    y</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">b </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 20</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">a</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">b</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">a</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">b</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">test</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><pre><code>running __del__
2 4
running __del__
10 20
</code></pre><p>Generally you will also want to mark it with the <a href="/guides/decorators/value">@value</a> decorator, which implements all the boilerplate for you:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">value</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">register_passable</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Pair</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> Pair</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">5</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 10</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">a</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">b</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>5 10
</code></pre><p>Trying to define <code>__moveinit__</code> will result in an error, the whole idea behind <code>@register_passable</code> is that you can copy it into or out of a register by copying:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">register_passable</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Pair</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#7AA2F7;"> __moveinit__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">inout</span><span style="color:#E0AF68;"> self</span><span style="color:#89DDFF;">,</span><span style="color:#9D7CD8;font-style:italic;"> owned</span><span style="color:#E0AF68;"> exisiting</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> exisiting</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">a</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> existing</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">b</span></span></span></code></pre></div><pre><code>error: Expression [11]:10:5: &#39;__moveinit__&#39; is not supported for @register_passable types, they are always movable by copying a register
    fn __moveinit__(inout self, owned exisiting: Self):
    ^

error: Expression [11]:12:18: use of unknown declaration &#39;existing&#39;, &#39;fn&#39; declarations require explicit variable declarations
        self.b = existing.b
                 ^~~~~~~~
</code></pre><h2 id="register-passable-trivial" tabindex="-1"><a class="header-anchor" href="#register-passable-trivial"><span>@register_passable(&quot;trivial&quot;)</span></a></h2><p>This means you can&#39;t define:</p><ul><li><code>__init__</code></li><li><code>__copyinit__</code></li><li><code>__moveinit__</code></li><li><code>__del__</code></li></ul><p>It&#39;s referred to as <code>trivial</code> because it is always pass by copy/value, there is no special logic required for destruction, construction, indirection or anything else. You can think of it like a <code>Int64</code> contains just 64 bits of data, generally lives on the stack, and can be copied straight into registers. You don&#39;t need any special allocation or memory freeing behaviour because it&#39;s <code>trivial</code>, copying it around everywhere is the most efficient way to use it. Right now Mojo&#39;s generics only work with trivial types because the compiler can treat these trivial types the same, while it can&#39;t generalize on objects that require special constructor and destructor behaviour. This will be resolved when <code>traits</code> are introduced.</p><p>Examples of trivial types:</p><ul><li>Arithmetic types such as <code>Int</code>, <code>Bool</code>, <code>Float64</code> etc.</li><li>Pointers (the address value is trivial, not the data being pointed to)</li><li>Arrays of other trivial types including SIMD</li><li>Struct types decorated with <code>@register_passable(&quot;trivial&quot;)</code>, that can only contain other trivial types:</li></ul><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">register_passable</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">trivial</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Pair</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span></span></span></code></pre></div>`,20)),o(a)])}const F=n(c,[["render",r],["__file","register_passable.html.vue"]]),D=JSON.parse('{"path":"/guides/decorators/register_passable.html","title":"@register_passable","lang":"en-US","frontmatter":{"usage":"Indicates the values can be passed through registers"},"headers":[{"level":2,"title":"@register_passable(\\"trivial\\")","slug":"register-passable-trivial","link":"#register-passable-trivial","children":[]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/decorators/register_passable.md"}');export{F as comp,D as data};
