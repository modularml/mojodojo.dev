import{_ as o}from"./hero-CbGtQ2Lh.js";import{_ as n,c as s,a as t,d as r,r as l,o as i}from"./app-CGzBYgfx.js";const p={};function c(d,e){const a=l("CommentService");return i(),s("div",null,[e[0]||(e[0]=t('<p><img src="'+o+`" alt="Logo"></p><h1 id="this-week-in-mojo-2023-05-12" tabindex="-1"><a class="header-anchor" href="#this-week-in-mojo-2023-05-12"><span>This Week in Mojo 2023-05-12</span></a></h1><h2 id="mojo-playground-release" tabindex="-1"><a class="header-anchor" href="#mojo-playground-release"><span>Mojo Playground Release</span></a></h2><p>The changes from <a href="https://docs.modular.com/mojo/changelog.html#week-of-2023-05-01" target="_blank" rel="noopener noreferrer">week ending 2023-05-01</a> and <a href="https://docs.modular.com/mojo/changelog.html#week-of-2023-05-08" target="_blank" rel="noopener noreferrer">week ending 2023-05-08</a> have been released to the Mojo Playground with highlights:</p><h3 id="inout" tabindex="-1"><a class="header-anchor" href="#inout"><span>inout</span></a></h3><p>The <code>inout</code> keyword replaces <code>&amp;</code> postfix to declare a mutable reference, <code>self&amp;</code> is now <code>inout self</code>:</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>struct MyVal:</span></span></span>
<span class="line"><span class="line"><span>    var val: Int</span></span></span>
<span class="line"><span class="line"><span></span></span></span>
<span class="line"><span class="line"><span>    fn __init__(inout self, val: Int):</span></span></span>
<span class="line"><span class="line"><span>        self.val = val</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>inout</code> will be familiar to Swift programmers, any mutations <code>in</code> the function will persist <code>out</code> of the function.</p><p>See justification for the naming of the keyword <a href="https://github.com/modularml/mojo/issues/7" target="_blank" rel="noopener noreferrer">here</a> and <a href="https://github.com/modularml/mojo/discussions/105" target="_blank" rel="noopener noreferrer">here</a>. To summarize <code>&amp;</code> is a heavily overloaded character, while <code>inout</code> describes exactly what&#39;s happening.</p><h3 id="generic-parameters" tabindex="-1"><a class="header-anchor" href="#generic-parameters"><span>Generic parameters</span></a></h3><p>Generic parameters would previously crash notebooks, this now works:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#A9B1D6;"> Multi</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">T</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> AnyType</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> T</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __init__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">inout</span><span style="color:#E0AF68;"> self</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> T</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> x</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> Multi</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">10</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> Multi</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><h2 id="mojo-team-content" tabindex="-1"><a class="header-anchor" href="#mojo-team-content"><span>Mojo Team Content</span></a></h2><ul><li><a href="https://www.modular.com/team/tim-davis" target="_blank" rel="noopener noreferrer">Tim Davis</a> released a <a href="https://www.modular.com/blog/our-launch-whats-next" target="_blank" rel="noopener noreferrer">blog post</a> on the launch and what&#39;s next</li><li><a href="https://www.modular.com/team/scott-main" target="_blank" rel="noopener noreferrer">Scott Main</a> added a section to the programming manual on <a href="https://docs.modular.com/mojo/programming-manual.html#argument-passing-control-and-memory-ownership" target="_blank" rel="noopener noreferrer">memory ownership</a> that clarifies value and reference semantics in Mojo.</li></ul><h2 id="community-content" tabindex="-1"><a class="header-anchor" href="#community-content"><span>Community Content</span></a></h2><ul><li>Github user <a href="https://github.com/crisadamo/mojo-lang-syntax" target="_blank" rel="noopener noreferrer">crisadamo</a> has released a VS Code extension for syntax highlighting: <a href="https://github.com/crisadamo/mojo-lang-syntax" target="_blank" rel="noopener noreferrer">mojo-lang-syntax</a> while we wait for the official language extension.</li><li>Github user <a href="https://github.com/czheo/mojo.vim" target="_blank" rel="noopener noreferrer">https://github.com/czheo</a> released a <a href="https://github.com/czheo/mojo.vim" target="_blank" rel="noopener noreferrer">vim plugin</a> for syntax highlighting</li><li>Telukso did a video where he experimented with <a href="https://www.youtube.com/watch?v=yovCqxZalJU" target="_blank" rel="noopener noreferrer">the Mojo playground</a> and the matmul notebook, giving a nice visual for matrix multiplication before diving in <a href="https://www.youtube.com/watch?v=yovCqxZalJU?t=483" target="_blank" rel="noopener noreferrer">starting at 8:08</a></li><li>Jeff Delaney responsible for <a href="https://fireship.io" target="_blank" rel="noopener noreferrer">fireship.io</a> released a <a href="https://www.youtube.com/watch?v=V4gGJ7XXlC0&amp;t=3s" target="_blank" rel="noopener noreferrer">meme filled video about Mojo</a></li><li>The Primagen who mixes comedy and tech <a href="https://www.youtube.com/watch?v=RZhTC33lStQ" target="_blank" rel="noopener noreferrer">did a reaction video</a> to Jeremy Howard&#39;s launch demo</li></ul><h2 id="new-mojo-team-answers" tabindex="-1"><a class="header-anchor" href="#new-mojo-team-answers"><span>New Mojo Team Answers</span></a></h2><h3 id="thread-safety" tabindex="-1"><a class="header-anchor" href="#thread-safety"><span>Thread Safety</span></a></h3><p>A borrowed argument is <code>safe to share</code>. It isn&#39;t enforced yet, but the model is that a borrowed argument can never alias a mutable reference.</p><p>Mojo provides the same model as Rust, which is <code>mutable XOR sharing</code> model. If you have a mutable reference to something, it is known to be unique. You can have many immutable references though.</p><h3 id="actor-model" tabindex="-1"><a class="header-anchor" href="#actor-model"><span>Actor Model</span></a></h3><p>We only have &quot;ideas&quot; not &quot;plans&quot; here. I&#39;m a fan of actors, having designed/built out a system for swift a few years ago. I think an evolved version of that would compose well and will fit nicely into our system. I think we&#39;ll want a Mutex abstraction and classes first though. See <a href="https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782" target="_blank" rel="noopener noreferrer">Swift Concurrency Manifesto</a> and <a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency/" target="_blank" rel="noopener noreferrer">Swift Concurrency Docs</a></p><p>You don&#39;t need to convince me of the value of actors, Carl Hewitt already did ðŸ™‚</p><h3 id="leading-underscore-foo-for-private-members" tabindex="-1"><a class="header-anchor" href="#leading-underscore-foo-for-private-members"><span>Leading underscore <code>_foo</code> for private members</span></a></h3><p>This is a very clear extension we could consider, highly precedented of course. In the immediate future we are focusing on building the core systems programming features in the roadmap. When that is complete, we can consider &quot;general goodness&quot; features like this.</p><h3 id="wasm-support" tabindex="-1"><a class="header-anchor" href="#wasm-support"><span>WASM Support</span></a></h3><p>The Mojo stack is perfectly set up to do this. It doesn&#39;t use garbage collection, supports very small installed binaries etc. It&#39;ll be great, we just need to make a bit more progress ðŸ˜„</p><h3 id="global-variables" tabindex="-1"><a class="header-anchor" href="#global-variables"><span>Global Variables</span></a></h3><p>Both <code>def</code> and <code>fn</code> cannot access variables outside their scope because Mojo as a language doesn&#39;t have proper global variables yet, this is a known missing feature.</p><h3 id="float-literals" tabindex="-1"><a class="header-anchor" href="#float-literals"><span>Float Literals</span></a></h3><p><code>FloatLiteral</code> is backed by <code>Float64</code> but the Mojo Playground is currently only printing to 6 decimal places. <a href="https://github.com/modularml/mojo/issues/115" target="_blank" rel="noopener noreferrer">Feature request added here</a> to print all significant digits.</p><h3 id="type-erasure-for-python-support" tabindex="-1"><a class="header-anchor" href="#type-erasure-for-python-support"><span>Type Erasure for Python Support</span></a></h3><p>This currently doesn&#39;t work in Mojo as it does in Python:</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-python;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">a </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 9</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">a</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">a </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">Hello</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">a</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p>I agree we need to decide what the model is. This <strong>must</strong> work, at least in a <code>def</code>, for python compatibility. <code>def</code> currently allows implicit declaration, but infer the type from the first assignment. The above implies that implicitly declared variables in a <code>def</code> should default to having object type (which type erases the concrete type and will allow the above).</p><p>I think this is the right/unavoidable thing to do, but I have two concerns:</p><p>We don&#39;t really have the language features in place to implement object correctly (notably need the basics of classes), so I&#39;d like to avoid switching to this model until we can make it work right.</p><p>This push us to define/create the &quot;type erasure of structs to object&quot; model so that user defined struct types can be used here. We may or may not want to do this, it isn&#39;t clear to me. There is a lot of precedent in this in the Swift world where Swift classes can be typed erased to <code>AnyObject</code> (aka <code>id</code> in ObjC) and that <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0116-id-as-any.md" target="_blank" rel="noopener noreferrer">allow dynamic dispatch in various ways</a></p><p>These are super nuanced issues and I&#39;d like to get more experience with the core language before touching into this. There is a big difference between bringing up something simple and building it really great.</p><h3 id="compile-to-shared-library" tabindex="-1"><a class="header-anchor" href="#compile-to-shared-library"><span>Compile to Shared Library</span></a></h3><p>Yes, it can be compiled as a shared library, no problem. We&#39;re not prioritizing this right now, but we&#39;ll enable this at some point</p><h3 id="mutable-reference-vs-mutable-referee" tabindex="-1"><a class="header-anchor" href="#mutable-reference-vs-mutable-referee"><span>Mutable Reference vs Mutable Referee</span></a></h3><p>An <code>immutable reference</code> can still have a <code>mutable referee</code>, this is equivalent to the difference between <code>const int*</code> and <code>int* const</code> in C.</p>`,43)),r(a)])}const u=n(p,[["render",c],["__file","2023-05-12.html.vue"]]),f=JSON.parse('{"path":"/this-week-in-mojo/2023-05-12.html","title":"This Week in Mojo 2023-05-12","lang":"en-US","frontmatter":{"title":"This Week in Mojo 2023-05-12","date":"2023-05-12T00:00:00.000Z","author":"Mojo Dojo","author_site":"https://mojodojo.dev","author_image":"https://mojodojo.dev/hero.png","feed":true},"headers":[{"level":2,"title":"Mojo Playground Release","slug":"mojo-playground-release","link":"#mojo-playground-release","children":[{"level":3,"title":"inout","slug":"inout","link":"#inout","children":[]},{"level":3,"title":"Generic parameters","slug":"generic-parameters","link":"#generic-parameters","children":[]}]},{"level":2,"title":"Mojo Team Content","slug":"mojo-team-content","link":"#mojo-team-content","children":[]},{"level":2,"title":"Community Content","slug":"community-content","link":"#community-content","children":[]},{"level":2,"title":"New Mojo Team Answers","slug":"new-mojo-team-answers","link":"#new-mojo-team-answers","children":[{"level":3,"title":"Thread Safety","slug":"thread-safety","link":"#thread-safety","children":[]},{"level":3,"title":"Actor Model","slug":"actor-model","link":"#actor-model","children":[]},{"level":3,"title":"Leading underscore _foo for private members","slug":"leading-underscore-foo-for-private-members","link":"#leading-underscore-foo-for-private-members","children":[]},{"level":3,"title":"WASM Support","slug":"wasm-support","link":"#wasm-support","children":[]},{"level":3,"title":"Global Variables","slug":"global-variables","link":"#global-variables","children":[]},{"level":3,"title":"Float Literals","slug":"float-literals","link":"#float-literals","children":[]},{"level":3,"title":"Type Erasure for Python Support","slug":"type-erasure-for-python-support","link":"#type-erasure-for-python-support","children":[]},{"level":3,"title":"Compile to Shared Library","slug":"compile-to-shared-library","link":"#compile-to-shared-library","children":[]},{"level":3,"title":"Mutable Reference vs Mutable Referee","slug":"mutable-reference-vs-mutable-referee","link":"#mutable-reference-vs-mutable-referee","children":[]}]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"this-week-in-mojo/2023-05-12.md"}');export{u as comp,f as data};
