import{_ as a,c as n,a as l,o}from"./app-CGzBYgfx.js";const p={};function e(t,s){return o(),n("div",null,s[0]||(s[0]=[l(`<div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Intrinsics </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> llvm_intrinsic</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">fn</span><span style="color:#7AA2F7;"> asrt</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">cond</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Bool</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> msg</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> StringLiteral</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        if</span><span style="color:#A9B1D6;"> cond</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">            return</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">        print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Assert Error:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> msg</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">        llvm_intrinsic</span><span style="color:#9ABDF5;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">llvm.trap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> NoneType</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;"> </span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">asrt</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">5</span><span style="color:#BB9AF7;"> ==</span><span style="color:#FF9E64;"> 10</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">5 does not equal 10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>Assert Error: 5 does not equal 10


error: Execution was interrupted, reason: signal SIGILL: illegal operand.
The process has been left at the point where it was interrupted, use &quot;thread return -x&quot; to return to the state before expression evaluation.
</code></pre><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> String </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> String</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> name</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">billy</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> domain</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> StringRef</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">gmail.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> String</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">name</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> +</span><span style="color:#A9B1D6;"> domain</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>billy@gmail.com
</code></pre>`,4)]))}const r=a(p,[["render",e],["__file","assert.html.vue"]]),i=JSON.parse('{"path":"/guides/examples/assert.html","title":"","lang":"en-US","frontmatter":{},"headers":[],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/examples/assert.md"}');export{r as comp,i as data};
