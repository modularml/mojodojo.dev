import{_ as t}from"./hero-CbGtQ2Lh.js";import{_ as o,c as n,a as i,o as a}from"./app-CGzBYgfx.js";const r={};function s(l,e){return a(),n("div",null,e[0]||(e[0]=[i('<p><img src="'+t+'" alt="Logo"></p><h1 id="this-week-in-mojo-2023-07-07" tabindex="-1"><a class="header-anchor" href="#this-week-in-mojo-2023-07-07"><span>This Week in Mojo 2023-07-07</span></a></h1><h2 id="playground-update" tabindex="-1"><a class="header-anchor" href="#playground-update"><span>Playground Update</span></a></h2><p><a href="https://docs.modular.com/mojo/changelog.html#july-2023" target="_blank" rel="noopener noreferrer">Full Changelog Here</a></p><h3 id="‚≠êÔ∏è-new" tabindex="-1"><a class="header-anchor" href="#‚≠êÔ∏è-new"><span>‚≠êÔ∏è New</span></a></h3><ul><li>Tuple expressions now work without parentheses. For example <code>a, b = b, a</code> works as you‚Äôd expect in Python.</li><li>Chained assigments <code>a = b = 42</code> and the walrus operator <code>some_function(b := 17)</code> are now supported.</li></ul><h3 id="ü¶ã-changed" tabindex="-1"><a class="header-anchor" href="#ü¶ã-changed"><span>ü¶ã Changed</span></a></h3><ul><li><p>The <code>simd_width</code> and <code>dtype_simd_width</code> functions in the TargetInfo module have been renamed to <code>simdwidthof</code>.</p></li><li><p>The <code>dtype_</code> prefix has been dropped from <code>alignof</code>, <code>sizeof</code>, and <code>bitwidthof</code>. You can now use these functions with any argument type, including <code>DType</code>.</p></li><li><p>The <code>inf</code>, <code>neginf</code>, <code>nan</code>, <code>isinf</code>, <code>isfinite</code>, and <code>isnan</code> functions were moved from the Numerics module to the Math module, to better align with Python‚Äôs library structure.</p></li></ul><h3 id="üõ†Ô∏è-fixed" tabindex="-1"><a class="header-anchor" href="#üõ†Ô∏è-fixed"><span>üõ†Ô∏è Fixed</span></a></h3><ul><li><p><a href="https://github.com/modularml/mojo/issues/253" target="_blank" rel="noopener noreferrer">Issue #253</a> Issue when accessing a struct member alias without providing parameters.</p></li><li><p><a href="https://github.com/modularml/mojo/issues/404" target="_blank" rel="noopener noreferrer">Issue #404</a>: The docs now use snake_case for variable names, which more closely conforms to Python‚Äôs style.</p></li><li><p><a href="https://github.com/modularml/mojo/issues/379" target="_blank" rel="noopener noreferrer">Issue #379</a>: Tuple limitations have been addressed and multiple return values are now supported, even without parentheses.</p></li><li><p><a href="https://github.com/modularml/mojo/issues/347" target="_blank" rel="noopener noreferrer">Issue #347</a>: Tuples no longer require parentheses.</p></li><li><p><a href="https://github.com/modularml/mojo/issues/320" target="_blank" rel="noopener noreferrer">Issue #320</a>: Python objects are now traversable via for loops.</p></li></ul><h2 id="community-content" tabindex="-1"><a class="header-anchor" href="#community-content"><span>Community Content</span></a></h2><ul><li><a href="https://mikeinnes.io" target="_blank" rel="noopener noreferrer">Mike Innes</a> wrote a blog post: <a href="https://mikeinnes.io/2023/06/06/mojo" target="_blank" rel="noopener noreferrer">Finding you Mojo</a></li></ul><h2 id="mojo-team-answers" tabindex="-1"><a class="header-anchor" href="#mojo-team-answers"><span>Mojo Team Answers</span></a></h2><h3 id="using-async-fn" tabindex="-1"><a class="header-anchor" href="#using-async-fn"><span>Using <code>async fn</code></span></a></h3><p>async fn and coroutines are a fairly powerful mechanism, and though at this time the only public way we&#39;re exposing to invoke them is directly on the same thread, the underlying mechanism is quite powerful and allows running in thread pools, etc. However, for the time being, you&#39;ll have to use our wrappers like parallelize, as the underlying functionality isn&#39;t otherwise public right now.</p><ul><li><a href="https://discord.com/channels/1087530497313357884/1126917199551012874/1126961335423483924" target="_blank" rel="noopener noreferrer">2023-07-08 Discord Alex Kirchhoff</a></li></ul><h3 id="ml-compiler-optimization-projects" tabindex="-1"><a class="header-anchor" href="#ml-compiler-optimization-projects"><span>ML Compiler optimization projects</span></a></h3><p>We believe that programmability and extensibility is actually the problem to be solved here, not just providing yet-another-special-case-ml-compiler</p><ul><li><a href="https://discord.com/channels/1087530497313357884/1103420074372644916/1125842233875243008" target="_blank" rel="noopener noreferrer">2023-07-09 Discord Chris Lattner</a></li></ul><h3 id="wasm-target" tabindex="-1"><a class="header-anchor" href="#wasm-target"><span>WASM Target</span></a></h3><p>Our first downloadable deliverable won&#39;t support WASM. This is a super interesting target for sure, but we&#39;re prioritizing getting things out with a first release, rather than blocking until we solve all the problems üôÇ</p><ul><li><a href="https://discord.com/channels/1087530497313357884/1125837200748199988/1125837669964972125" target="_blank" rel="noopener noreferrer">2023-07-05 Discord Chris Lattner</a></li></ul><h3 id="autoderef" tabindex="-1"><a class="header-anchor" href="#autoderef"><span>Autoderef</span></a></h3><p>The weirder thing to me about the rust approach with <code>autoderef</code> is how it handles smart pointers etc. The safe default is to start without <code>autoderef</code> and we can see what that does for ergonomics of the resultant libraries. Any time there has to be a stumper &quot;quiz&quot; about a language feature, it is a sign there is something wrong üòÄ. In Rust, allowing impl traits on borrows themselves is &quot;interesting&quot;. I&#39;m not sure about why that was chosen vs just allowing nominal types to implement traits, but there is probably a good reason.</p><ul><li><a href="https://discord.com/channels/1087530497313357884/1125597373956116492/1125832654584029204" target="_blank" rel="noopener noreferrer">2023-07-05 Discord Chris Lattner</a></li></ul><h3 id="init-uninitialized-objects-in-fn" tabindex="-1"><a class="header-anchor" href="#init-uninitialized-objects-in-fn"><span>Init uninitialized objects in <code>fn</code></span></a></h3><p>This is effectively how the Mojo compiler works internally, and we fudge a couple of things for sake of simplicity of model. For example, the <code>self</code> member of a <code>__del__</code> destructor is a reference, but it is &quot;magic&quot; in that it is required to be live-in and uninit-out. The self for a memory-only <code>__init__</code> has the opposite polarity, being uninit on entry and init on exit.</p><ul><li><a href="https://github.com/modularml/mojo/issues/372#issuecomment-1619181242" target="_blank" rel="noopener noreferrer">2023-07-04 Github Chris Lattner</a></li></ul><h3 id="multiple-moves-with" tabindex="-1"><a class="header-anchor" href="#multiple-moves-with"><span>Multiple Moves with <code>^</code></span></a></h3><p>The <code>^</code> operator kills a lifetime or invokes the stealing moveinit, producing a new owned RValue, so <code>^^^</code> is just repeatedly moving üôÇ. It is probably a noop in the implementation because we do move elision, I haven&#39;t checked though.</p><ul><li><a href="https://discord.com/channels/1087530497313357884/1098713601386233997/1125596235882041464" target="_blank" rel="noopener noreferrer">2023-07-04 Discord Chris Lattner</a></li></ul><h3 id="docs-internationalization" tabindex="-1"><a class="header-anchor" href="#docs-internationalization"><span>Docs Internationalization</span></a></h3><p>We have no plans to translate our content at this time or in the near future. Our products and documentation are still in their infancy and there&#39;s a long way to go before curated translation becomes a priority.</p><ul><li><a href="https://github.com/modularml/mojo/issues/163#issuecomment-1613642961" target="_blank" rel="noopener noreferrer">2023-06-30 Github Scott Main</a></li></ul><h3 id="string-uint8-implementation" tabindex="-1"><a class="header-anchor" href="#string-uint8-implementation"><span>String UInt8 implementation</span></a></h3><p>It makes sense to use <code>UInt8</code> instead of <code>Int8</code>, although users should not be working directly with the bytes within a string üòÄ. Also, we try to match C semantics here which uses <code>char *</code> for strings. There is a plan to perform optimizations on strings for example small string optimizations, so you should never depend on its layout.</p><ul><li><a href="https://github.com/modularml/mojo/issues/420#issuecomment-1615472005" target="_blank" rel="noopener noreferrer">2023-07-02 Github Abdul Dakkak</a></li></ul>',37)]))}const c=o(r,[["render",s],["__file","2023-07-07.html.vue"]]),u=JSON.parse('{"path":"/this-week-in-mojo/2023-07-07.html","title":"This Week in Mojo 2023-07-07","lang":"en-US","frontmatter":{"date":"2023-07-07T00:00:00.000Z","author":"Mojo Dojo","author_site":"https://mojodojo.dev","author_image":"https://mojodojo.dev/hero.png","feed":true,"head":[["meta",{"name":"twitter:card","content":"summary"}],["meta",{"name":"twitter:site","content":"@mojodojodev"}],["meta",{"name":"twitter:title","content":"This Week in Mojo"}],["meta",{"name":"twitter:description","content":"This week in Mojo with language updates, community content, and everything else related to Mojo"}],["meta",{"name":"twitter:image","content":"https://mojodojo.dev/hero.png"}]]},"headers":[{"level":2,"title":"Playground Update","slug":"playground-update","link":"#playground-update","children":[{"level":3,"title":"‚≠êÔ∏è New","slug":"‚≠êÔ∏è-new","link":"#‚≠êÔ∏è-new","children":[]},{"level":3,"title":"ü¶ã Changed","slug":"ü¶ã-changed","link":"#ü¶ã-changed","children":[]},{"level":3,"title":"üõ†Ô∏è Fixed","slug":"üõ†Ô∏è-fixed","link":"#üõ†Ô∏è-fixed","children":[]}]},{"level":2,"title":"Community Content","slug":"community-content","link":"#community-content","children":[]},{"level":2,"title":"Mojo Team Answers","slug":"mojo-team-answers","link":"#mojo-team-answers","children":[{"level":3,"title":"Using async fn","slug":"using-async-fn","link":"#using-async-fn","children":[]},{"level":3,"title":"ML Compiler optimization projects","slug":"ml-compiler-optimization-projects","link":"#ml-compiler-optimization-projects","children":[]},{"level":3,"title":"WASM Target","slug":"wasm-target","link":"#wasm-target","children":[]},{"level":3,"title":"Autoderef","slug":"autoderef","link":"#autoderef","children":[]},{"level":3,"title":"Init uninitialized objects in fn","slug":"init-uninitialized-objects-in-fn","link":"#init-uninitialized-objects-in-fn","children":[]},{"level":3,"title":"Multiple Moves with ^","slug":"multiple-moves-with","link":"#multiple-moves-with","children":[]},{"level":3,"title":"Docs Internationalization","slug":"docs-internationalization","link":"#docs-internationalization","children":[]},{"level":3,"title":"String UInt8 implementation","slug":"string-uint8-implementation","link":"#string-uint8-implementation","children":[]}]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"}]},"filePathRelative":"this-week-in-mojo/2023-07-07.md"}');export{c as comp,u as data};
