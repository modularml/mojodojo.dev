import{_ as e,c as o,a as n,d as l,r as t,o as p}from"./app-CGzBYgfx.js";const i={};function r(c,s){const a=t("CommentService");return p(),o("div",null,[s[0]||(s[0]=n(`<p>Contributed by <a href="https://github.com/StitchyPie" target="_blank" rel="noopener noreferrer">StitchyPie</a> and <a href="https://github.com/Lorenzobattistela" target="_blank" rel="noopener noreferrer">Lorenzobattistela</a></p><h1 id="builtinlist" tabindex="-1"><a class="header-anchor" href="#builtinlist"><span>BuiltinList</span></a></h1><p>The primitive ListLiteral class in Mojo.</p><p>A ListLiteral is a list of elements that are immutable, it only includes getter methods for accessing elements, nothing can be modified post-initialization.</p><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init</span></a></h2><p>The types can be implicit:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> list</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> [</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;">2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;">3</span><span style="color:#89DDFF;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">list</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>[1, 2, 3]
</code></pre><p>Or explicit:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> explicit_list</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> ListLiteral</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">Int</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> [</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 3</span><span style="color:#89DDFF;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">explicit_list</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>[1, 2, 3]
</code></pre><p>A ListLiteral can also contain elements of different types.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> mixed_list</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> [</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2.0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> True</span><span style="color:#89DDFF;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">mixed_list</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>[1, 2.0, True]
</code></pre><h2 id="fields" tabindex="-1"><a class="header-anchor" href="#fields"><span>fields</span></a></h2><ul><li>storage: this is the MLIR type that stores the literals, we&#39;ll force an error to see what <code>mixed_list</code> storage looks like:</li></ul><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">mixed_list</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">storage </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 0</span></span></span></code></pre></div><pre><code>error: Expression [8]:20:26: cannot implicitly convert &#39;Int&#39; value to &#39;!pop.pack&lt;[!kgen.declref&lt;_&quot;$Builtin&quot;::_&quot;$Int&quot;::_Int&gt;, !kgen.declref&lt;_&quot;$Builtin&quot;::_&quot;$FloatLiteral&quot;::_FloatLiteral&gt;, !kgen.declref&lt;_&quot;$Builtin&quot;::_&quot;$Bool&quot;::_Bool&gt;]&gt;&#39; in assignment
    mixed_list.storage = 0
                         ^

expression failed to parse (no further compiler diagnostics)
</code></pre><h2 id="len" tabindex="-1"><a class="header-anchor" href="#len"><span>len</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">len</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">mixed_list</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>3
</code></pre><h2 id="get" tabindex="-1"><a class="header-anchor" href="#get"><span>get</span></a></h2><p>Get a list element at the given index with the element type, note that we have to specify the index of the element and the type of the element we&#39;re retrieving, refer to <a href="https://docs.modular.com/mojo/programming-manual.html#defining-parameterized-types-and-functions" target="_blank" rel="noopener noreferrer">parametrization here</a></p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">mixed_list</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">get</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> Int</span><span style="color:#9ABDF5;">]())</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">mixed_list</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">get</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">2</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> Bool</span><span style="color:#9ABDF5;">]())</span></span></span></code></pre></div><pre><code>1
True
</code></pre><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> -</span><span style="color:#FF9E64;">1</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#0DB9D7;">__index__</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>-1
</code></pre>`,27)),l(a)])}const y=e(i,[["render",r],["__file","BuiltinList.html.vue"]]),F=JSON.parse('{"path":"/guides/builtins/BuiltinList.html","title":"BuiltinList","lang":"en-US","frontmatter":{"title":"BuiltinList","categories":"Builtins","usage":"The primitive ListLiteral class in Mojo"},"headers":[{"level":2,"title":"init","slug":"init","link":"#init","children":[]},{"level":2,"title":"fields","slug":"fields","link":"#fields","children":[]},{"level":2,"title":"len","slug":"len","link":"#len","children":[]},{"level":2,"title":"get","slug":"get","link":"#get","children":[]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/builtins/BuiltinList.md"}');export{y as comp,F as data};
