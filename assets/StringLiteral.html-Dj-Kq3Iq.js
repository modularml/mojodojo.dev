import{_ as n,c as l,a as o,d as e,r as p,o as t}from"./app-CGzBYgfx.js";const r={};function c(i,s){const a=p("CommentService");return t(),l("div",null,[s[0]||(s[0]=o(`<p>Contributed by <a href="https://github.com/Lorenzobattistela" target="_blank" rel="noopener noreferrer">Lorenzobattistela</a></p><h1 id="stringliteral" tabindex="-1"><a class="header-anchor" href="#stringliteral"><span>StringLiteral</span></a></h1><p>This type represents a string literal.</p><p>String literals are all null-terminated for compatibility with C APIs, but this is subject to change. String literals store their length as an integer, and this does not include the null terminator.</p><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> StringLiteral </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">Literal</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">StringLiteral</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>Literal
StringLiteral
</code></pre><h2 id="fields" tabindex="-1"><a class="header-anchor" href="#fields"><span>fields</span></a></h2><ul><li><code>value</code>: The MLIR storage for the string literal, lets force an error to see the type:</li></ul><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">y</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">value </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 0</span></span></span></code></pre></div><pre><code>error: Expression [3]:19:15: cannot implicitly convert &#39;Int&#39; value to &#39;string&#39; in assignment
    y.value = 0
              ^

expression failed to parse (no further compiler diagnostics)
</code></pre><p>You can also print it directly:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">value</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>StringLiteral
</code></pre><h2 id="bool" tabindex="-1"><a class="header-anchor" href="#bool"><span>bool</span></a></h2><p>Convert the string to a boolean value. True if the string is not empty, false otherwise.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#0DB9D7;">__bool__</span><span style="color:#9ABDF5;">())</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">a</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#89DDFF;">.</span><span style="color:#0DB9D7;">__bool__</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>False
True
</code></pre><h2 id="equal" tabindex="-1"><a class="header-anchor" href="#equal"><span>equal</span></a></h2><p>Compare the equality of two strings, receiving other StringLiteral as parameter. True if equal.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">abc</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">abc</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> z</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">ab</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#0DB9D7;">__eq__</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#0DB9D7;">__eq__</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">z</span><span style="color:#9ABDF5;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x </span><span style="color:#BB9AF7;">==</span><span style="color:#C0CAF5;"> y</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>True
False
True
</code></pre><h2 id="not-equal" tabindex="-1"><a class="header-anchor" href="#not-equal"><span>not equal</span></a></h2><p>Compare the inequality of two strings, receiving other StringLiteral as parameter. True if not equal.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">abc</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">abc</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> z</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">ab</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#0DB9D7;">__ne__</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#0DB9D7;">__ne__</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">z</span><span style="color:#9ABDF5;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x </span><span style="color:#BB9AF7;">!=</span><span style="color:#C0CAF5;"> y</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>False
True
False
</code></pre><h2 id="add" tabindex="-1"><a class="header-anchor" href="#add"><span>add</span></a></h2><p>Concatenate two StringLiterals.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">hello </span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">world</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> c</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#0DB9D7;">__add__</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> d</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A9B1D6;"> y</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">c</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">d</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>hello world
hello world
</code></pre><h2 id="len" tabindex="-1"><a class="header-anchor" href="#len"><span>len</span></a></h2><p>Return the length of the string.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">string</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#0DB9D7;">__len__</span><span style="color:#9ABDF5;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">len</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>6
6
</code></pre><h2 id="data" tabindex="-1"><a class="header-anchor" href="#data"><span>data</span></a></h2><p>Get raw pointer to the underlying data.</p><p><code>pointer&lt;scalar&lt;si8&gt;&gt;</code> is the return type of the method. It means that the method returns a pointer to the underlying data of the string literal. The \`si8\`\` indicates that the data is a sequence of 8-bit signed integers, which is a common way to represent characters in a string.</p><p>So, if you have a StringLiteral object, you can call data() on it to get a pointer to its underlying data. This could be useful if you need to pass the string data to a function that requires a pointer, or if you want to perform low-level operations on the string data.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">string</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">data</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">x </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">alo</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>string
alo
</code></pre>`,40)),e(a)])}const D=n(r,[["render",c],["__file","StringLiteral.html.vue"]]),d=JSON.parse('{"path":"/guides/builtins/StringLiteral.html","title":"StringLiteral","lang":"en-US","frontmatter":{"title":"StringLiteral","categories":"Builtins","usage":"This type represents a string literal. String literals are all null-terminated for compatibility with C APIs, but this is subject to change. String literals store their length as an integer, and this does not include the null terminator."},"headers":[{"level":2,"title":"init","slug":"init","link":"#init","children":[]},{"level":2,"title":"fields","slug":"fields","link":"#fields","children":[]},{"level":2,"title":"bool","slug":"bool","link":"#bool","children":[]},{"level":2,"title":"equal","slug":"equal","link":"#equal","children":[]},{"level":2,"title":"not equal","slug":"not-equal","link":"#not-equal","children":[]},{"level":2,"title":"add","slug":"add","link":"#add","children":[]},{"level":2,"title":"len","slug":"len","link":"#len","children":[]},{"level":2,"title":"data","slug":"data","link":"#data","children":[]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/builtins/StringLiteral.md"}');export{D as comp,d as data};
