import{_ as n,c as l,a as o,d as p,r as e,o as t}from"./app-CGzBYgfx.js";const c={};function r(F,s){const a=e("CommentService");return t(),l("div",null,[s[0]||(s[0]=o(`<h1 id="ndbuffer" tabindex="-1"><a class="header-anchor" href="#ndbuffer"><span>NDBuffer</span></a></h1><p>A buffer that doesn&#39;t own the underlying memory, it allows you to represent an N-Dimensional shape both statically, and dynamically at runtime</p><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>import</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> DType </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> DType</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> List </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> DimList</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Pointer </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> DTypePointer</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Buffer </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> NDBuffer</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Memory </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> memset_zero</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> List </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> VariadicList</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> DimList</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Assert </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> assert_param</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Functional </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> unroll</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Index </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> StaticIntTuple</span></span></span></code></pre></div><h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>setup</span></a></h2><p>This struct allows you to carry around the pointer that owns the data the NDBuffer is pointing to.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#A9B1D6;"> Tensor</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> DimList</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> DType</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#0DB9D7;">type</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> buffer</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> NDBuffer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> type</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __init__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">inout</span><span style="color:#E0AF68;"> self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">        let</span><span style="color:#C0CAF5;"> size</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">product</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#9ABDF5;">]()</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">get</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#0DB9D7;">type</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">size</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">        memset_zero</span><span style="color:#9ABDF5;">(</span><span style="color:#F7768E;">self</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">data</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> size</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> NDBuffer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> type</span><span style="color:#9ABDF5;">](</span><span style="color:#F7768E;">self</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">data</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __del__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">owned</span><span style="color:#E0AF68;"> self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">free</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init</span></a></h2><p>We can now create a shape statically and store data, but be careful there&#39;s no safety checks on our struct yet:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> Tensor</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">3</span><span style="color:#89DDFF;">,</span><span style="color:#7AA2F7;"> DimList</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">simd_store</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">uint8</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 5</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 6</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 7</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><p>Let&#39;s try using the buffer now:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">num_elements</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>8
</code></pre><h2 id="indexing" tabindex="-1"><a class="header-anchor" href="#indexing"><span>indexing</span></a></h2><p>We can also access elements via it&#39;s 3D shape:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>1
</code></pre><p>Notice incrementing the first dimension will get the 5th item:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>5
</code></pre><p>And incrementing the 2nd dimension will increment get the 7th:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>7
</code></pre><p>To set an item we need to use a <code>StaticIntTuple</code></p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">StaticIntTuple</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">3</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#9ABDF5;">)]</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 50</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>50
</code></pre><h2 id="runtime-bounds-checking" tabindex="-1"><a class="header-anchor" href="#runtime-bounds-checking"><span>runtime bounds checking</span></a></h2><p>There are no safety checks on our struct yet so we can access data out of bounds:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>0
</code></pre><p>This is a big safety concern so let&#39;s make our own <code>__get__</code> method that enforces bounds checking:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#A9B1D6;"> Tensor</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> DimList</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> DType</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#0DB9D7;">type</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> buffer</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> NDBuffer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> type</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __init__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">inout</span><span style="color:#E0AF68;"> self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">        let</span><span style="color:#C0CAF5;"> size</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">product</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#9ABDF5;">]()</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">get</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#0DB9D7;">type</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">size</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">        memset_zero</span><span style="color:#9ABDF5;">(</span><span style="color:#F7768E;">self</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">data</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> size</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> NDBuffer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> type</span><span style="color:#9ABDF5;">](</span><span style="color:#F7768E;">self</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">data</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __del__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">owned</span><span style="color:#E0AF68;"> self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">free</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __getitem__</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">self</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> *</span><span style="color:#E0AF68;">idx</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">)</span><span style="color:#9D7CD8;font-style:italic;"> raises</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#0DB9D7;">type</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#9ABDF5;">]:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">rank</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">            if</span><span style="color:#A9B1D6;"> idx</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#BB9AF7;"> &gt;=</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">value</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">get</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">                raise</span><span style="color:#7AA2F7;"> Error</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">index out of bounds</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        return</span><span style="color:#F7768E;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">](</span><span style="color:#7AA2F7;">VariadicList</span><span style="color:#9ABDF5;">[</span><span style="color:#7AA2F7;">Int</span><span style="color:#9ABDF5;">](</span><span style="color:#C0CAF5;">idx</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> Tensor</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">3</span><span style="color:#89DDFF;">,</span><span style="color:#7AA2F7;"> DimList</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint64</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">simd_store</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 5</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 6</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 7</span><span style="color:#9ABDF5;">))</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>Error: index out of bounds
</code></pre><h2 id="compile-time-bounds-checking" tabindex="-1"><a class="header-anchor" href="#compile-time-bounds-checking"><span>compile time bounds checking</span></a></h2><p>This bounds checking isn&#39;t optimal because it has a runtime cost, we could create a separate function that checks the shape at compile time:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#A9B1D6;"> Tensor</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> DimList</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> DType</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#0DB9D7;">type</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> buffer</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> NDBuffer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> type</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __init__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">inout</span><span style="color:#E0AF68;"> self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">        let</span><span style="color:#C0CAF5;"> size</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">product</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#9ABDF5;">]()</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">get</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#0DB9D7;">type</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">size</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">        memset_zero</span><span style="color:#9ABDF5;">(</span><span style="color:#F7768E;">self</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">data</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> size</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> NDBuffer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">,</span><span style="color:#0DB9D7;"> type</span><span style="color:#9ABDF5;">](</span><span style="color:#F7768E;">self</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">data</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#7AA2F7;"> get</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">*</span><span style="color:#E0AF68;">idx</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">](</span><span style="color:#E0AF68;">self</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#0DB9D7;">type</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#9ABDF5;">]:</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        @</span><span style="color:#7AA2F7;">parameter</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        fn</span><span style="color:#7AA2F7;"> check_dim</span><span style="color:#9ABDF5;">[</span><span style="color:#E0AF68;">i</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">]():</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">            assert_param</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">idx</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#BB9AF7;"> &lt;</span><span style="color:#A9B1D6;"> shape</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">value</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">get</span><span style="color:#9ABDF5;">()]()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">        unroll</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">rank</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> check_dim</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        return</span><span style="color:#F7768E;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">](</span><span style="color:#7AA2F7;">VariadicList</span><span style="color:#9ABDF5;">[</span><span style="color:#7AA2F7;">Int</span><span style="color:#9ABDF5;">](</span><span style="color:#C0CAF5;">idx</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><p><code>*idx</code> is a variadic list of <code>Int</code>, so you can pass in as many as you like.</p><p><code>get()</code> Creates a closure named <code>check_dim</code> decorated by <code>@parameter</code> so it runs at compile time, it&#39;s checking that each item in <code>*idx</code> is less then the same dimension in the static <code>shape</code>. <code>unroll</code> is used to run it at compile-time <code>i</code> amount of times.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> Tensor</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">3</span><span style="color:#89DDFF;">,</span><span style="color:#7AA2F7;"> DimList</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint64</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">simd_store</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">uint64</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 5</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 6</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 7</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">get</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#9ABDF5;">]())</span></span></span></code></pre></div><pre><code>Expression [12]:17:56:                             constraint failed: param assertion failed
            assert_param[idx[i] &lt; shape.value[i].get()]()
                                                       ^

expression failed to parse (no further compiler diagnostics)
</code></pre><h2 id="simd-load" tabindex="-1"><a class="header-anchor" href="#simd-load"><span>simd_load</span></a></h2><p>Loads SIMD values from the specified position, e.g.:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>[0, 1, 2, 3]
[4, 5, 6, 7]
[6, 7]
</code></pre><h2 id="simd-store" tabindex="-1"><a class="header-anchor" href="#simd-store"><span>simd_store</span></a></h2><p>Store a SIMD vector at the given ND index, for example here we take the first 4 numbers, multiply them by 8, and store them in the second half of the tensor.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">simd_store</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">StaticIntTuple</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">3</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">]()</span><span style="color:#89DDFF;"> *</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">]())</span></span></span></code></pre></div><pre><code>[0, 1, 2, 3, 0, 8, 16, 24]
</code></pre><h2 id="fields" tabindex="-1"><a class="header-anchor" href="#fields"><span>Fields</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">dynamic_dtype</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">dynamic_shape</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">dynamic_stride</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">is_contiguous</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>uint64
(2, 2, 2)
(4, 2, 1)
True
</code></pre><h2 id="bytecount" tabindex="-1"><a class="header-anchor" href="#bytecount"><span>bytecount</span></a></h2><p>The total amount of bytes in the buffer</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">bytecount</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>64
</code></pre><h2 id="dim" tabindex="-1"><a class="header-anchor" href="#dim"><span>dim</span></a></h2><p>The dimension at the given index</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">dim</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]())</span></span></span></code></pre></div><pre><code>2
</code></pre><h2 id="fill" tabindex="-1"><a class="header-anchor" href="#fill"><span>fill</span></a></h2><p>Fills the buffer in chunks of you SIMD register size, but doesn&#39;t go out of bounds</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">fill</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">10</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>10
</code></pre><h2 id="flatten" tabindex="-1"><a class="header-anchor" href="#flatten"><span>flatten</span></a></h2><p>Returns a buffer of 1 dimension</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">flatten</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">7</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>10
</code></pre><h2 id="get-nd-index" tabindex="-1"><a class="header-anchor" href="#get-nd-index"><span>get_nd_index</span></a></h2><p>Get the N-Dimensional Index needed to access the nth item</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">get_nd_index</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">5</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>(1, 0, 1)
</code></pre><h2 id="get-rank" tabindex="-1"><a class="header-anchor" href="#get-rank"><span>get_rank</span></a></h2><p>The total amount of dimensions</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">get_rank</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>3
</code></pre><h2 id="get-shape" tabindex="-1"><a class="header-anchor" href="#get-shape"><span>get_shape</span></a></h2><p>A tuple indicating dimensions of the buffer.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">get_shape</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>(2, 2, 2)
</code></pre><h2 id="num-elements" tabindex="-1"><a class="header-anchor" href="#num-elements"><span>num_elements</span></a></h2><p>Calculates the total number of elements in the buffer, works the same as <code>size</code></p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">num_elements</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>8
</code></pre><h2 id="size" tabindex="-1"><a class="header-anchor" href="#size"><span>size</span></a></h2><p>Calculates the total number of elements in the buffer, works the same as <code>num_elements</code></p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">size</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>8
</code></pre><h2 id="stack-allocation" tabindex="-1"><a class="header-anchor" href="#stack-allocation"><span>stack_allocation</span></a></h2><p>Return a new NDBuffer that is backed by stack allocated data, aligned to the DType</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> new</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">stack_allocation</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">new</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">size</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>8
</code></pre><h2 id="stride" tabindex="-1"><a class="header-anchor" href="#stride"><span>stride</span></a></h2><p>The step size of a dimension, e.g. in a <code>2x2x2</code> tensor if you increment the first dimension, you&#39;ll skip over 4 elements:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">stride</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>4
</code></pre><p>Lets prove this by seeing how we could access the 4th element:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">get_nd_index</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>(1, 0, 0)
</code></pre><h2 id="zero" tabindex="-1"><a class="header-anchor" href="#zero"><span>zero</span></a></h2><p>Set all elements to the zero value</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">zero</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">get</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">]())</span></span></span></code></pre></div><pre><code>0
</code></pre>`,104)),p(a)])}const D=n(c,[["render",r],["__file","NDBuffer.html.vue"]]),i=JSON.parse(`{"path":"/guides/std/Buffer/NDBuffer.html","title":"NDBuffer","lang":"en-US","frontmatter":{"title":"NDBuffer","categories":"Buffer","usage":"A buffer that doesn't own the underlying memory, it allows you to represent an N-Dimensional shape both statically, and dynamically at runtime"},"headers":[{"level":2,"title":"import","slug":"import","link":"#import","children":[]},{"level":2,"title":"setup","slug":"setup","link":"#setup","children":[]},{"level":2,"title":"init","slug":"init","link":"#init","children":[]},{"level":2,"title":"indexing","slug":"indexing","link":"#indexing","children":[]},{"level":2,"title":"runtime bounds checking","slug":"runtime-bounds-checking","link":"#runtime-bounds-checking","children":[]},{"level":2,"title":"compile time bounds checking","slug":"compile-time-bounds-checking","link":"#compile-time-bounds-checking","children":[]},{"level":2,"title":"simd_load","slug":"simd-load","link":"#simd-load","children":[]},{"level":2,"title":"simd_store","slug":"simd-store","link":"#simd-store","children":[]},{"level":2,"title":"Fields","slug":"fields","link":"#fields","children":[]},{"level":2,"title":"bytecount","slug":"bytecount","link":"#bytecount","children":[]},{"level":2,"title":"dim","slug":"dim","link":"#dim","children":[]},{"level":2,"title":"fill","slug":"fill","link":"#fill","children":[]},{"level":2,"title":"flatten","slug":"flatten","link":"#flatten","children":[]},{"level":2,"title":"get_nd_index","slug":"get-nd-index","link":"#get-nd-index","children":[]},{"level":2,"title":"get_rank","slug":"get-rank","link":"#get-rank","children":[]},{"level":2,"title":"get_shape","slug":"get-shape","link":"#get-shape","children":[]},{"level":2,"title":"num_elements","slug":"num-elements","link":"#num-elements","children":[]},{"level":2,"title":"size","slug":"size","link":"#size","children":[]},{"level":2,"title":"stack_allocation","slug":"stack-allocation","link":"#stack-allocation","children":[]},{"level":2,"title":"stride","slug":"stride","link":"#stride","children":[]},{"level":2,"title":"zero","slug":"zero","link":"#zero","children":[]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/std/Buffer/NDBuffer.md"}`);export{D as comp,i as data};
