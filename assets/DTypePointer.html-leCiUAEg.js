import{_ as n,c as o,a as l,d as p,r as e,o as t}from"./app-CGzBYgfx.js";const r={};function c(i,s){const a=e("CommentService");return t(),o("div",null,[s[0]||(s[0]=l(`<h1 id="dtypepointer" tabindex="-1"><a class="header-anchor" href="#dtypepointer"><span>DTypePointer</span></a></h1><p>Store an address with a given DType, allowing you to allocate, load and modify data with convenient access to SIMD operations.</p><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>Import</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Pointer </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> DTypePointer</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> DType </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> DType</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Random </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> rand</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Memory </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> memset_zero</span></span></span></code></pre></div><h2 id="initialization" tabindex="-1"><a class="header-anchor" href="#initialization"><span>Initialization</span></a></h2><p>Create two variables to store a new address on the heap and allocate 8 bytes</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> p1</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> p2</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><h2 id="operators" tabindex="-1"><a class="header-anchor" href="#operators"><span>Operators</span></a></h2><p>Perform operations with the two pointers</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">if</span><span style="color:#A9B1D6;"> p1</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">p1 is not null</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">p1 is at a lower address than p2:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> p1 </span><span style="color:#BB9AF7;">&lt;</span><span style="color:#C0CAF5;"> p2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">p1 and p2 are equal:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> p1 </span><span style="color:#BB9AF7;">==</span><span style="color:#C0CAF5;"> p2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">p1 and p2 are not equal:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> p1 </span><span style="color:#BB9AF7;">!=</span><span style="color:#C0CAF5;"> p2</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>p1 is not null
p1 is at a lower address than p2: False
p1 and p2 are equal: False
p1 and p2 are not equal: True
</code></pre><h2 id="storing-and-loading-simd-data" tabindex="-1"><a class="header-anchor" href="#storing-and-loading-simd-data"><span>Storing and loading SIMD data</span></a></h2><p>First zero all the values for this exercise to make it clear what&#39;s happening.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7AA2F7;">memset_zero</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p>this zeroes 8 bytes as <code>p1</code> a pointer of type <code>UInt8</code>, if it was <code>UInt16</code> it would set 8*16 bits to 0</p><p>Grab the 8 values and print them:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> all_data</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> p1</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">all_data</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>[0, 0, 0, 0, 0, 0, 0, 0]
</code></pre><p>Store some random data in only half of the 8 bytes:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7AA2F7;">rand</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">p1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">all_data</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>[0, 0, 0, 0, 0, 0, 0, 0]
</code></pre><p>Take note that the <code>all_data</code> variable does not contain a reference to the heap, it&#39;s a sequential 8 bytes on the stack or in a register, so we don&#39;t see the changed data yet.</p><p>We need to load the data from the heap to see what&#39;s now at the address:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">all_data </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> p1</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">all_data</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>[0, 33, 193, 117, 0, 0, 0, 0]
</code></pre><p>Now lets grab the first half, add 1 to the first 4 bytes with a single instruction SIMD (Single Instruction, Multiple Data) and store it in the second half</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> half</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> p1</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">half </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> half </span><span style="color:#89DDFF;">+</span><span style="color:#FF9E64;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_store</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">4</span><span style="color:#89DDFF;">,</span><span style="color:#7AA2F7;"> half</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p>Load the data again and print it</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">all_data </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> p1</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">all_data</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>[0, 33, 193, 117, 1, 34, 194, 118]
</code></pre><p>You&#39;re now taking advantage of the hardware by using specialized instructions to perform an operation on 32/64 bytes of data at once, instead of 4 separate operations, and these operations can also run through special registers that can significantly boost performance.</p><h2 id="pointer-arithmetic" tabindex="-1"><a class="header-anchor" href="#pointer-arithmetic"><span>Pointer Arithmetic</span></a></h2><p>Lets use the same data from the SIMD operators, and shift the pointer address up by 1 byte</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">p1 </span><span style="color:#89DDFF;">+=</span><span style="color:#FF9E64;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">all_data </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> p1</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">all_data</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>[33, 193, 117, 1, 34, 194, 118, 0]
</code></pre><p>You can see we&#39;re now starting from the 2nd byte, and we have a garbage value at the end that we haven&#39;t allocated! Be careful as this is undefined behaviour (UB) and a security vulnerability, attackers could take advantage of this. You need to be very careful not to introduce a problem like this when using pointers.</p><p>Lets move back to where we were:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">p1 </span><span style="color:#89DDFF;">-=</span><span style="color:#FF9E64;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">all_data </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> p1</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">all_data</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>[0, 33, 193, 117, 1, 34, 194, 118]
</code></pre><h2 id="freeing-memory" tabindex="-1"><a class="header-anchor" href="#freeing-memory"><span>Freeing memory</span></a></h2><p>If we don&#39;t free the memory, the operating system won&#39;t be able to reclaim it, this is one way memory leaks are created.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">free</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><p>We can introduce a security vulnerability by using the pointer after free and accessing the garbage data that&#39;s not allocated, don&#39;t do this!</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">all_data </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> p1</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">all_data</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>[99, 206, 45, 92, 5, 0, 0, 0]
</code></pre><h2 id="build-your-own-struct" tabindex="-1"><a class="header-anchor" href="#build-your-own-struct"><span>Build your own Struct</span></a></h2><p>Playing with pointers is dangerous! Lets build a safe <code>struct</code> abstraction around it that interacts with the pointer, so we have less surface area for potential mistakes.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Matrix</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __init__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">inout</span><span style="color:#E0AF68;"> self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#9ECE6A;">Initialize the struct and set everything to zero</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#F7768E;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">64</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">        memset_zero</span><span style="color:#9ABDF5;">(</span><span style="color:#F7768E;">self</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">data</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 64</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#51597D;font-style:italic;">    # This is what will run when the object goes out of scope</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __del__</span><span style="color:#9ABDF5;">(</span><span style="color:#9D7CD8;font-style:italic;">owned</span><span style="color:#E0AF68;"> self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        return</span><span style="color:#F7768E;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">free</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#51597D;font-style:italic;">    # This allows you to use let x = obj[1]</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __getitem__</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">self</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> row</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">]:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        return</span><span style="color:#F7768E;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#7AA2F7;">row </span><span style="color:#89DDFF;">*</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#51597D;font-style:italic;">    # This allows you to use obj[1] = SIMD[DType.uint8]()</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#0DB9D7;"> __setitem__</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">self</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> row</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">]):</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        return</span><span style="color:#F7768E;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_store</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#7AA2F7;">row </span><span style="color:#89DDFF;">*</span><span style="color:#FF9E64;"> 8</span><span style="color:#89DDFF;">,</span><span style="color:#7AA2F7;"> data</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    fn</span><span style="color:#7AA2F7;"> print_all</span><span style="color:#9ABDF5;">(</span><span style="color:#E0AF68;">self</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">        print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">--------matrix--------</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">        for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">            print</span><span style="color:#9ABDF5;">(</span><span style="color:#F7768E;">self</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><p>Initializing the matrix will set all the values to 0, please take note that the <code>matrix</code> identifier is immutable with <code>let</code>, but we&#39;re still able to modify the data because the <code>data</code> member is <code>var</code></p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> matrix</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> Matrix</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">matrix</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">print_all</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><pre><code>--------matrix--------
[0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
</code></pre><p>We can loop through and set the values, one row at a time with SIMD using the abstraction we built</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    matrix</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> i</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">matrix</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">print_all</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><pre><code>--------matrix--------
[0, 0, 0, 0, 0, 0, 0, 0]
[1, 1, 1, 1, 1, 1, 1, 1]
[2, 2, 2, 2, 2, 2, 2, 2]
[3, 3, 3, 3, 3, 3, 3, 3]
[4, 4, 4, 4, 4, 4, 4, 4]
[5, 5, 5, 5, 5, 5, 5, 5]
[6, 6, 6, 6, 6, 6, 6, 6]
[7, 7, 7, 7, 7, 7, 7, 7]
</code></pre><p>Because it&#39;s returning a <code>SIMD[DType.u8, 8]</code>, we can also modify the column value using <code>__setitem__</code> from the SIMD implementation</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    matrix</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">[</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 9</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    matrix</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">[</span><span style="color:#FF9E64;">7</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 9</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">matrix</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">print_all</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><pre><code>--------matrix--------
[9, 0, 0, 0, 0, 0, 0, 9]
[9, 1, 1, 1, 1, 1, 1, 9]
[9, 2, 2, 2, 2, 2, 2, 9]
[9, 3, 3, 3, 3, 3, 3, 9]
[9, 4, 4, 4, 4, 4, 4, 9]
[9, 5, 5, 5, 5, 5, 5, 9]
[9, 6, 6, 6, 6, 6, 6, 9]
[9, 7, 7, 7, 7, 7, 7, 9]
</code></pre><p>For one more example lets try grabbing the fourth row, doubling it, and then writing that to the first row</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> fourth_row</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> matrix</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">3</span><span style="color:#9ABDF5;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;\\n</span><span style="color:#9ECE6A;">forth row:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> fourth_row</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">fourth_row </span><span style="color:#89DDFF;">*=</span><span style="color:#FF9E64;"> 2</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">modified:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> fourth_row</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;\\n&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">matrix</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> fourth_row</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">matrix</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">print_all</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><pre><code>forth row: [9, 3, 3, 3, 3, 3, 3, 9]
modified: [18, 6, 6, 6, 6, 6, 6, 18] 

--------matrix--------
[18, 6, 6, 6, 6, 6, 6, 18]
[9, 1, 1, 1, 1, 1, 1, 9]
[9, 2, 2, 2, 2, 2, 2, 9]
[9, 3, 3, 3, 3, 3, 3, 9]
[9, 4, 4, 4, 4, 4, 4, 9]
[9, 5, 5, 5, 5, 5, 5, 9]
[9, 6, 6, 6, 6, 6, 6, 9]
[9, 7, 7, 7, 7, 7, 7, 9]
</code></pre><p>We&#39;ve created a specific specialized data type that is optimized to perform operations on a matrix of data 8*8 bytes wide, experiment yourself, create a function to manipulate the entire matrix of 64 bytes using SIMD.</p><p>Mojo gives you the power to do whatever you want with pointers, but <a href="https://youtu.be/P9qCFIVlNyM?t=12" target="_blank" rel="noopener noreferrer">always remember what uncle ben said</a></p>`,62)),p(a)])}const F=n(r,[["render",c],["__file","DTypePointer.html.vue"]]),D=JSON.parse('{"path":"/guides/std/Pointer/DTypePointer.html","title":"DTypePointer","lang":"en-US","frontmatter":{"title":"DTypePointer","categories":"Pointer","usage":"Store an address with a given DType, allowing you to allocate, load and modify data with convenient access to SIMD operations."},"headers":[{"level":2,"title":"Import","slug":"import","link":"#import","children":[]},{"level":2,"title":"Initialization","slug":"initialization","link":"#initialization","children":[]},{"level":2,"title":"Operators","slug":"operators","link":"#operators","children":[]},{"level":2,"title":"Storing and loading SIMD data","slug":"storing-and-loading-simd-data","link":"#storing-and-loading-simd-data","children":[]},{"level":2,"title":"Pointer Arithmetic","slug":"pointer-arithmetic","link":"#pointer-arithmetic","children":[]},{"level":2,"title":"Freeing memory","slug":"freeing-memory","link":"#freeing-memory","children":[]},{"level":2,"title":"Build your own Struct","slug":"build-your-own-struct","link":"#build-your-own-struct","children":[]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/std/Pointer/DTypePointer.md"}');export{F as comp,D as data};
