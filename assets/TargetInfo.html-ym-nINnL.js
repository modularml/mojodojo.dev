import{_ as n,c as e,a as o,d as l,r as p,o as t}from"./app-CGzBYgfx.js";const i={};function r(c,s){const a=p("CommentService");return t(),e("div",null,[s[0]||(s[0]=o(`<h2 id="width-alignment-and-size" tabindex="-1"><a class="header-anchor" href="#width-alignment-and-size"><span>Width, Alignment and Size</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> TargetInfo </span><span style="color:#7DCFFF;">import</span><span style="color:#89DDFF;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    alignof</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    bitwidthof</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    simdwidthof</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    simdbitwidth</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    simd_byte_width</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    sizeof</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> DType </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> DType</span></span></span></code></pre></div><h3 id="alignof" tabindex="-1"><a class="header-anchor" href="#alignof"><span>alignof</span></a></h3><p>You can check the alignment of a type, in the struct below it returns 4 bytes:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Foo</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt8</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt32</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">alignof</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">Foo</span><span style="color:#9ABDF5;">]())</span></span></span></code></pre></div><pre><code>4
</code></pre><p>This means each instance of <code>Foo</code> will start at a memory address that is a multiple of 4 bytes, there will also be 3 bytes of padding to accommodate the <code>UInt8</code>.</p><p>You can use this for anything falling under an <code>AnyType</code>:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">alignof</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">UInt64</span><span style="color:#9ABDF5;">]())</span></span></span></code></pre></div><pre><code>8
</code></pre><h3 id="bitwidthof" tabindex="-1"><a class="header-anchor" href="#bitwidthof"><span>bitwidthof</span></a></h3><p>The same as <a href="#alignof">alignof</a> above, but uses bits instead of bytes:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Foo</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt8</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> UInt32</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">bitwidthof</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">Foo</span><span style="color:#9ABDF5;">]())</span></span></span></code></pre></div><pre><code>64
</code></pre><p>There will be 24 bits of padding for this type as each object can only be placed at multiples of 64 in memory</p><h3 id="simdwidthof" tabindex="-1"><a class="header-anchor" href="#simdwidthof"><span>simdwidthof</span></a></h3><p>How many of the type can fit into the targets SIMD register, e.g. to see how many uint64&#39;s can be processed with a single instruction:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">simdwidthof</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">uint64</span><span style="color:#9ABDF5;">]())</span></span></span></code></pre></div><pre><code>8
</code></pre><h3 id="simd-bit-width" tabindex="-1"><a class="header-anchor" href="#simd-bit-width"><span>simd_bit_width</span></a></h3><p>The total amount of bits that can be processed at the same time on the host systems SIMD register</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">simdbitwidth</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>512
</code></pre><p>Take note how the result of <code>dtype_simd_width[DType.uint64]()</code> shows you how many of that data type can fit into the systems SIMD register, e.g. 512 / 64 = 8</p><h3 id="simd-byte-width" tabindex="-1"><a class="header-anchor" href="#simd-byte-width"><span>simd_byte_width</span></a></h3><p>The total amount of bytes that can be processed at the same time on the host systems SIMD register</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">simd_byte_width</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>64
</code></pre><h3 id="sizeof" tabindex="-1"><a class="header-anchor" href="#sizeof"><span>sizeof</span></a></h3><p>The total size in bytes of an <code>AnyType</code></p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">sizeof</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">UInt8</span><span style="color:#9ABDF5;">]())</span></span></span></code></pre></div><pre><code>1
</code></pre><h2 id="os" tabindex="-1"><a class="header-anchor" href="#os"><span>OS</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> TargetInfo </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> os_is_linux</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> os_is_macos</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> os_is_windows</span></span></span></code></pre></div><h3 id="os-is-linux" tabindex="-1"><a class="header-anchor" href="#os-is-linux"><span>os_is_linux</span></a></h3><p>Example of conditional compilation based on the operating system:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">parameter</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">if</span><span style="color:#7AA2F7;"> os_is_linux</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">this will be included in the binary</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">else</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">this will be eliminated from compilation process</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>this will be included in the binary
</code></pre><h3 id="os-is-macos" tabindex="-1"><a class="header-anchor" href="#os-is-macos"><span>os_is_macos</span></a></h3><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">os_is_macos</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>False
</code></pre><h3 id="os-is-windows" tabindex="-1"><a class="header-anchor" href="#os-is-windows"><span>os_is_windows</span></a></h3><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">os_is_windows</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>False
</code></pre><h2 id="arch" tabindex="-1"><a class="header-anchor" href="#arch"><span>Arch</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> TargetInfo </span><span style="color:#7DCFFF;">import</span><span style="color:#89DDFF;"> (</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    has_avx</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    has_avx2</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    has_avx512f</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    has_intel_amx</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    has_neon</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    has_sse4</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    is_apple_m1</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">)</span></span></span></code></pre></div><h3 id="has-avx" tabindex="-1"><a class="header-anchor" href="#has-avx"><span>has_avx</span></a></h3><p><a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions" target="_blank" rel="noopener noreferrer">Advanced Vector Extensions</a> are instructions for x86 SIMD support, they are commonly used in Intel and AMD chips, the first version of AVX first began shipping in 2011.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">has_avx</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>True
</code></pre><h3 id="has-avx2" tabindex="-1"><a class="header-anchor" href="#has-avx2"><span>has_avx2</span></a></h3><p><a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions" target="_blank" rel="noopener noreferrer">Advanced Vector Extensions 2</a> are instructions for x86 SIMD support, expanding integer commands to 256 bits, and started shipping in 2013l</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">has_avx2</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>True
</code></pre><h3 id="has-avx512f" tabindex="-1"><a class="header-anchor" href="#has-avx512f"><span>has_avx512f</span></a></h3><p><a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions" target="_blank" rel="noopener noreferrer">Advanced Vector Extensions 512</a> added 512 bit support for x86 SIMD instructions, and began shipping in 2016.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">has_avx512f</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>True
</code></pre><h3 id="has-intel-amx" tabindex="-1"><a class="header-anchor" href="#has-intel-amx"><span>has_intel_amx</span></a></h3><p><a href="https://en.wikipedia.org/wiki/Advanced_Matrix_Extensions" target="_blank" rel="noopener noreferrer">AMX</a> is an extension to x86 with instructions for special units designed for ML workloads such as TMUL which is a matrix multiply on BF16, it began shipping in 2023.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">has_intel_amx</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>False
</code></pre><h3 id="has-neon" tabindex="-1"><a class="header-anchor" href="#has-neon"><span>has_neon</span></a></h3><p><a href="https://en.wikipedia.org/wiki/ARM_architecture_family#Advanced_SIMD_(Neon)" target="_blank" rel="noopener noreferrer">Neon</a> also known as Advanced SIMD is an ARM extension for specialized instructions.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">has_neon</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>False
</code></pre><h3 id="has-sse4" tabindex="-1"><a class="header-anchor" href="#has-sse4"><span>has_sse4</span></a></h3><p><a href="https://en.wikipedia.org/wiki/SSE4" target="_blank" rel="noopener noreferrer">SSE4</a> is the older SIMD instruction extension for x86 processors introduced in the mid 2000&#39;s</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">has_sse4</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>True
</code></pre><h3 id="is-apple-m1" tabindex="-1"><a class="header-anchor" href="#is-apple-m1"><span>is_apple_m1</span></a></h3><p>The <a href="https://en.wikipedia.org/wiki/Apple_M1" target="_blank" rel="noopener noreferrer">Apple M1 chip</a> contains a ARM CPU that supports Neon 128 bit instructions and GPU accessible through <a href="https://developer.apple.com/metal/" target="_blank" rel="noopener noreferrer">metal API</a></p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">is_apple_m1</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>False
</code></pre>`,74)),l(a)])}const h=n(i,[["render",r],["__file","TargetInfo.html.vue"]]),g=JSON.parse('{"path":"/guides/std/TargetInfo.html","title":"TargetInfo","lang":"en-US","frontmatter":{"title":"TargetInfo","categories":"TargetInfo","usage":"Functions related to determining host info such as OS, CPU, width etc."},"headers":[{"level":2,"title":"Width, Alignment and Size","slug":"width-alignment-and-size","link":"#width-alignment-and-size","children":[{"level":3,"title":"alignof","slug":"alignof","link":"#alignof","children":[]},{"level":3,"title":"bitwidthof","slug":"bitwidthof","link":"#bitwidthof","children":[]},{"level":3,"title":"simdwidthof","slug":"simdwidthof","link":"#simdwidthof","children":[]},{"level":3,"title":"simd_bit_width","slug":"simd-bit-width","link":"#simd-bit-width","children":[]},{"level":3,"title":"simd_byte_width","slug":"simd-byte-width","link":"#simd-byte-width","children":[]},{"level":3,"title":"sizeof","slug":"sizeof","link":"#sizeof","children":[]}]},{"level":2,"title":"OS","slug":"os","link":"#os","children":[{"level":3,"title":"os_is_linux","slug":"os-is-linux","link":"#os-is-linux","children":[]},{"level":3,"title":"os_is_macos","slug":"os-is-macos","link":"#os-is-macos","children":[]},{"level":3,"title":"os_is_windows","slug":"os-is-windows","link":"#os-is-windows","children":[]}]},{"level":2,"title":"Arch","slug":"arch","link":"#arch","children":[{"level":3,"title":"has_avx","slug":"has-avx","link":"#has-avx","children":[]},{"level":3,"title":"has_avx2","slug":"has-avx2","link":"#has-avx2","children":[]},{"level":3,"title":"has_avx512f","slug":"has-avx512f","link":"#has-avx512f","children":[]},{"level":3,"title":"has_intel_amx","slug":"has-intel-amx","link":"#has-intel-amx","children":[]},{"level":3,"title":"has_neon","slug":"has-neon","link":"#has-neon","children":[]},{"level":3,"title":"has_sse4","slug":"has-sse4","link":"#has-sse4","children":[]},{"level":3,"title":"is_apple_m1","slug":"is-apple-m1","link":"#is-apple-m1","children":[]}]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/std/TargetInfo.md"}');export{h as comp,g as data};
