import{_ as n,c as o,a as e,d as l,r as p,o as t}from"./app-CGzBYgfx.js";const r={};function c(i,s){const a=p("CommentService");return t(),o("div",null,[s[0]||(s[0]=e(`<h1 id="assert" tabindex="-1"><a class="header-anchor" href="#assert"><span>Assert</span></a></h1><h2 id="assert-param" tabindex="-1"><a class="header-anchor" href="#assert-param"><span>assert_param</span></a></h2><p>Asserts that the condition is true in the <code>parameter / comptime</code> domain, used to place constraints on functions</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Assert </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> assert_param</span></span></span></code></pre></div><p>We can put compile time assertions in the ensure that the two numbers passed in are positive</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">fn</span><span style="color:#7AA2F7;"> add_positives</span><span style="color:#9ABDF5;">[</span><span style="color:#E0AF68;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">]()</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#A9B1D6;"> UInt8</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    assert_param</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">x </span><span style="color:#BB9AF7;">&gt;</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    assert_param</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">y </span><span style="color:#BB9AF7;">&gt;</span><span style="color:#FF9E64;"> 0</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    return</span><span style="color:#A9B1D6;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A9B1D6;"> y</span></span></span></code></pre></div><p>Let&#39;s get the result that&#39;s calculated at compile time</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> res</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> add_positives</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">res</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>6
</code></pre><p>Now we&#39;ll introduce the error so you can see how it looks, it will always be at the end of the error message:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">add_positives</span><span style="color:#9ABDF5;">[</span><span style="color:#89DDFF;">-</span><span style="color:#FF9E64;">2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#9ABDF5;">]()</span></span></span></code></pre></div><pre><code>Expression [2]:6:24:               constraint failed: param assertion failed
    assert_param[x &gt; 0]()
                       ^

expression failed to parse (no further compiler diagnostics)
</code></pre><p>You can also add a message to change the compiler error output:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">fn</span><span style="color:#7AA2F7;"> add_positives</span><span style="color:#9ABDF5;">[</span><span style="color:#E0AF68;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#E0AF68;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">]()</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#A9B1D6;"> UInt8</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    assert_param</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">x </span><span style="color:#BB9AF7;">&gt;</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">x is not positve, use a positve number over 0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    assert_param</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">y </span><span style="color:#BB9AF7;">&gt;</span><span style="color:#FF9E64;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">y is not positve, use a positve number over 0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    return</span><span style="color:#A9B1D6;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A9B1D6;"> y</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> res</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> add_positives</span><span style="color:#9ABDF5;">[</span><span style="color:#89DDFF;">-</span><span style="color:#FF9E64;">2</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> -</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">res</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><pre><code>Expression [5]:6:73:               constraint failed: x is not positve, use a positve number over 0
    assert_param[x &gt; 0, &quot;x is not positve, use a positve number over 0&quot;]()
                                                                        ^

expression failed to parse (no further compiler diagnostics)
</code></pre><h2 id="debug-assert" tabindex="-1"><a class="header-anchor" href="#debug-assert"><span>debug_assert</span></a></h2><p>Asserts that the condition is true in debug builds, and is removed from the compilation process in release builds</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Assert </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> debug_assert</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">fn</span><span style="color:#7AA2F7;"> test_debug_assert</span><span style="color:#9ABDF5;">[</span><span style="color:#E0AF68;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">](</span><span style="color:#E0AF68;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">):</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">    debug_assert</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x </span><span style="color:#BB9AF7;">==</span><span style="color:#FF9E64;"> 42</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">x is not equal to 42</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">    debug_assert</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y </span><span style="color:#BB9AF7;">==</span><span style="color:#FF9E64;"> 42</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">y is not equal to 42</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">test_debug_assert</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><p>debug_assert doesn&#39;t work in the playground because it&#39;s not a debug build.</p>`,19)),l(a)])}const F=n(r,[["render",c],["__file","Assert.html.vue"]]),d=JSON.parse('{"path":"/guides/std/Assert.html","title":"Assert","lang":"en-US","frontmatter":{"title":"Assert","categories":"Assert","usage":"Place constraints on functions that are checked at compile time, and check conditions only in debug builds"},"headers":[{"level":2,"title":"assert_param","slug":"assert-param","link":"#assert-param","children":[]},{"level":2,"title":"debug_assert","slug":"debug-assert","link":"#debug-assert","children":[]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/std/Assert.md"}');export{F as comp,d as data};
