import{_ as n,c as o,a as l,d as e,r as p,o as t}from"./app-CGzBYgfx.js";const c={};function r(i,s){const a=p("CommentService");return t(),o("div",null,[s[0]||(s[0]=l(`<h1 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer"><span>Buffer</span></a></h1><p>The buffer doesn&#39;t own the underlying memory, it&#39;s a view over data that is owned by another object</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Buffer </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> Buffer</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> DType </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> DType</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Pointer </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> DTypePointer</span></span></span></code></pre></div><p>Allocate 8 <code>uint8</code> and pass that pointer into the buffer:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> p</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> DTypePointer</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">alloc</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> Buffer</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#9ABDF5;">](</span><span style="color:#7AA2F7;">p</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><h2 id="zero" tabindex="-1"><a class="header-anchor" href="#zero"><span>zero</span></a></h2><p>Zero all the valuees to make sure no garbage data is used:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">zero</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>[0, 0, 0, 0, 0, 0, 0, 0]
</code></pre><h2 id="get-item-and-set-item" tabindex="-1"><a class="header-anchor" href="#get-item-and-set-item"><span>Get Item and Set Item</span></a></h2><p>Loop through and set each item:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">len</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">))</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    x</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> i</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>[0, 1, 2, 3, 4, 5, 6, 7]
</code></pre><h2 id="copy-init" tabindex="-1"><a class="header-anchor" href="#copy-init"><span>Copy Init</span></a></h2><p>Copy the buffer <code>x</code> to <code>y</code>, change the dynamic size to 4, and multiply all the values by 10</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> x</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">y</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">dynamic_size </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 4</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">dynamic_size</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    y</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> *=</span><span style="color:#FF9E64;"> 10</span></span></span></code></pre></div><p>Now print the values from the original buffer <code>x</code>, to show they point to the same data:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>[0, 10, 20, 30, 4, 5, 6, 7]
</code></pre><h2 id="simd-store" tabindex="-1"><a class="header-anchor" href="#simd-store"><span>simd_store</span></a></h2><p>Utilize Single Instruction Mutliple Data by manipulating 32 bytes of data at the same time:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> first_half</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;"> *</span><span style="color:#FF9E64;"> 2</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">let</span><span style="color:#C0CAF5;"> second_half</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;"> *</span><span style="color:#FF9E64;"> 10</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">simd_store</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> first_half</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">simd_store</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">4</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> second_half</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>[0, 20, 40, 60, 40, 50, 60, 70]
</code></pre><h2 id="simd-nt-store" tabindex="-1"><a class="header-anchor" href="#simd-nt-store"><span>simd_nt_store</span></a></h2><p><code>nt</code> is non-temporal</p><p>Skips the cache for memory that isn&#39;t going to be accessed soon, so if you have a large amount of data it doesn&#39;t fill up the cache and block something else that would benefit from quick access.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">simd_nt_store</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> second_half</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>[40, 50, 60, 70, 40, 50, 60, 70]
</code></pre><h2 id="simd-fill" tabindex="-1"><a class="header-anchor" href="#simd-fill"><span>simd_fill</span></a></h2><p>Store the value in the argument for chunks of the width provided in the parameter</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">simd_fill</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">10</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>[10, 10, 10, 10, 10, 10, 10, 10]
</code></pre><h2 id="stack-allocation" tabindex="-1"><a class="header-anchor" href="#stack-allocation"><span>stack_allocation</span></a></h2><p>Returns a buffer with the data allocated to the stack</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">stack_allocation</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>[10, 10, 10, 10, 10, 10, 10, 10]
</code></pre><h2 id="bytecount" tabindex="-1"><a class="header-anchor" href="#bytecount"><span>bytecount</span></a></h2><p>Count the total bytes</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">bytecount</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><pre><code>8
</code></pre><h2 id="aligned-simd-store" tabindex="-1"><a class="header-anchor" href="#aligned-simd-store"><span>aligned_simd_store</span></a></h2><p>Some registers work better with different alignments e.g. AVX-512 performs better with 64 bit alignment, so you might want padding for a type like a UInt32</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">aligned_simd_store</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 5</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><h2 id="aligned-simd-load" tabindex="-1"><a class="header-anchor" href="#aligned-simd-load"><span>aligned_simd_load</span></a></h2><p>Some registers work better with different alignments e.g. AVX-512 performs better with 64 bit alignment, so you might want padding for a type like a UInt32</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">aligned_simd_load</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 8</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>[5, 5, 5, 5, 5, 5, 5, 5]
</code></pre><h2 id="aligned-stack-allocation" tabindex="-1"><a class="header-anchor" href="#aligned-stack-allocation"><span>aligned_stack_allocation</span></a></h2><p>Allocate to the stack with a given alignment for extra padding</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">aligned_stack_allocation</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">]()</span></span></span></code></pre></div><h2 id="prefetch" tabindex="-1"><a class="header-anchor" href="#prefetch"><span>prefetch</span></a></h2><p>Specifies hows soon until the data will be visited again and how the data will be used, to optimize for the cache</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Intrinsics </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> PrefetchOptions</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">prefetch</span><span style="color:#9ABDF5;">[</span><span style="color:#7AA2F7;">PrefetchOptions</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">for_read</span><span style="color:#9ABDF5;">()</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">high_locality</span><span style="color:#9ABDF5;">()](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div>`,53)),e(a)])}const y=n(c,[["render",r],["__file","Buffer.html.vue"]]),F=JSON.parse(`{"path":"/guides/std/Buffer/Buffer.html","title":"Buffer","lang":"en-US","frontmatter":{"title":"Buffer","categories":"Buffer","usage":"The buffer doesn't own the underlying memory, it's a view over data that is owned by another object"},"headers":[{"level":2,"title":"zero","slug":"zero","link":"#zero","children":[]},{"level":2,"title":"Get Item and Set Item","slug":"get-item-and-set-item","link":"#get-item-and-set-item","children":[]},{"level":2,"title":"Copy Init","slug":"copy-init","link":"#copy-init","children":[]},{"level":2,"title":"simd_store","slug":"simd-store","link":"#simd-store","children":[]},{"level":2,"title":"simd_nt_store","slug":"simd-nt-store","link":"#simd-nt-store","children":[]},{"level":2,"title":"simd_fill","slug":"simd-fill","link":"#simd-fill","children":[]},{"level":2,"title":"stack_allocation","slug":"stack-allocation","link":"#stack-allocation","children":[]},{"level":2,"title":"bytecount","slug":"bytecount","link":"#bytecount","children":[]},{"level":2,"title":"aligned_simd_store","slug":"aligned-simd-store","link":"#aligned-simd-store","children":[]},{"level":2,"title":"aligned_simd_load","slug":"aligned-simd-load","link":"#aligned-simd-load","children":[]},{"level":2,"title":"aligned_stack_allocation","slug":"aligned-stack-allocation","link":"#aligned-stack-allocation","children":[]},{"level":2,"title":"prefetch","slug":"prefetch","link":"#prefetch","children":[]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/std/Buffer/Buffer.md"}`);export{y as comp,F as data};
