import{_ as n,c as o,a as e,d as l,r as p,o as t}from"./app-CGzBYgfx.js";const c={};function r(i,s){const a=p("CommentService");return t(),o("div",null,[s[0]||(s[0]=e(`<p>Contributed by <a href="https://github.com/Alex19578" target="_blank" rel="noopener noreferrer">Alex1957</a></p><h1 id="inlinedfixedvector" tabindex="-1"><a class="header-anchor" href="#inlinedfixedvector"><span>InlinedFixedVector</span></a></h1><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>import</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> Vector </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> InlinedFixedVector</span></span></span></code></pre></div><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init</span></a></h2><p>You can reserve memory to add elements without the cost of copying everything if it grows too large.</p><p>Statically allocate 4 elements, and reserve a capacity of 8 elements</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> vec</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> InlinedFixedVector</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><h2 id="append" tabindex="-1"><a class="header-anchor" href="#append"><span>append</span></a></h2><p>To add elements to the vector, you can use the <code>append</code> method:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">vec</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">append</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">10</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">vec</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">append</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">20</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">len</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>6
</code></pre><h2 id="variables" tabindex="-1"><a class="header-anchor" href="#variables"><span>variables</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">capacity</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">current_size</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">dynamic_data</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec</span><span style="color:#89DDFF;">.</span><span style="color:#C0CAF5;">static_data</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>8
6
10
10
</code></pre><h2 id="indexing" tabindex="-1"><a class="header-anchor" href="#indexing"><span>indexing</span></a></h2><p>You can access and assign elements using indexes</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>No bounds checking, can access garbage data</p></div><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>10
</code></pre><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">vec</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 42</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>42
</code></pre><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Setting elements this way won&#39;t increase the <code>len</code> so may lead to errors, you should only use <code>append</code> to add a new element, and use this to modify existing elements</p></div><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">len</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec</span><span style="color:#9ABDF5;">))</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">vec</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">6</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 10</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">len</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><pre><code>6
6
</code></pre><h2 id="copying" tabindex="-1"><a class="header-anchor" href="#copying"><span>copying</span></a></h2><p>This will result in a shallow copy, it&#39;ll be a pointer to the same location in memory:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> vec2</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> vec</span></span></span></code></pre></div><p>If we modify <code>vec</code> then <code>vec2</code> will also be updated:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">vec</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 99</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec2</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>99
</code></pre><p>Use deep copy to copy all the data to a different location in memory so it&#39;s independent from the original:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> vec3</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> vec</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">deepcopy</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><p>Modifying the original now won&#39;t effect the new copy:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">vec</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 100</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec3</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>42
</code></pre><h2 id="clear" tabindex="-1"><a class="header-anchor" href="#clear"><span>clear</span></a></h2><p>Deallocates the data in the vector</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">vec</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">clear</span><span style="color:#9ABDF5;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">vec</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><pre><code>0
</code></pre>`,40)),l(a)])}const y=n(c,[["render",r],["__file","InlinedFixedVector.html.vue"]]),F=JSON.parse('{"path":"/guides/std/Vector/InlinedFixedVector.html","title":"InlinedFixedVector","lang":"en-US","frontmatter":{"categories":"Vector","usage":"Contains a statically known vector size, but can also grow dynamically at runtime"},"headers":[{"level":2,"title":"import","slug":"import","link":"#import","children":[]},{"level":2,"title":"init","slug":"init","link":"#init","children":[]},{"level":2,"title":"append","slug":"append","link":"#append","children":[]},{"level":2,"title":"variables","slug":"variables","link":"#variables","children":[]},{"level":2,"title":"indexing","slug":"indexing","link":"#indexing","children":[]},{"level":2,"title":"copying","slug":"copying","link":"#copying","children":[]},{"level":2,"title":"clear","slug":"clear","link":"#clear","children":[]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/std/Vector/InlinedFixedVector.md"}');export{y as comp,F as data};
