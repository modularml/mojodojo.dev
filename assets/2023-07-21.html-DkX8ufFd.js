import{_ as o}from"./hero-CbGtQ2Lh.js";import{_ as a,c as n,a as s,o as t}from"./app-CGzBYgfx.js";const i={};function l(r,e){return t(),n("div",null,e[0]||(e[0]=[s('<p><img src="'+o+`" alt="Logo"></p><h1 id="this-week-in-mojo-2023-07-21" tabindex="-1"><a class="header-anchor" href="#this-week-in-mojo-2023-07-21"><span>This Week in Mojo 2023-07-21</span></a></h1><h2 id="official-content" tabindex="-1"><a class="header-anchor" href="#official-content"><span>Official Content</span></a></h2><h3 id="proposal" tabindex="-1"><a class="header-anchor" href="#proposal"><span>Proposal</span></a></h3><p>Jeff Niu has put forward a <a href="https://github.com/modularml/mojo/discussions/466" target="_blank" rel="noopener noreferrer">Mojo and Dynamism proposal</a> for how Mojo will handle Python dynamic behaviour, with a ladder type system:</p><ul><li><code>fn</code> for fully optimized static behavior</li><li><code>def</code> will by default use vtables and have the ability to inline method calls for better performance</li><li><code>def</code> opt-in <code>@dynamic</code> decorator to match Python behaviour while retaining some performance benefits such as no GIL. Python to Mojo conversion tool to automatically add this decorator.</li><li>Importing a Python module will work the same as it does now will full CPython ABI interop but no performance improvement</li></ul><h3 id="roadmap-addition" tabindex="-1"><a class="header-anchor" href="#roadmap-addition"><span>Roadmap addition</span></a></h3><p>New section added to the roadmap document <a href="https://docs.modular.com/mojo/roadmap.html#overall-priorities" target="_blank" rel="noopener noreferrer">overall priorities</a>:</p><p>Mojo is still in early development and many language features will arrive in the coming months. We are highly focused on building Mojo the right way (for the long-term), so we want to fully build-out the core Mojo language features before we work on other dependent features and enhancements.</p><p>Currently, that means we are focused on the core system programming features that are essential to Mojo‚Äôs mission, and as outlined in the following sections of this roadmap.</p><p>In the near-term, we will not prioritize ‚Äúgeneral goodness‚Äù work such as:</p><ul><li>Adding syntactic sugar and short-hands for Python.</li><li>Adding features from other languages that are missing from Python (such as public/private declarations).</li><li>Tackling broad Python ecosystem challenges like packaging.</li></ul><p>If you have encountered any bugs with current Mojo behavior, please submit an issue on GitHub.</p><p>If you have ideas about how to improve the core Mojo features, we prefer that you first look for similar topics or start a new conversation about it in our GitHub Discussions.</p><p>We also consider Mojo to be a new member of the Python family, so if you have suggestions to improve the experience with Python, we encourage you to propose these ‚Äúgeneral goodness‚Äù enhancements through the formal PEP process.</p><h2 id="community-content" tabindex="-1"><a class="header-anchor" href="#community-content"><span>Community Content</span></a></h2><ul><li>New Blog post from mojodojo.dev: <a href="https://mojodojo.dev/blog/2023-07-17-rust-or-mojo-ai.html" target="_blank" rel="noopener noreferrer">Rust or Mojo for the future of AI?</a></li></ul><h2 id="mojo-playground-update" tabindex="-1"><a class="header-anchor" href="#mojo-playground-update"><span>Mojo Playground Update</span></a></h2><h3 id="‚≠êÔ∏è-new" tabindex="-1"><a class="header-anchor" href="#‚≠êÔ∏è-new"><span>‚≠êÔ∏è New</span></a></h3><p>Mojo now includes a Limits module, which contains functions to get the max and min values representable by a type, as requested in <a href="">Issue #51</a>. The following functions moved from <code>Math</code> to <code>Limits</code>:</p><ul><li><code>inf()</code></li><li><code>neginf()</code></li><li><code>isinf()</code></li><li><code>isfinite()</code></li></ul><p>Mojo decorators are now distinguished between ‚Äúsignature‚Äù and ‚Äúbody‚Äù decorators and are ordered. Signature decorators, like <code>@register_passable</code> and <code>@parameter</code>, modify the type of declaration before the body is parsed. Body decorators, like <code>@value</code>, modify the body of declaration after it is fully parsed. Due to ordering, a signature decorator cannot be applied after a body decorator. That means the following is now invalid:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">register_passable</span><span style="color:#51597D;font-style:italic;"> # error: cannot apply signature decorator after a body one!</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#7AA2F7;">value</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">struct</span><span style="color:#C0CAF5;"> Foo</span><span style="color:#9ABDF5;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    pass</span></span></span></code></pre></div><p>Global variables can now be exported in Mojo compiled archives, using the @export decorator. Exported global variables are public symbols in compiled archives and use the variable name as its linkage name, by default. A custom linkage name can be specified with @export(&quot;new_name&quot;). This does not affect variable names in Mojo code.</p><p>Mojo now supports packages! A Mojo package is defined by placing an <code>__init__.mojo</code> or <code>__init__.üî•</code> within a directory. Other files in the same directory form modules within the package, this works exactly like it does in Python, for example:</p><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>main.üî•</span></span></span>
<span class="line"><span class="line"><span>my_package/</span></span></span>
<span class="line"><span class="line"><span>  __init__.üî•</span></span></span>
<span class="line"><span class="line"><span>  module.üî•</span></span></span>
<span class="line"><span class="line"><span>  my_other_package/</span></span></span>
<span class="line"><span class="line"><span>    __init__.üî•</span></span></span>
<span class="line"><span class="line"><span>    stuff.üî•</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="main-üî•" tabindex="-1"><a class="header-anchor" href="#main-üî•"><span>main.üî•</span></a></h4><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> my_package</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">module </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> some_function</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> my_package</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">my_other_package</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">stuff </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> SomeType</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">fn</span><span style="color:#7AA2F7;"> main</span><span style="color:#9ABDF5;">():</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">    var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> SomeType </span><span style="color:#89DDFF;">=</span><span style="color:#7AA2F7;"> some_function</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><p>Mojo now supports direct module and package imports! Modules and packages can be imported and bound to names. Module and package elements, like functions, types, global variables, and other modules, can be accessed using attribute references, like my_module.foo. Note that modules lack runtime representations, meaning module references cannot be instantiated.</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#FF9E64;"> IO</span><span style="color:#7DCFFF;"> as</span><span style="color:#A9B1D6;"> io</span></span></span>
<span class="line"><span class="line"><span style="color:#7DCFFF;">import</span><span style="color:#FF9E64;"> SIMD</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">io</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">Float32 </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 1.2</span></span></span></code></pre></div><h3 id="ü¶ã-changed" tabindex="-1"><a class="header-anchor" href="#ü¶ã-changed"><span>ü¶ã Changed</span></a></h3><p>Reverted the feature from 2023-02-13 that allowed unqualified struct members. Use the Self keyword to conveniently access struct members with bound parameters instead. This was required to fix Issue #260.</p><p>Updated the RayTracing notebook: added step 5 to create specular lighting for more realistic images and step 6 to add a background image.</p><h3 id="üõ†Ô∏è-fixed" tabindex="-1"><a class="header-anchor" href="#üõ†Ô∏è-fixed"><span>üõ†Ô∏è Fixed</span></a></h3><p><a href="https://github.com/modularml/mojo/issues/260" target="_blank" rel="noopener noreferrer">Issue #260</a> - Definitions inside structs no longer shadow definitions outside of struct definitions.</p><h2 id="mojo-team-answers" tabindex="-1"><a class="header-anchor" href="#mojo-team-answers"><span>Mojo Team Answers</span></a></h2><h3 id="top-level-code-in-repl-and-jupyter" tabindex="-1"><a class="header-anchor" href="#top-level-code-in-repl-and-jupyter"><span>Top level code in REPL and Jupyter</span></a></h3><p>The default right now is in a bit of a weird place, Mojo top-level code behaves differently than anything else. It is &quot;strict&quot; by default, however the problem right now is that top-level Mojo code is neither &quot;static&quot; in the <code>fn</code> sense or &quot;dynamic&quot; in the <code>def</code> sense. The goal is to make it behave like an imperative body of code.</p><ul><li><a href="https://github.com/modularml/mojo/discussions/411#discussioncomment-6491987" target="_blank" rel="noopener noreferrer">2023-07-20 Github Jeff Niu</a></li></ul><h3 id="only-allowing-fn-in-struct" tabindex="-1"><a class="header-anchor" href="#only-allowing-fn-in-struct"><span>Only allowing <code>fn</code> in <code>struct</code></span></a></h3><p>I can see how this might avoid some accidental use of dynamic behavior, but I&#39;m not sure why that is something we&#39;re worried about. Further, there are other issues - we need to support top level code and other things that aren&#39;t tied to an <code>fn</code> keyword. Furthermore, we want constrained dynamic classes as well (Jeff will share a doc hopefully ~this week about this) in Mojo that aren&#39;t as dynamic as Python&#39;s.</p><p>At the end of the day, we also want <code>fn</code> and <code>def</code> to be friends and get along and allow intermixing. This is a pretty important design principle - we don&#39;t want &quot;fn to be mojo&quot; and &quot;def to be legacy python code&quot;, so I see this approach working...</p><ul><li><a href="https://github.com/modularml/mojo/issues/452#issuecomment-1639473356" target="_blank" rel="noopener noreferrer">2023-07-18 Github Chris Lattner</a></li></ul><h3 id="renaming-mojo-to-python" tabindex="-1"><a class="header-anchor" href="#renaming-mojo-to-python"><span>Renaming Mojo to Python++</span></a></h3><p>Just to set expectations here, we don&#39;t plan to rename Mojo - we quite like the name üòÄ. I agree with you that Python++ is a useful working model to think about some of Mojo&#39;s goals though!</p><ul><li><a href="https://github.com/modularml/mojo/discussions/389#discussioncomment-6474134" target="_blank" rel="noopener noreferrer">2023-07-18 Github Chris Lattner</a></li></ul><h3 id="vales-region-borrow-checker" tabindex="-1"><a class="header-anchor" href="#vales-region-borrow-checker"><span>Vales region borrow checker</span></a></h3><p>Yep, I&#39;ve followed it. It is currently experimental and adds non-trivial overhead to the runtime of a program, so it will be interesting to see how it bakes out and matures in Vale. For Mojo, we&#39;re sticking with somewhat more traditional implementation approaches.</p><p>This isn&#39;t to say &quot;no, we will never do this&quot;: we need to get more experience with the planned lifetimes and other features, and if they don&#39;t work then we&#39;d consider it. That said, I can say that &quot;it isn&#39;t on our radar and it looks like there is more research to be done before we&#39;d seriously consider it&quot;.</p><ul><li><a href="https://github.com/modularml/mojo/discussions/461#discussioncomment-6474092" target="_blank" rel="noopener noreferrer">2023-07-18 Github Chris Lattner</a></li></ul>`,50)]))}const d=a(i,[["render",l],["__file","2023-07-21.html.vue"]]),h=JSON.parse('{"path":"/this-week-in-mojo/2023-07-21.html","title":"This Week in Mojo 2023-07-21","lang":"en-US","frontmatter":{"date":"2023-07-21T00:00:00.000Z","author":"Mojo Dojo","author_site":"https://mojodojo.dev","author_image":"https://mojodojo.dev/hero.png","feed":true,"head":[["meta",{"name":"twitter:card","content":"summary"}],["meta",{"name":"twitter:site","content":"@mojodojodev"}],["meta",{"name":"twitter:title","content":"This Week in Mojo"}],["meta",{"name":"twitter:description","content":"This week in Mojo with language updates, community content, and everything else related to Mojo"}],["meta",{"name":"twitter:image","content":"https://mojodojo.dev/hero.png"}]]},"headers":[{"level":2,"title":"Official Content","slug":"official-content","link":"#official-content","children":[{"level":3,"title":"Proposal","slug":"proposal","link":"#proposal","children":[]},{"level":3,"title":"Roadmap addition","slug":"roadmap-addition","link":"#roadmap-addition","children":[]}]},{"level":2,"title":"Community Content","slug":"community-content","link":"#community-content","children":[]},{"level":2,"title":"Mojo Playground Update","slug":"mojo-playground-update","link":"#mojo-playground-update","children":[{"level":3,"title":"‚≠êÔ∏è New","slug":"‚≠êÔ∏è-new","link":"#‚≠êÔ∏è-new","children":[]},{"level":3,"title":"ü¶ã Changed","slug":"ü¶ã-changed","link":"#ü¶ã-changed","children":[]},{"level":3,"title":"üõ†Ô∏è Fixed","slug":"üõ†Ô∏è-fixed","link":"#üõ†Ô∏è-fixed","children":[]}]},{"level":2,"title":"Mojo Team Answers","slug":"mojo-team-answers","link":"#mojo-team-answers","children":[{"level":3,"title":"Top level code in REPL and Jupyter","slug":"top-level-code-in-repl-and-jupyter","link":"#top-level-code-in-repl-and-jupyter","children":[]},{"level":3,"title":"Only allowing fn in struct","slug":"only-allowing-fn-in-struct","link":"#only-allowing-fn-in-struct","children":[]},{"level":3,"title":"Renaming Mojo to Python++","slug":"renaming-mojo-to-python","link":"#renaming-mojo-to-python","children":[]},{"level":3,"title":"Vales region borrow checker","slug":"vales-region-borrow-checker","link":"#vales-region-borrow-checker","children":[]}]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":1,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"this-week-in-mojo/2023-07-21.md"}');export{d as comp,h as data};
