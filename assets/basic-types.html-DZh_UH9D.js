import{_ as a,c as n,a as e,o as l}from"./app-CGzBYgfx.js";const o={};function t(p,s){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="basic-types" tabindex="-1"><a class="header-anchor" href="#basic-types"><span>Basic Types</span></a></h1><p><em>This guide is in the early stages, feedback welcomed <a href="https://github.com/mojodojodev/mojodojo.dev/discussions/categories/feedback" target="_blank" rel="noopener noreferrer">on Github</a></em></p><h2 id="pythonobject" tabindex="-1"><a class="header-anchor" href="#pythonobject"><span>PythonObject</span></a></h2><p>Let&#39;s start by running code through the Python interpreter from Mojo to get a <a href="https://docs.modular.com/mojo/MojoPython/PythonObject.html" target="_blank" rel="noopener noreferrer">PythonObject</a> back:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> python </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> Python</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> Python</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">evaluate</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ECE6A;">5 + 10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>15</span></span></span></code></pre></div><p><code>x</code> is represented in memory the same way as if we ran this in Python:</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-python;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 5</span><span style="color:#89DDFF;"> +</span><span style="color:#FF9E64;"> 10</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>15</span></span></span></code></pre></div><p>In Python, <code>x</code> is actually a pointer to <code>heap</code> allocated memory.</p><div class="hint-container tip"><p class="hint-container-title">CS Fundamentals</p><p><code>stack</code> and <code>heap</code> memory are really important concepts to understand, <a href="https://www.youtube.com/watch?v=_8-ht2AKyH4" target="_blank" rel="noopener noreferrer">this YouTube video</a> does a fantastic job of explaining it visually.</p><p>If the video doesn&#39;t make sense, for now you can use the mental model that:</p><ul><li><code>stack</code> memory is very fast but small, the size of the values are static and can&#39;t change at runtime</li><li><code>pointer</code> is an address to lookup the value somewhere else in memory</li><li><code>heap</code> memory is huge and the size can change at runtime, but needs a pointer to access the data which is relatively slow</li></ul><p>These concepts will make more sense over time</p></div><p>You can access all the Python keywords by importing <code>builtins</code>:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">py </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> Python</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">import_module</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">builtins</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">py</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">this uses the python print keyword</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>this uses the python print keyword</span></span></span></code></pre></div><p>We can now use the <code>type</code> builtin from Python to see what the dynamic type of <code>x</code> is:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">py</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">py</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">type</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>&lt;class &#39;int&#39;&gt;</span></span></span></code></pre></div><p>We can read the address that is stored in <code>x</code> on the <code>stack</code> using the Python builtin <code>id</code></p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">py</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">py</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">id</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">))</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>127017920909896</span></span></span></code></pre></div><p>This is pointing to a C object in Python, and Mojo behaves the same when using a <code>PythonObject</code>, accessing the value actually uses the address to lookup the data on the <code>heap</code> which comes with a performance cost.</p><p>This is a simplified representation of how the <code>C Object</code> being pointed to would look if it were a Python dict:</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-python;"><code><span class="line"><span class="line"><span style="color:#51597D;font-style:italic;"># md-notebook:skip</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">heap </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#FF9E64;">    44601345678945</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#9ECE6A;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#9ECE6A;">ref_count</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#9ECE6A;">size</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#9ECE6A;">digit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 8</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#51597D;font-style:italic;">        #...</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#51597D;font-style:italic;">    #...</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">}</span></span></span></code></pre></div><p>On the stack the simplified representation of <code>x</code> would look like this:</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-python;"><code><span class="line"><span class="line"><span style="color:#51597D;font-style:italic;"># md-notebook:skip</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">[</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">frame</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">variables</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 44601345678945</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> }</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">]</span></span></span></code></pre></div><p><code>x</code> contains an address that is pointing to the heap object</p><p>In Python we can change the type dynamically:</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-python;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">mojo</span><span style="color:#89DDFF;">&quot;</span></span></span></code></pre></div><p>The object in C will change its representation:</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-python;"><code><span class="line"><span class="line"><span style="color:#51597D;font-style:italic;"># md-notebook:skip</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">heap </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#FF9E64;">    44601345678945</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#9ECE6A;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#9ECE6A;">ref_count</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 1</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#9ECE6A;">size</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> 4</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#9ECE6A;">ascii</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;"> True</span><span style="color:#89DDFF;">,</span></span></span>
<span class="line"><span class="line"><span style="color:#51597D;font-style:italic;">        # utf-8 / ascii for &quot;mojo&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#9ECE6A;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span><span style="color:#FF9E64;">109</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 111</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 106</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 111</span><span style="color:#89DDFF;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#51597D;font-style:italic;">        # ...</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#89DDFF;">}</span></span></span></code></pre></div><p>Mojo also allows us to do this when the type is a <code>PythonObject</code>, it works the exact same way as it would in a Python program.</p><p>This allows the runtime to do nice convenient things for us</p><ul><li>once the <code>ref_count</code> goes to zero it will be de-allocated from the heap during garbage collection, so the OS can use that memory for something else</li><li>an integer can grow beyond 64 bits by increasing <code>size</code></li><li>we can dynamically change the <code>type</code></li><li>the data can be large or small, we don&#39;t have to think about when we should allocate to the heap</li></ul><p>However this also comes with a penalty, there is a lot of extra memory being used for the extra fields, and it takes CPU instructions to allocate the data, retrieve it, garbage collect etc.</p><p>In Mojo we can remove all that overhead:</p><h2 id="mojo-🔥" tabindex="-1"><a class="header-anchor" href="#mojo-🔥"><span>Mojo 🔥</span></a></h2><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">x </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 5</span><span style="color:#89DDFF;"> +</span><span style="color:#FF9E64;"> 10</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">x</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>15</span></span></span></code></pre></div><p>We&#39;ve just unlocked our first Mojo optimization! Instead of looking up an object on the heap via an address, <code>x</code> is now just a value on the stack with 64 bits that can be passed through registers.</p><p>This has numerous performance implications:</p><ul><li>All the expensive allocation, garbage collection, and indirection is no longer required</li><li>The compiler can do huge optimizations when it knows what the numeric type is</li><li>The value can be passed straight into registers for mathematical operations</li><li>There is no overhead associated with compiling to bytecode and running through an interpreter</li><li>The data can now be packed into a vector for huge performance gains</li></ul><p>That last one is very important in today&#39;s world, let&#39;s see how Mojo gives us the power to take advantage of modern hardware.</p><h2 id="simd" tabindex="-1"><a class="header-anchor" href="#simd"><span>SIMD</span></a></h2><p>SIMD stands for <code>Single Instruction, Multiple Data</code>, hardware now contains special registers that allow you do the same operation across a vector in a single instruction, greatly improving performance, let&#39;s take a look:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">y </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>[1, 2, 3, 4]</span></span></span></code></pre></div><p>In the definition <code>[DType.uint8, 4]</code> are known as <code>parameters</code> which means they must be compile-time known, while <code>(1, 2, 3, 4)</code> are the <code>arguments</code> which can be compile-time or runtime known.</p><p>For example user input or data retrieved from an API is runtime known, and so can&#39;t be used as a <code>parameter</code> during the compilation process.</p><p>In other languages <code>argument</code> and <code>parameter</code> often mean the same thing, in Mojo it&#39;s a very important distinction.</p><p>This is now a vector of 8 bit numbers that are packed into 32 bits, we can perform a single instruction across all of it instead of 4 separate instructions:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">y </span><span style="color:#89DDFF;">*=</span><span style="color:#FF9E64;"> 10</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">y</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>[10, 20, 30, 40]</span></span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">CS Fundamentals</p><p>Binary is how your computer stores memory, with each bit representing a <code>0</code> or <code>1</code>. Memory is typically <code>byte</code> addressable, meaning that each unique memory address points to one <code>byte</code>, which consists of 8 <code>bits</code>.</p><p>This is how the first 4 digits in a <code>uint8</code> are represented in hardware:</p><ul><li>1 = <code>00000001</code></li><li>2 = <code>00000010</code></li><li>3 = <code>00000011</code></li><li>4 = <code>00000100</code></li></ul><p>Binary <code>1</code> and <code>0</code> represents <code>ON</code> or <code>OFF</code> indicating an electrical charge in the tiny circuits of your computer.</p><p><a href="https://www.youtube.com/watch?v=RrJXLdv1i74" target="_blank" rel="noopener noreferrer">Check this video</a> if you want more information on binary.</p></div><p>We&#39;re packing the data together with SIMD on the <code>stack</code> so it can be passed into a SIMD register like this:</p><p><code>00000001</code> <code>00000010</code> <code>00000011</code> <code>00000100</code></p><p>The SIMD registers in modern CPU&#39;s are huge, lets see how big it is on this computer:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">info </span><span style="color:#7DCFFF;">import</span><span style="color:#A9B1D6;"> simdbitwidth</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#7AA2F7;">simdbitwidth</span><span style="color:#9ABDF5;">())</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>256</span></span></span></code></pre></div><p>That means we could pack 32 x 8bit numbers together and perform a calculation on all of it with a single instruction.</p><p>You can also initialize SIMD with a single argument:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">z </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">z</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>[1, 1, 1, 1]</span></span></span></code></pre></div><h2 id="scalars" tabindex="-1"><a class="header-anchor" href="#scalars"><span>Scalars</span></a></h2><p>Scalar just means a single value, you&#39;ll notice in Mojo all the numerics are SIMD scalars:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#51597D;font-style:italic;"># md-notebook:skip</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> UInt8</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">x </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">will cause an error</span><span style="color:#89DDFF;">&quot;</span></span></span></code></pre></div><div class="language-plaintext" data-highlighter="prismjs" data-ext="plaintext" data-title="plaintext"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-plaintext;"><code><span class="line"><span class="line"><span>/tmp/md-notebook/main.mojo:48:5: error: invalid redefinition of &#39;x&#39;</span></span></span>
<span class="line"><span class="line"><span>    var x = UInt8(1)</span></span></span>
<span class="line"><span class="line"><span>    ^</span></span></span>
<span class="line"><span class="line"><span>/tmp/md-notebook/main.mojo:11:5: note: previous definition here</span></span></span>
<span class="line"><span class="line"><span>    x = Python.evaluate(&#39;5 + 10&#39;)</span></span></span>
<span class="line"><span class="line"><span>    ^</span></span></span></code></pre></div><p><code>UInt8</code> is just an <code>alias</code> for <code>SIMD[DType.uint8, 1]</code>, you can see all the <a href="https://docs.modular.com/mojo/stdlib/builtin/simd" target="_blank" rel="noopener noreferrer">numeric SIMD types imported by default here</a>:</p><ul><li>Int8</li><li>Int16</li><li>Int32</li><li>Int64</li><li>UInt8</li><li>UInt16</li><li>UInt32</li><li>UInt64</li><li>Float16</li><li>BFloat16</li><li>Float32</li><li>Float64</li></ul><p>Also notice when we try and change the type it throws an error, this is because Mojo is <code>strongly typed</code></p><p>If we use existing Python modules, it will give us back a <code>PythonObject</code> that behaves the same <code>loosely typed</code> way as it does in Python:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">np </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> Python</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">import_module</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">numpy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">arr </span><span style="color:#89DDFF;">=</span><span style="color:#A9B1D6;"> np</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">ndarray</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">[</span><span style="color:#FF9E64;">5</span><span style="color:#89DDFF;">]</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">arr</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">arr </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">this will work fine</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">arr</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>[4.90821123e-310 0.00000000e+000 5.61870786e-310 3.37446836e-321</span></span></span>
<span class="line"><span class="line"><span> 2.37151510e-322]</span></span></span>
<span class="line"><span class="line"><span>this will work fine</span></span></span></code></pre></div><h2 id="strings" tabindex="-1"><a class="header-anchor" href="#strings"><span>Strings</span></a></h2><p>In Mojo <code>String</code> is heap allocated:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">s </span><span style="color:#89DDFF;">=</span><span style="color:#7AA2F7;"> String</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">Mojo🔥</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">s</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>Mojo🔥</span></span></span></code></pre></div><p><code>String</code> is contains a pointer to <code>heap</code> allocated data, this means we can load a huge amount of data into it limited only by your free RAM, and change the size of the data dynamically during runtime.</p><p>Let&#39;s cause a type error so you can see the data type underlying the String:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#51597D;font-style:italic;"># md-notebook:skip</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> x</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">_buffer</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">x </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 20</span></span></span></code></pre></div><div class="language-plaintext" data-highlighter="prismjs" data-ext="plaintext" data-title="plaintext"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-plaintext;"><code><span class="line"><span class="line"><span>/tmp/md-notebook/main.mojo:61:10: error: cannot implicitly convert &#39;List[SIMD[si8, 1]]&#39; value to &#39;PythonObject&#39; in assignment</span></span></span>
<span class="line"><span class="line"><span>    x = s._buffer</span></span></span>
<span class="line"><span class="line"><span>        ~^~~~~~~~</span></span></span></code></pre></div><p><code>List</code> is similar to a Python List, here it&#39;s storing multiple <code>int8</code>&#39;s that represent the characters, let&#39;s print the first character:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">s</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">]</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>M</span></span></span></code></pre></div><p>Now lets take a look at the decimal representation:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#7DCFFF;">from</span><span style="color:#A9B1D6;"> builtin</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">string </span><span style="color:#7DCFFF;">import</span><span style="color:#0DB9D7;"> ord</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">decimal </span><span style="color:#89DDFF;">=</span><span style="color:#0DB9D7;"> ord</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">s</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">decimal</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>77</span></span></span></code></pre></div><p>That&#39;s the ASCII code <a href="https://www.ascii-code.com/" target="_blank" rel="noopener noreferrer">shown in this table</a></p><p>We can build our own string this way, we can put in 78 which is N and 79 which is O</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> word</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> List</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">Int8</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">word</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">append</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">78</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">word</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">append</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">79</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">word</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">append</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span><span style="color:#51597D;font-style:italic;"> # Must null terminate the String</span></span></span></code></pre></div><p>We can use a <code>String</code> to copy the data to another location in memory, and it can now use the data as a String:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> word_str</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> String</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">word</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">word_str</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>NO</span></span></span></code></pre></div><p>Because it points to a different location in <code>heap</code> memory, changing the original vector won&#39;t change the value retrieved by the reference:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">word</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 78</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">word_str</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>NO</span></span></span></code></pre></div><p>There is also a <code>StringLiteral</code> type, it&#39;s written directly into the binary, when the program starts it&#39;s loaded into <code>read-only</code> memory, which means it&#39;s constant and lives for the duration of the program:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> literal</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">This is my StringLiteral</span><span style="color:#89DDFF;">&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">literal</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>This is my StringLiteral</span></span></span></code></pre></div><p>This is my StringLiteral</p><p>Force an error to see the type:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#51597D;font-style:italic;"># md-notebook:skip</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">literal </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 20</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">literal</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-plaintext" data-highlighter="prismjs" data-ext="plaintext" data-title="plaintext"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-plaintext;"><code><span class="line"><span class="line"><span>/tmp/md-notebook/main.mojo:92:15: error: cannot implicitly convert &#39;IntLiteral&#39; value to &#39;StringLiteral&#39; in assignment</span></span></span>
<span class="line"><span class="line"><span>    literal = 20</span></span></span>
<span class="line"><span class="line"><span>              ^~</span></span></span></code></pre></div><p>One thing to be aware of is that an emoji is actually four bytes, so we need a slice of 4 to have it print correctly:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">emoji </span><span style="color:#89DDFF;">=</span><span style="color:#7AA2F7;"> String</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">🔥😀</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">fire:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> emoji</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">])</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">smiley:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C0CAF5;"> emoji</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">4</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">8</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>fire: 🔥</span></span></span>
<span class="line"><span class="line"><span>smiley: 😀</span></span></span></code></pre></div><p>fire: 🔥 smiley: 😀</p><p>Check out <a href="https://mzaks.medium.com/counting-chars-with-simd-in-mojo-140ee730bd4d" target="_blank" rel="noopener noreferrer">Maxim Zaks Blog post</a> for more details.</p><h2 id="other-builtins" tabindex="-1"><a class="header-anchor" href="#other-builtins"><span>Other Builtins</span></a></h2><p>These are all of the other builtin types not discussed which are accessible without importing anything, the type can be inferred, but are explicit here for demonstration, for example <code>let bool: Bool = True</code> can just be <code>let bool = True</code>:</p><h3 id="bool" tabindex="-1"><a class="header-anchor" href="#bool"><span>Bool</span></a></h3><p>Standard Bool type</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> bool</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Bool </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> True</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">bool</span><span style="color:#BB9AF7;"> ==</span><span style="color:#FF9E64;"> False</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>False</span></span></span></code></pre></div><h3 id="int" tabindex="-1"><a class="header-anchor" href="#int"><span>Int</span></a></h3><p>Int is the same size as your architecture e.g. on a 64 bit machine it&#39;s 64 bits</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> i</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> Int </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 2</span><span style="color:#A9B1D6;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>2</span></span></span></code></pre></div><p>It can also be used as an index:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> list2</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> List</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">Int</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">list2</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">append</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">list2</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">append</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">list2</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">append</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">6</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">list2</span><span style="color:#9ABDF5;">[</span><span style="color:#C0CAF5;">i</span><span style="color:#9ABDF5;">])</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>6</span></span></span></code></pre></div><h3 id="floatliteral" tabindex="-1"><a class="header-anchor" href="#floatliteral"><span>FloatLiteral</span></a></h3><p>Float literals can now be any size and are not limited to your CPU bit size:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> float</span><span style="color:#89DDFF;">:</span><span style="color:#A9B1D6;"> FloatLiteral </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> 33244677779764631144466467797946.334646469</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">float</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>3.3244677779764633e+31</span></span></span></code></pre></div><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> f32</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> Float32</span><span style="color:#9ABDF5;">(</span><span style="color:#0DB9D7;">float</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">f32</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>3.3244676655471192e+31</span></span></span></code></pre></div><h3 id="listliteral" tabindex="-1"><a class="header-anchor" href="#listliteral"><span>ListLiteral</span></a></h3><p>When you initialize the list the types can be inferred, however when retrieving an item you need to provide the type as a <code>parameter</code>:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> list</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> [</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">Mojo🔥</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> item1</span><span style="color:#89DDFF;"> =</span><span style="color:#0DB9D7;"> list</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">get</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> StringLiteral</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">item1</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>Mojo🔥</span></span></span></code></pre></div><p>Mojo🔥</p><h3 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple"><span>Tuple</span></a></h3><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> tup</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#FF9E64;">1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#9ECE6A;">Mojo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 3</span><span style="color:#89DDFF;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> item2</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> tup</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">get</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A9B1D6;"> Int</span><span style="color:#9ABDF5;">]()</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">item2</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>3</span></span></span></code></pre></div><h3 id="slice" tabindex="-1"><a class="header-anchor" href="#slice"><span>Slice</span></a></h3><p>A slice follows the python convention of:</p><p><code>start:end:step</code></p><p>So for example using Python syntax:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> original</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> String</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">MojoDojo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">original</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">]</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>Mojo</span></span></span></code></pre></div><p>You can also represent as:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> slice_expression</span><span style="color:#89DDFF;"> =</span><span style="color:#0DB9D7;"> slice</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">original</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">slice_expression</span><span style="color:#9ABDF5;">]</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>Mojo</span></span></span></code></pre></div><p>And to get every second letter:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#A9B1D6;">original</span><span style="color:#9ABDF5;">[</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">4</span><span style="color:#89DDFF;">:</span><span style="color:#FF9E64;">2</span><span style="color:#9ABDF5;">]</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>Mj</span></span></span></code></pre></div><p>Or:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> slice_expression2</span><span style="color:#89DDFF;"> =</span><span style="color:#0DB9D7;"> slice</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">0</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 2</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">original</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">slice_expression2</span><span style="color:#9ABDF5;">]</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>Mj</span></span></span></code></pre></div><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error"><span>Error</span></a></h3><p>The error type is very simplistic, we&#39;ll go into more details on errors in a later chapter:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#51597D;font-style:italic;"># md-notebook:skip</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">def</span><span style="color:#7AA2F7;"> return_error</span><span style="color:#9ABDF5;">():</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    raise</span><span style="color:#7AA2F7;"> Error</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">This returns an Error type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#7AA2F7;">return_error</span><span style="color:#9ABDF5;">()</span></span></span></code></pre></div><div class="language-plaintext" data-highlighter="prismjs" data-ext="plaintext" data-title="plaintext"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-plaintext;"><code><span class="line"><span class="line"><span>Unhandled exception caught during execution: This returns an Error type</span></span></span></code></pre></div><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises"><span>Exercises</span></a></h2><ol><li>Use the Python interpreter to calculate 2 to the power of 8 in a <code>PythonObject</code> and print it</li><li>Using the Python <code>math</code> module, return <code>pi</code> to Mojo and print it</li><li>Initialize two single floats with 64 bits of data and the value 2.0, using the full SIMD version, and the shortened alias version, then multiply them together and print the result.</li><li>Create a loop using SIMD that prints four rows of data that looks like this:</li></ol><div class="language-text line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>    [1,0,0,0]</span></span></span>
<span class="line"><span class="line"><span>    [0,1,0,0]</span></span></span>
<span class="line"><span class="line"><span>    [0,0,1,0]</span></span></span>
<span class="line"><span class="line"><span>    [0,0,0,1]</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In Mojo you can create a loop like this:</p><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#BB9AF7;">    pass</span></span></span></code></pre></div><h2 id="solutions" tabindex="-1"><a class="header-anchor" href="#solutions"><span>Solutions</span></a></h2><h3 id="exercise-1" tabindex="-1"><a class="header-anchor" href="#exercise-1"><span>Exercise 1</span></a></h3><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> pow</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> Python</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">evaluate</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">2 ** 8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span><span style="color:#A9B1D6;"> </span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">pow</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>256</span></span></span></code></pre></div><h3 id="exercise-2" tabindex="-1"><a class="header-anchor" href="#exercise-2"><span>Exercise 2</span></a></h3><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> math</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> Python</span><span style="color:#89DDFF;">.</span><span style="color:#7AA2F7;">import_module</span><span style="color:#9ABDF5;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ECE6A;">math</span><span style="color:#89DDFF;">&quot;</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> pi</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> math</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">pi</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">pi</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>3.141592653589793</span></span></span></code></pre></div><h3 id="exercise-3" tabindex="-1"><a class="header-anchor" href="#exercise-3"><span>Exercise 3</span></a></h3><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> left</span><span style="color:#89DDFF;"> =</span><span style="color:#7AA2F7;"> Float64</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">2.0</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> right</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">float64</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 1</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">2.0</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#9D7CD8;font-style:italic;">var</span><span style="color:#C0CAF5;"> res</span><span style="color:#89DDFF;"> =</span><span style="color:#A9B1D6;"> left </span><span style="color:#89DDFF;">*</span><span style="color:#A9B1D6;"> right</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">res</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>4.0</span></span></span></code></pre></div><h3 id="exercise-4" tabindex="-1"><a class="header-anchor" href="#exercise-4"><span>Exercise 4</span></a></h3><div class="language-mojo" data-highlighter="prismjs" data-ext="mojo" data-title="mojo"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-mojo;"><code><span class="line"><span class="line"><span style="color:#BB9AF7;">for</span><span style="color:#A9B1D6;"> i </span><span style="color:#BB9AF7;">in</span><span style="color:#0DB9D7;"> range</span><span style="color:#9ABDF5;">(</span><span style="color:#FF9E64;">4</span><span style="color:#9ABDF5;">)</span><span style="color:#89DDFF;">:</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    simd </span><span style="color:#89DDFF;">=</span><span style="color:#FF9E64;"> SIMD</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">DType</span><span style="color:#89DDFF;">.</span><span style="color:#A9B1D6;">uint8</span><span style="color:#89DDFF;">,</span><span style="color:#FF9E64;"> 4</span><span style="color:#9ABDF5;">](</span><span style="color:#FF9E64;">0</span><span style="color:#9ABDF5;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#A9B1D6;">    simd</span><span style="color:#9ABDF5;">[</span><span style="color:#A9B1D6;">i</span><span style="color:#9ABDF5;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9E64;"> 1</span></span></span>
<span class="line"><span class="line"><span style="color:#0DB9D7;">    print</span><span style="color:#9ABDF5;">(</span><span style="color:#C0CAF5;">simd</span><span style="color:#9ABDF5;">)</span></span></span></code></pre></div><div class="language-text" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="shiki tokyo-night vp-code" style="background-color:#1a1b26;color:#a9b1d6 language-text;"><code><span class="line"><span class="line"><span>[1, 0, 0, 0]</span></span></span>
<span class="line"><span class="line"><span>[0, 1, 0, 0]</span></span></span>
<span class="line"><span class="line"><span>[0, 0, 1, 0]</span></span></span>
<span class="line"><span class="line"><span>[0, 0, 0, 1]</span></span></span></code></pre></div>`,171)]))}const i=a(o,[["render",t],["__file","basic-types.html.vue"]]),r=JSON.parse('{"path":"/guides/intro-to-mojo/basic-types.html","title":"Basic Types","lang":"en-US","frontmatter":{"title":"Basic Types","categories":"01: Basic Types","usage":"Get started with Mojo basic types and how to interact with Python","head":[["meta",{"name":"twitter:card","content":"summary"}],["meta",{"name":"twitter:site","content":"@mojodojodev"}],["meta",{"name":"twitter:title","content":"Intro to Mojo: Basic Types"}],["meta",{"name":"twitter:description","content":"Get started with Mojo basic types and how to interact with Python"}],["meta",{"name":"twitter:image","content":"https://mojodojo.dev/hero.png"}]]},"headers":[{"level":2,"title":"PythonObject","slug":"pythonobject","link":"#pythonobject","children":[]},{"level":2,"title":"Mojo 🔥","slug":"mojo-🔥","link":"#mojo-🔥","children":[]},{"level":2,"title":"SIMD","slug":"simd","link":"#simd","children":[]},{"level":2,"title":"Scalars","slug":"scalars","link":"#scalars","children":[]},{"level":2,"title":"Strings","slug":"strings","link":"#strings","children":[]},{"level":2,"title":"Other Builtins","slug":"other-builtins","link":"#other-builtins","children":[{"level":3,"title":"Bool","slug":"bool","link":"#bool","children":[]},{"level":3,"title":"Int","slug":"int","link":"#int","children":[]},{"level":3,"title":"FloatLiteral","slug":"floatliteral","link":"#floatliteral","children":[]},{"level":3,"title":"ListLiteral","slug":"listliteral","link":"#listliteral","children":[]},{"level":3,"title":"Tuple","slug":"tuple","link":"#tuple","children":[]},{"level":3,"title":"Slice","slug":"slice","link":"#slice","children":[]},{"level":3,"title":"Error","slug":"error","link":"#error","children":[]}]},{"level":2,"title":"Exercises","slug":"exercises","link":"#exercises","children":[]},{"level":2,"title":"Solutions","slug":"solutions","link":"#solutions","children":[{"level":3,"title":"Exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":3,"title":"Exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]},{"level":3,"title":"Exercise 3","slug":"exercise-3","link":"#exercise-3","children":[]},{"level":3,"title":"Exercise 4","slug":"exercise-4","link":"#exercise-4","children":[]}]}],"git":{"contributors":[{"name":"Mojo Dojo","username":"Mojo Dojo","email":"mojodojodev@gmail.com","commits":1,"url":"https://github.com/Mojo Dojo"},{"name":"Jack Clayton","username":"Jack Clayton","email":"jackos@me.com","commits":3,"url":"https://github.com/Jack Clayton"}]},"filePathRelative":"guides/intro-to-mojo/basic-types.md"}');export{i as comp,r as data};
